exports.ids=[59],exports.modules={299:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});s.content='<h3 id="h3-1">字节码解析</h3>\n\n<h4 id="h4-1">结构</h4>\n<p>本位将详细介绍字节码的2进制结构和JVM解析2进制流的规范。规范对字节码有非常严格的结构要求，其结构可以用一个JSON来描述：</p>\n<pre><code class="javascript">{\n  <span class="hljs-attr">magicNumber</span>: <span class="hljs-number">0xcafebabe</span>,<span class="code-comment">//魔数</span>\n  minorVersion: <span class="hljs-number">0x00</span>, <span class="code-comment">//副版本号</span>\n  majorVersion: <span class="hljs-number">0x02</span>, <span class="code-comment">//主版本号</span>\n  constantPool:{ <span class="code-comment">//常量池集合</span>\n    length:<span class="hljs-number">1</span>,<span class="code-comment">//常量个数</span>\n    info:[{<span class="hljs-attr">id</span>:<span class="code-string">"#1“,type:"</span>UTF8<span class="code-string">",params:"</span>I<span\n            class="code-string">"}]//常量具体信息\n  },\n  accessFlag:2,//类访问标志\n  className:constantPool.info[1].id,//类名称，引用常量池数据\n  superClassName:constantPool.info[2].id,//父类名称，引用常量池数据\n  interfaces:{length:1,[id:constantPool.info[3].id],//接口集合\n  fields:{ //字段集合\n    length:1,//字段个数\n    info:[{\n      accessFlag:\'PUBLIC\', //访问标志\n      name:constantPool.info[4].id //名称，引用常量池数据\n      description:constantPool.info[5].id //描述，引用常量池数据\n      attributes:{length:0,info:[]} //属性集合\n    }]\n  },\n  methods:{ //方法集合\n    length:2, //方法个数\n    info:[{\n      accessFlag:\'PUBLIC\', //访问标志\n      name:constantPool.info[4].id //名称，引用常量池数据\n      description:constantPool.info[5].id //描述，引用常量池数据\n      attributes:{ //属性集合\n        length:1, //属性集合长度\n        info:[{\n          name:constantPool.info[6].id,//属性名称索引，引用常量池数据\n          byteLength:6,\n          info:\'\', //属性内容，每一种属性结构都不同。\n        }]} \n    }]\n  },\n  attributes:{length:0,info:[]} //类的属性\n}</span></code></pre>\n<p>本文会将下面这一段Java源码编译成字节码，然后一一说明每一个字节是如何解析的：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">SimpleClass</span></span>{\n\t<span class="code-keyword">private</span> <span class="code-keyword">int</span> i;\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">int</span> <span\n            class="code-title">get</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> i;\n\t}\n}</code></pre>\n<p>将源码编译成后，会转换成下面2进制流，通常用16进制来展示（1byte=8bit所以1个字节可以用2个16进制数类表示，即0xFF 相当与2进制的1111）。</p>\n<pre><code class="makefile">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n 0: cafe babe 0000 0034 0013 0a00 0400 0f09  \n 1: 0003 0010 0700 1107 0012 0100 0169 0100  \n 2: 0149 0100 063c 696e 6974 3e01 0003 2829  \n 3: 5601 0004 436f 6465 0100 0f4c 696e 654e  \n 4: 756d 6265 7254 6162 6c65 0100 0367 6574  \n 5: 0100 0328 2949 0100 0a53 6f75 7263 6546  \n 6: 696c 6501 0010 5369 6d70 6c65 436c 6173  \n 7: 732e 6a61 7661 0c00 0700 080c 0005 0006  \n 8: 0100 2265 7861 6d70 6c65 2f63 6c61 7373  \n 9: 4c69 6665 6369 636c 652f 5369 6d70 6c65  \n a: 436c 6173 7301 0010 6a61 7661 2f6c 616e  \n b: 672f 4f62 6a65 6374 0021 0003 0004 0000  \n c: 0001 0002 0005 0006 0000 0002 0001 0007  \n d: 0008 0001 0009 0000 001d 0001 0001 0000  \n e: 0005 2ab7 0001 b100 0000 0100 0a00 0000  \n f: 0600 0100 0000 0300 0100 0b00 0c00 0100  \n<span class="code-section">10: 0900 0000 1d00 0100 0100 0000 052a b400  </span>\n<span class="code-section">11: 02ac 0000 0001 000a 0000 0006 0001 0000  </span>\n<span class="code-section">12: 0006 0001 000d 0000 0002 000e 0a</span></code></pre>\n<p>字节码是用2进制的方式紧凑记录，不会留任何缝隙。所有的信息都是靠位置识别。JVM规范已经详细定义每一个位置的数据内容。</p>\n<blockquote>\n    <p>文中斜体&nbsp;<em>~00~03&nbsp;</em>表示16进制流的从第一个字节开始的偏移位置。<em>~1d</em> 表示1行d列这1个字段，<em>~00~03&nbsp;</em>表示0行0列到0行3列这4个字节。每2个16进制数表示一个字节。因此\n        <em>~00~03 </em>表示0xcafebabe，一共4个字节。</p>\n</blockquote>\n\n<h4 id="h4-2">magicNumber魔数</h4>\n<p><em>~00~03&nbsp;</em>是字节码的魔数。</p>\n<pre><code class="">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f\n 0: cafe babe</code></pre>\n<p>它用于在文件中标记文件类型达到比文件后缀更高的安全性。魔数一共4字节，用16进制的数据显示就是0xcafebabe（11001010111111101011101010111110）。</p>\n\n<h4 id="h4-3">version版本号</h4>\n<p><em>~04~07</em> 是当前字节码的版本号。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">0</span>: <span class="code-comment">#### ###</span><span\n            class="code-comment"># 0000 0034  </span></code></pre>\n<p>通常情况下低版本的JVM无法执行高版本的字节码。所以每一个编译出来的 <em>.class</em> 文件都会携带版本号。版本号分为2个部分。前2个字节表示副版本号，后2个字节是主版本号。</p>\n<p><em>~04~05</em>：0x0000=&gt;副版本号为0。</p>\n<p><em>~06~07</em>：0x0034=&gt;主版本号为52。</p>\n\n<h4 id="h4-4">Constant Pool 常量池集合</h4>\n<pre><code class="javascript">{ <span class="code-comment">//常量池集合</span>\n  length:<span class="hljs-number">1</span>,<span class="code-comment">//常量个数，2byte</span>\n  info:[{\n    <span class="hljs-attr">id</span>:<span class="code-string">"#1“, //索引, 1byte\n    type:"</span>UTF8<span class="code-string">", // 类型, 1byte\n    params:"</span>I<span class="code-string">" //参数，根据类型而定\n  }]//常量具体信息\n}</span></code></pre>\n<p>如上图，常量池是一个集合，他分为集合数量和集合内容部分</p>\n<p><strong>常量池个数</strong></p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">0</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### 0013  </span></code></pre>\n<p><em>~08~09&nbsp;</em>表示常量池的常量个数。常量池的索引可以理解为从0开始的，但是保留#0用来表示什么都不索引。这里的0x0013换算成10进制就是19,表示一共有19个常量——#0~#18。</p>\n<p><strong>常量池列表</strong></p>\n<p>\n    紧随着常量池索引的是常量池的内容，是一个列表结构。常量池中可以放置14种类型的内容。而每个类型又有自己专门的结构。通常情况下列表中每个元素的第一个字节表示常量的类型（见附录——常量类型），后续几个字节表示索引位置、参数个数等。下面开始解析每一个常量</p>\n<p><strong>#1</strong>，<em>~0a~0e&nbsp;</em>是第一个常量，</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">0</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### 0a00 0400 0f## </span></code></pre>\n<p>0x0a=10，查找对应的类型是一个<em><strong>Methodref</strong></em>类型的常量。<strong><em>Methodref</em></strong>的常量按照规范后续紧跟2个分别2字节的常量池索引，所以0x0004=4和0x000f=15，表示2个参数索引到常量池的#4和#15。\n</p>\n<p><strong>#2</strong>，<em>~0f~13</em><em> </em>是第二个常量，</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">0</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### #### #### ##09  </span>\n <span class="hljs-number">1</span>: <span class="hljs-number">0003</span> <span class="hljs-number">0010</span> </code></pre>\n<p>0x09=9，根据常量池类型表索引，这是一个<strong><em>Fieldref</em></strong>类型的常量。他的结构和<strong><em>Methodref</em></strong>一样也是紧跟2个2字节的参数，0x0003和0x0010表示索引常量池的#3和#16。\n</p>\n<p><strong>#3</strong>，下一个常量是 <em>~</em><em>14~16&nbsp;</em>，</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">1</span>: <span class="code-comment">#### ###</span><span\n            class="code-comment"># 0700 11</span></code></pre>\n<p>0x07表示该位置常量是一个<em><strong>Class</strong></em> 类型，它的参数是一个2字节的常量池索引。0x0011表示索引到常量池#17的位置。</p>\n<p><strong>#4</strong>，<em>~17~19</em> 是另外一个 <strong><em>Class</em></strong> 类型的常量，<em>~18~19</em> 的参数表示索引到#18位置。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">1</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### ##07 0012  </span></code></pre>\n<p><strong>#5</strong>，接下来，<em>~1a~1d </em>是一个 <strong><em>UTF8</em></strong> 类型，</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">1</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### 0100 0169 </span></code></pre>\n<p><em>~1a </em>的0x01表示这个常量是一个 <strong><em>UTF8</em></strong> 类型。他后续2个字节表示字符串长度，然后就是字符串内容。</p>\n<p><em>~1b~1c</em>：<em><strong>UTF8</strong></em> 的字符串长度，0x0001表示自由一个字符。</p>\n<p><em>~1d</em>：表示字符编码，0x69=105，对应的ASCII就是字符"i"。</p>\n<p>字节码采用UTF-8缩略编码的方式编码——\'\'到\'\'的字符串（相当于ASCII 0~127）只用一个字节表示，而\'ࠀ\'到\'￿\'的编码使用3个字节表示。</p>\n<p><strong>#6</strong>，继续往下 <em>~1e~21</em>&nbsp;又是一个 <em><strong>UTF8</strong></em> 类型。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">1</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### #### #### 0100  </span>\n <span class="hljs-number">2</span>: <span class="hljs-number">0149</span> </code></pre>\n<p><em>~1e</em>：0x01表示 <em><strong>UTF8</strong></em> 类型。</p>\n<p><em>~1f~21</em>：0x0001，表示UTF8字符串长度1。</p>\n<p><em>~22</em>：0x49=73，换算成ACSII为"I"。</p>\n<p><strong>#7</strong>，<em>~</em>22开始还是一个UTF8类型。</p>\n<pre><code class="bash">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n 2: <span class="code-comment">#### 0100 063c 696e 6974 3e</span></code></pre>\n<p><em>~22</em>：0x01表示 <em><strong>UTF8</strong></em> 类型。</p>\n<p><em>~23~24</em>：0x0006表示一共包含8个字符。<br> <em>~25~2a</em>：依次为0x3c=\'&lt;\'、0x69=\'i\'、0x6e=\'n\'、0x69=\'i\'、0x74=\'t\'、0x3e=\'&gt;\'，所以这个UTF8所表示的符号为"&lt;init&gt;"，代表了一个类的构造方法。\n</p>\n<p><strong>#8</strong>，<em>~2b~30</em>是一个长度为3的UTF8类型，值为"()V"。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">2</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### ##01 0003 2829  </span>\n <span class="hljs-number">3</span>: <span class="hljs-number">56</span></code></pre>\n<p><strong>#9</strong>，<em>~31~37：</em> <em><strong>UTF8</strong></em> ，值为"Code"</p>\n<pre><code class="bash">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n 3: <span class="code-comment">##01 0004 436f 6465 </span></code></pre>\n<p><strong>#10</strong>，<em>~38~49：</em> <em><strong>UTF8</strong></em> ，值为"LineNumberTable"</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">3</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### 0100 0f4c 696e 654e  </span>\n <span class="hljs-number">4</span>: <span class="hljs-number">756</span>d <span class="hljs-number">6265</span> <span\n            class="hljs-number">7254</span> <span class="hljs-number">6162</span> <span class="hljs-number">6</span>c65  </code></pre>\n<p><strong>#11</strong>，<em>~4a~4f</em>： <em><strong>UTF8</strong></em> ，"get"，表示我们代码中的get方法的字面名称。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">4</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### 0100 0367 6574  </span></code></pre>\n<p><strong>#12</strong>，<em>~50~55</em>： <em><strong>UTF8</strong></em> ，"()I"，表示一个返回整数的方法符号。</p>\n<pre><code class="">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f  \n 5: 0100 0328 2949 </code></pre>\n<p><strong>#13</strong>，<em>~56~62</em>： <em><strong>UTF8</strong></em> ，长度0x0a，值"SourceFile"。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">5</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### 0100 0a53 6f75 7263 6546  </span>\n <span class="hljs-number">6</span>: <span class="hljs-number">696</span>c <span\n            class="hljs-number">65</span></code></pre>\n<p><strong>#14</strong>，<em>~63~75</em>： <em><strong>UTF8</strong></em> ，"SimpleClass.java"，表示当前类的名称</p>\n<pre><code class="bash">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n 6: <span class="code-comment">#### ##01 0010 5369 6d70 6c65 436c 6173  </span>\n 7: 732e 6a61 7661  </code></pre>\n<p><strong>#15</strong>，<em>~76~7a</em>是一个<em><strong>NameAndType</strong></em>类型（0x0c=12），</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">7</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### 0c00 0700 08</span></code></pre>\n<p><em><strong>NameAndType</strong></em>类型接收2个2字节的参数，代表名称的索引和类型的索引。这里的参数值为0x0007和0x0008，指向常量池的#7和#8位置，刚才已经还原出来#7="&lt;init&gt;"，#8="()V"。所以这是一个没有参数返回为void的构造方法。\n</p>\n<p><strong>#16，</strong><em>~7b~7f</em>还是一个<em><strong>NameAndType</strong></em>，2个索引分别指向#5="i"，#6="I"，这里符号指定的是类中的成员变量i，他一个整数类型。\n</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">7</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### 0c00 0700 08</span></code></pre>\n<p><strong>#17，</strong><em>~80~a4：</em>长度为32的字符串（0x0022=32）,值为"example/classLifecicle/SimpleClass"</p>\n<pre><code class="">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n 8: 0100 2265 7861 6d70 6c65 2f63 6c61 7373 \n 9: 4c69 6665 6369 636c 652f 5369 6d70 6c65  \n a: 436c 6173 73 </code></pre>\n<p><strong>#18，</strong><em>~</em>a5~b7：长度为16的字符串，值为"java/lang/Object"</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n a: <span class="code-comment">#### ###</span><span class="code-comment"># ##01 0010 6a61 7661 2f6c 616e  </span>\n b: <span class="hljs-number">672</span>f <span class="hljs-number">4</span>f62 <span\n            class="hljs-number">6</span>a65 <span class="hljs-number">6374</span> </code></pre>\n<p>到此已经解析完全部18个常量，JVM开始解析之后的访问标志（<strong><em>access_flags</em></strong>）。</p>\n\n<h4 id="h4-5">accessFlag 访问标志</h4>\n<p>访问标志就是在Java源码中为类的使用范围和功能提供的限定符号。在一个独立的字节码文件中，仅用2个字节记录，目前定义了8个标志：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>标志名称</td>\n        <td>值(16进制)</td>\n        <td>位(bit）</td>\n        <td>描述</td>\n    </tr>\n    <tr>\n        <td>PUBLIC</td>\n        <td>0x0001</td>\n        <td>0000000000000001</td>\n        <td>对应public类型的类</td>\n    </tr>\n    <tr>\n        <td>FINAL&nbsp; &nbsp;</td>\n        <td>0x0010</td>\n        <td>0000000000010000</td>\n        <td>对应类的final声明</td>\n    </tr>\n    <tr>\n        <td>SUPER</td>\n        <td>0x0020</td>\n        <td>0000000000100000</td>\n        <td>标识JVM的invokespecial新语义</td>\n    </tr>\n    <tr>\n        <td>INTERFACE</td>\n        <td>0x0200</td>\n        <td>0000001000000000</td>\n        <td>接口标志</td>\n    </tr>\n    <tr>\n        <td>ABSTRACT</td>\n        <td>0x0400</td>\n        <td>0000010000000000</td>\n        <td>抽象类标志</td>\n    </tr>\n    <tr>\n        <td>SYNTHETIC</td>\n        <td>0x1000</td>\n        <td>0001000000000000</td>\n        <td>标识这个类并非用户代码产生</td>\n    </tr>\n    <tr>\n        <td>ANNOTATION</td>\n        <td>0x2000</td>\n        <td>0010000000000000</td>\n        <td>标识这是一个注解</td>\n    </tr>\n    <tr>\n        <td>ENUM</td>\n        <td>0x4000</td>\n        <td>0100000000000000</td>\n        <td>标识这是一个枚举</td>\n    </tr>\n    </tbody>\n</table>\n<p>访问标志不是按数据标识，而是按位置标识。即每一个bit即是一个标识，而bit上的0/1表示true/false。所以2字节一共可以使用16个标识位，目前使用了8个。</p>\n<p>本例中访问标志在&nbsp;<em>~b8~b92</em>。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n b: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### 0021 </span></code></pre>\n<p>按照位现实的思路，他就代表具有public和super标志，用位来表示就是：<em>00010001=0x0021。</em></p>\n\n<h4 id="h4-6">类、父类和接口集合</h4>\n<p>访问标志之后的6个字节用来标记类、父类和接口集合。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n b: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### 0003 0004 0000  </span></code></pre>\n<p><em>~ba~bb</em>：0x0003表示类对应的数据在常量池#3位置。#3是一个class，并且指向#17——"example/classLifecicle/SimpleClass"，这个字符串就是当前类的全限定名。</p>\n<p><em>~bc~bd</em>：0x0004表示父类对应常量池#4的值，JVM解析常量池后可以还原出父类的全限定名为"java/lang/Object"。</p>\n<p>接口能多重继承，因此是一个集合，结构为：2字节表示接口个数，后续每2字节的记录常量池的索引位置。这里 <em>~be~bf</em>&nbsp;的数据为0x0000，表示没有任何接口。</p>\n\n<h4 id="h4-7">fields 字段集合</h4>\n<p>随后是表示字段的集合，一般用来记录成员变量。</p>\n<pre><code class="javascript">{ <span class="code-comment">//字段集合</span>\n    length:<span class="hljs-number">1</span>,<span class="code-comment">//字段个数，2byte</span>\n    info:[{\n      <span class="hljs-attr">accessFlag</span>:<span class="code-string">\'PUBLIC\'</span>, <span class="code-comment">//访问标志，2byte</span>\n      name:constantPool.info[<span class="hljs-number">4</span>].id <span class="code-comment">//名称，引用常量池数据，2byte</span>\n      description:constantPool.info[<span class="hljs-number">5</span>].id <span\n            class="code-comment">//描述，引用常量池数据，2byte</span>\n      attributes:{<span class="hljs-attr">length</span>:<span class="hljs-number">0</span>,[]} <span\n            class="code-comment">//属性集合</span>\n    }]\n}</code></pre>\n<p>\n    如上图，字段集合首先2个字节表示有多少个字段。然后是一个列表，列表中每个元素分为4个部分，前三个部分每个2个字节。第一个部分是字段访问标志、第二个部分是字段名称的常量池索引，第三个部分是描述（类型）的常量池索引，第四个部分是属性。属性也是一个不定长度的集合。</p>\n<p>字段的访问标志和类一样，也是2个字节按位标识：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>名称</td>\n        <td>标志值（0x）</td>\n        <td>位（bit）</td>\n        <td>描述</td>\n    </tr>\n    <tr>\n        <td>PUBLIC</td>\n        <td>0x0001</td>\n        <td>0000000000000001</td>\n        <td>字段是否为public</td>\n    </tr>\n    <tr>\n        <td>PRIVATE&nbsp;</td>\n        <td>0x0002</td>\n        <td>0000000000000010</td>\n        <td>字段是否为private</td>\n    </tr>\n    <tr>\n        <td>PROTECTED</td>\n        <td>0x0004</td>\n        <td>0000000000000100</td>\n        <td>字段是否为protected</td>\n    </tr>\n    <tr>\n        <td>STATIC</td>\n        <td>0x0008</td>\n        <td>0000000000001000</td>\n        <td>字段是否为static</td>\n    </tr>\n    <tr>\n        <td>FINAL</td>\n        <td>0x0010</td>\n        <td>0000000000010000</td>\n        <td>字段是否为final</td>\n    </tr>\n    <tr>\n        <td>VOLATILE</td>\n        <td>0x0040</td>\n        <td>0000000000100000</td>\n        <td>字段是否为volatile</td>\n    </tr>\n    <tr>\n        <td>TRANSIENT</td>\n        <td>0x0080</td>\n        <td>0000000001000000</td>\n        <td>字段是否为transient</td>\n    </tr>\n    <tr>\n        <td>SYNTHETIC</td>\n        <td>0x1000</td>\n        <td>0001000000000000</td>\n        <td>字段是否由编译器自动产生</td>\n    </tr>\n    <tr>\n        <td>ENUM</td>\n        <td>0x4000</td>\n        <td>0100000000000000</td>\n        <td>字段是否为enum</td>\n    </tr>\n    </tbody>\n</table>\n<p>字段的描述是用一个简单的符号来表示字段的类型：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>表示字符</td>\n        <td>含义</td>\n        <td>标识字符&nbsp;</td>\n        <td>含义</td>\n    </tr>\n    <tr>\n        <td>B</td>\n        <td>byte字节类型</td>\n        <td>J</td>\n        <td>long长整型</td>\n    </tr>\n    <tr>\n        <td>C</td>\n        <td>char字符类型</td>\n        <td>S</td>\n        <td>short短整型</td>\n    </tr>\n    <tr>\n        <td>D</td>\n        <td>double双精度浮点</td>\n        <td>Z</td>\n        <td>boolean布尔型</td>\n    </tr>\n    <tr>\n        <td>F</td>\n        <td>float单精度浮点</td>\n        <td>V</td>\n        <td>void类型</td>\n    </tr>\n    <tr>\n        <td>I</td>\n        <td>int整型</td>\n        <td>L</td>\n        <td>对象引用类型</td>\n    </tr>\n    </tbody>\n</table>\n<p>本例中 <em>~</em>c0~c9就是整个字段集合，</p>\n<pre><code class="">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n c: 0001 0002 0005 0006 0000 </code></pre>\n<p><em>~c0~c1</em>：表示集合个数，这里只有1个字段。</p>\n<p><em>~c2~c3</em>：0x0002表示第一个字段的访问标志，这里表示私有成员。</p>\n<p><em>~c4~c5</em>：0x0005表示第一个字段的名称，这里索引常量池的#5，值为"i"。</p>\n<p><em>~c6~c7</em>：0x0006表示第一个字段的描述，这里索引常量池的#6，值为"I"，表示是一个int。</p>\n<p><em>~c8~c9</em>：0x0000表示第一个字段的属性，这里的0表示没有属性。</p>\n<p>根据上面的内容，我们可以还原出这个字段的结构：private int i。</p>\n<p>如果定义了值，例如：private int i = 123。会存在一个名为ConstantValue的常量属性，指向常量池的一个值。</p>\n\n<h4 id="h4-8">方法集合与属性集合</h4>\n<p>字段解析完毕之后就是方法。方法集合的结构和字段集合的结构几乎一样，也是先有一个列表个数，然后列表的每个元素分成访问标志、名称索引、描述、属性4个部分：</p>\n<pre><code class="javascript">{ <span class="code-comment">//方法集合</span>\n    length:<span class="hljs-number">1</span>,<span class="code-comment">//方法个数，2byte</span>\n    info:[{\n      <span class="hljs-attr">accessFlag</span>:<span class="code-string">\'PUBLIC\'</span>, <span class="code-comment">//访问标志，2byte</span>\n      name:constantPool.info[<span class="hljs-number">4</span>].id <span class="code-comment">//名称，引用常量池数据，2byte</span>\n      description:constantPool.info[<span class="hljs-number">5</span>].id <span\n            class="code-comment">//描述，引用常量池数据，2byte</span>\n      attributes:{<span class="hljs-attr">length</span>:<span class="hljs-number">0</span>,[]} <span\n            class="code-comment">//属性集合</span>\n    }]\n}</code></pre>\n<p>方法的访问标志：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>名称</td>\n        <td>标志值（0x）</td>\n        <td>位（bit）</td>\n        <td>描述</td>\n    </tr>\n    <tr>\n        <td>PUBLIC</td>\n        <td>0x0001</td>\n        <td>0000000000000001</td>\n        <td>方法是否为public</td>\n    </tr>\n    <tr>\n        <td>PRIVATE&nbsp;</td>\n        <td>0x0002</td>\n        <td>0000000000000010</td>\n        <td>方法是否为private</td>\n    </tr>\n    <tr>\n        <td>PROTECTED</td>\n        <td>0x0004</td>\n        <td>0000000000000100</td>\n        <td>方法是否为protected</td>\n    </tr>\n    <tr>\n        <td>STATIC</td>\n        <td>0x0008</td>\n        <td>0000000000001000</td>\n        <td>方法是否为static</td>\n    </tr>\n    <tr>\n        <td>FINAL</td>\n        <td>0x0010</td>\n        <td>0000000000010000</td>\n        <td>方法是否为final</td>\n    </tr>\n    <tr>\n        <td>BRIDGE</td>\n        <td>0x0040</td>\n        <td>0000000000100000</td>\n        <td>方法是否由编译器生成的桥接方法</td>\n    </tr>\n    <tr>\n        <td>VARARGS</td>\n        <td>0x0080</td>\n        <td>0000000001000000</td>\n        <td>方法是否不定参数</td>\n    </tr>\n    <tr>\n        <td>NATIVE</td>\n        <td>0x0100</td>\n        <td>0000000100000000</td>\n        <td>方法是否为native</td>\n    </tr>\n    <tr>\n        <td>ABSTRACT</td>\n        <td>0x0400</td>\n        <td>0000010000000000</td>\n        <td>方法是否为abstract</td>\n    </tr>\n    <tr>\n        <td>STRICTFP</td>\n        <td>0x0800</td>\n        <td>0000100000000000</td>\n        <td>方法是否为strictfp</td>\n    </tr>\n    <tr>\n        <td>SYNTHETIC</td>\n        <td>0x1000</td>\n        <td>0001000000000000</td>\n        <td>方法是否由编译器自动产生</td>\n    </tr>\n    </tbody>\n</table>\n<p>方法集合从 <em>~ca</em> 开始：</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n c: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### 0002 0001 0007  </span>\n d: <span class="hljs-number">0008</span> <span class="hljs-number">0001</span> <span\n            class="hljs-number">0009</span> </code></pre>\n<p><em>~ca~cb</em>：0x0002表示有2个方法。</p>\n<p><em>~cc~cd</em>：0x0001表示第一个方法的访问标志为public。</p>\n<p><em>~ce~cf</em>：0x0007表示第一个方法的名称在常量池#7位置——"&lt;init&gt;"。</p>\n<p><em>~d0~d1</em>：0x0008表示第一个方法的描述在常量池#8位置——"()V"，它表示一个没有参数传入的方法，返回一个void。</p>\n<p><em>~d2~d3</em>：0x0001表示第一个方法有一个属性。随后的 <em>~d4~d5&nbsp;</em>的0x0009表示属性的名称索引，值为"Code"</p>\n<p>\n    前面已经多次提到属性的概念。在字节码中属性也是一个集合结构。目前JVM规范已经预定义21个属性，常见的有"Code"、"ConstantValue"、"Deprecated"等。每一个属性都需要通过一个索引指向常量池的UTF8类型表示属性名称。除了预定义的属性之外，用户还可以添加自己的属性。一个标准的属性结构如下：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\n    <tbody>\n    <tr>\n        <td>名称</td>\n        <td>字节数</td>\n        <td>描述</td>\n        <td>数量</td>\n    </tr>\n    <tr>\n        <td>name_index</td>\n        <td>2</td>\n        <td>常量池表示属性名称的索引</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>length</td>\n        <td>4</td>\n        <td>属性信息的长度&nbsp;(单位字节)</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>info</td>\n        <td>length</td>\n        <td>属性内容</td>\n        <td>length</td>\n    </tr>\n    </tbody>\n</table>\n<p>每一种属性的属性内容都有自己的结构，下面"Code"属性的结构：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\n    <tbody>\n    <tr>\n        <td>名称</td>\n        <td>字节数</td>\n        <td>描述</td>\n        <td>数量</td>\n    </tr>\n    <tr>\n        <td>max_stack</td>\n        <td>2</td>\n        <td>最大堆栈数</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>max_locals</td>\n        <td>2</td>\n        <td>最大本地槽数</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>code_length</td>\n        <td>4</td>\n        <td>指令集数</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>code</td>\n        <td>code_length</td>\n        <td>代码内容</td>\n        <td>code_length</td>\n    </tr>\n    <tr>\n        <td>exceptions_table_length</td>\n        <td>2</td>\n        <td>异常输出表数</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>exceptions_table</td>\n        <td>&nbsp;</td>\n        <td>异常输出表</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td>attributes_count</td>\n        <td>2</td>\n        <td>属性个数</td>\n        <td>1</td>\n    </tr>\n    <tr>\n        <td>attributes</td>\n        <td>&nbsp;</td>\n        <td>属性内容</td>\n        <td>&nbsp;</td>\n    </tr>\n    </tbody>\n</table>\n<p>回到本文的例子：</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n d: <span class="code-comment">#### ###</span><span class="code-comment"># 0009 0000 001d 0001 0001 0000  </span>\n e: <span class="hljs-number">0005</span> <span class="hljs-number">2</span>ab7 <span class="hljs-number">0001</span> b100 <span\n            class="hljs-number">0000</span> <span class="hljs-number">0100</span> <span class="hljs-number">0</span>a00 <span\n            class="hljs-number">0000</span>\n f: <span class="hljs-number">0600</span> <span class="hljs-number">0100</span> <span\n            class="hljs-number">0000</span> <span class="hljs-number">03</span></code></pre>\n<p>从d4开始就是"&lt;init&gt;"方法的"Code"属性，前面已经说了d4~d5表示这个属性的常量池索引。</p>\n<p><em>~d6~d9</em>：4个字节表示属性的长度，0x0000001d表示属性长度为29——后续29个字节都为该属性的内容。</p>\n<p><em>~da~db</em>：0x0001表示最大堆栈数为1。</p>\n<p><em>~dc~dd</em>： 0x0001表示最大本地槽（本地内存）为1。</p>\n<p><em>~de~e1</em>： 0x00000005表示方法的指令集长度为5。</p>\n<p><em>~e2~e6</em>：\'2a b7 00 01 b1\'5个字节就是该方法的指令集。指令集是用于JVM堆栈计算的代码，每个代码用1个字节表示。所以JVM一共可以包含0x00~0xff 255个指令，目前已经\n    使用200多个（<a href="https://segmentfault.com/a/1190000008722128" rel="nofollow">指令对照表</a>）。</p>\n<ul>\n    <li>0x2a=&gt;aload_0：表示从本地内存的第一个引用类型参数放到栈顶。</li>\n    <li>0xb7=&gt;invokespecial：表示执行一个方法，方法会用栈顶的引用数据作为参数，调用后续2字节数据指定的常量池方法。</li>\n    <li>0x0001=&gt;是invokespecial的参数，表示引用常量池#1位置的方法。查询常量池可知#2指定的是"&lt;init&gt;"构造方法。</li>\n    <li>0xb1=&gt;return，表示从当前方法退出。</li>\n</ul>\n<p><em>~e7~e8</em>：0x0000表示异常列表，0代表"&lt;init&gt;"方法没有任何异常处理。</p>\n<p><em>~e9~e10</em>：0x0001表示"Code"中还包含一个属性。</p>\n<p><em>~eb~ec</em>：0x000a表示属性名称的常量池索引#10="LineNumberTable"。这个属性用于表示字节码与Java源码之间的关系。"LineNumberTable"是一个非必须属性，可以通过javac\n    -g:[none|lines]命令来控制是否输出该属性。</p>\n<p><em>~ed~f0</em>：0x00000006表示"LineNumberTable"属性所占的长度，后续的6个字节即为该属性的内容。"LineNumberTable"属性也有自己的格式，主要分为2部分，首先是开头2个字节表示行号列表的长度。然后4个字节一组，前2字节表示字节码行号，后2字节表示Java源码行号。\n</p>\n<p><em>~f1~f2</em>：0x0001表示"LineNumberTable"的行对应列表只有一行。</p>\n<p><em>~f3~f6</em>：0x0000 0003表示字节码的0行对应Java代码的第3行。</p>\n<p>到这里为止第一个"&lt;init&gt;"方法的内容解析完毕。<em>~ca~f6</em> 都是这个方法相关的信息。</p>\n<p>从&nbsp;<em>~f7</em> 开始是第二个方法：</p>\n<pre><code class="makefile">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n f: 0600 0100 0000 0300 0100 0b00 0c00 0100  \n<span class="code-section">10: 0900 0000 1d00 0100 0100 0000 052a b400  </span>\n<span class="code-section">11: 02ac 0000 0001 000a 0000 0006 0001 0000  </span>\n<span class="code-section">12: 0006 </span></code></pre>\n<p><em>~f7~f8</em>：方法访问标志，0x0001=&gt;PUBLIC。</p>\n<p><em>~f9~fa</em>：方法名称常量池索引，0x000b=&gt;#11=&gt;"get"。</p>\n<p><em>~fb~fc</em>：方法描述符常量池索引，0x000c=&gt;#12=&gt;"()I"，表示一个无参数，返回整数类型的方法。</p>\n<p><em>~fd~fe</em>：0x0001表示方法有一个属性。</p>\n<p><em>~ff~100</em>：表示该属性的命名常量池索引，0x0009=&gt;#9=&gt;"Code"。</p>\n<p><em>~101~104</em>："Code"属性长度，0x00001d=&gt;29字节。</p>\n<p><em>~105~106</em>：最大堆栈数，0x0001=&gt;最大堆栈为1。</p>\n<p><em>~107~109</em>：最大本地缓存的个数，0x0001=&gt;最大数为1。</p>\n<p><em>~10a~10c</em>：指令集长度，0x000005=&gt;一共无个字节的指令。</p>\n<p><em>~10d~111</em>：指令集。0x2a=&gt;aload_0，压入本地内存引用。0xb4=&gt;getfield，使用栈顶的实例数据获取域数据，并将结果压入栈顶。0x0002=&gt;getfield指令的参数，表示引用常量池#2指向的域——<strong><em>private\n    int i</em></strong>。0xac=&gt;ireturen，退出当前方法并返回栈顶的整型数据。</p>\n<p><em>~112~113</em>：异常列表，0x0000表示没有异常列表。</p>\n<p><em>~114~115</em>：属性数，0x0001表示有一个属性。</p>\n<p><em>~116~117</em>：属性名称索引，0x000a=&gt;#10=&gt;"LineNumberTable"。</p>\n<p><em>~118~11b</em>：属性字节长度，0x00000006=&gt;6个字节。</p>\n<p><em>~11c~11d</em>："LineNumberTable"属性的列表长度，0x0001=&gt;一行。</p>\n<p><em>~11e~121</em>：源码对应行号，0x0000 0006，字节码第0行对应Java源码第6行。</p>\n<p>get方法解析完毕，整个方法集合也解析完毕。</p>\n\n<h4 id="h4-9">类属性</h4>\n<p>最后几个字节是类的属性描述。</p>\n<pre><code class="bash">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f \n12: <span class="code-comment">#### 0001 000d 0000 0002 000e 0a</span></code></pre>\n<p><em>~122~123</em>：0x0001表示有一个属性。</p>\n<p><em>~124~125</em>：属性的常量索引，0x000d=&gt;#13=&gt;"SourceFile"。这个属性就是"SourceFIle"。</p>\n<p><em>~126~129</em>：属性的长度，0x00000002=&gt;2个字节。</p>\n<p><em>~12a~12b</em>：属性内容，"SourceFIle"表示指向的源码文件名称，0x000e=&gt;#14=&gt;"SimpleClass.java"。</p>\n\n<h3 id="h3-2">异常列表和异常属性</h3>\n<p><strong>异常列表</strong></p>\n<p>在前面的例子中并没有说明字节码如何解析和处理异常。在Java源码中&nbsp;<strong><em>try-catch-finally</em></strong> 的结构用来处理异常。将前面的例子加上一段异常处理：</p>\n<pre><code class="java"><span class="code-keyword">package</span> example.classLifecicle;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">SimpleClass</span></span>{\n\t<span class="code-keyword">private</span> <span class="code-keyword">int</span> i;\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">int</span> <span\n            class="code-title">get</span><span class="hljs-params">()</span> <span class="code-keyword">throws</span> RuntimeException </span>{\n\t\t<span class="code-keyword">int</span> local = <span class="hljs-number">1</span>;\n\t\t<span class="code-keyword">try</span> {\n\t\t\tlocal = <span class="hljs-number">10</span>;\n\t\t}<span class="code-keyword">catch</span>(Exception e) {\n\t\t\tlocal = <span class="hljs-number">0</span>;\n\t\t}<span class="code-keyword">finally</span> {\n\t\t\ti = local;\n\t\t}\n\t\t<span class="code-keyword">return</span> local;\n\t}\n}</code></pre>\n<p>下面这一段是编译后get方法的字节码片段，从 <em>~1c</em> 开始：</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">1</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### #### 0001 000c  </span>\n <span class="hljs-number">2</span>: <span class="hljs-number">000</span>d <span class="hljs-number">0002</span> <span\n            class="hljs-number">000</span>a\n</code></pre>\n<p><em>~1c~1d：</em>方法的访问权限，0x0001 =&gt; PUBLIC。</p>\n<p><em>~1e~1f</em>：方法的名称常量池索引，0x000c=&gt;#12=&gt;"get"。</p>\n<p><em>~20~21</em>：方法的描述常量池索引，0x00d=&gt;#13=&gt;"()I"。</p>\n<p><em>~22~23</em>：方法的属性集合长度，0x0002表示有2个集合。</p>\n<p><em>~24~25</em>：方法第一个属性的名称，0x000a=&gt;#10=&gt;"Code"。所以这是一个Code属性，按照Code的规范解析。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">2</span>: <span class="code-comment">#### ###</span><span class="code-comment"># 000a 0000 0091 0002 0004 0000  </span>\n <span class="hljs-number">3</span>: <span class="hljs-number">0022</span> <span class="hljs-number">043</span>c <span\n            class="hljs-number">100</span>a <span class="hljs-number">3</span>c2a <span class="hljs-number">1</span>bb5 <span\n            class="hljs-number">0002</span> a700 <span class="hljs-number">164</span>d\n <span class="hljs-number">4</span>: <span class="hljs-number">033</span>c <span\n            class="hljs-number">2</span>a1b b500 <span class="hljs-number">02</span>a7 <span\n            class="hljs-number">000</span>b <span class="hljs-number">4e2</span>a <span class="hljs-number">1</span>bb5 <span\n            class="hljs-number">0002</span>\n <span class="hljs-number">5</span>: <span class="hljs-number">2</span>dbf <span class="hljs-number">1</span>bac \n</code></pre>\n<p><em>~26~29</em>：Code属性占用的字节数，0x00000091=&gt;145字节。</p>\n<p><em>~2a~2b</em>：最大堆栈，2个。</p>\n<p><em>~2c~2d</em>：最大本地变量个数，4个。</p>\n<p><em>~2e~31</em>：指令集占用的字节数：0x00000022=&gt;34。</p>\n<p><em>~32~53</em>：34个字节的指令集。</p>\n<ul>\n    <li><em>~32~34</em> 共2个指令，对应try之前的源码——<em><span style="background-color:#D3D3D3"> int local = 1 </span></em>：</li>\n</ul>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>行号</td>\n        <td>偏移位</td>\n        <td>字节码</td>\n        <td>指令</td>\n        <td>说明</td>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>~32</td>\n        <td>0x04</td>\n        <td>iconst_1</td>\n        <td>栈顶压入整数1</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>~33</td>\n        <td>0x3c</td>\n        <td>istore_1</td>\n        <td>栈顶元素写入本地内存[1]</td>\n    </tr>\n    </tbody>\n</table>\n<ul>\n    <li><em>~34~3e&nbsp;</em>对应try 括号之间的源码：</li>\n</ul>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>行号</td>\n        <td>偏移位</td>\n        <td>字节码</td>\n        <td>指令</td>\n        <td>说明</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>~34</td>\n        <td>0x10</td>\n        <td>bipush</td>\n        <td>栈顶压入1字节整数</td>\n    </tr>\n    <tr>\n        <td>--</td>\n        <td>~35</td>\n        <td>0x0a</td>\n        <td>10</td>\n        <td>bipush指令的参数</td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>~36</td>\n        <td>0x3c</td>\n        <td>istore_1</td>\n        <td>栈顶整数存入本地存储[1]</td>\n    </tr>\n    <tr>\n        <td>5</td>\n        <td>~37</td>\n        <td>0x2a</td>\n        <td>aload_0</td>\n        <td>本地存储[0]的引用压入栈顶</td>\n    </tr>\n    <tr>\n        <td>6</td>\n        <td>~38</td>\n        <td>0x1b</td>\n        <td>iload_1</td>\n        <td>本地存储[1]的整数压入栈顶</td>\n    </tr>\n    <tr>\n        <td>7</td>\n        <td>~39</td>\n        <td>0xb5</td>\n        <td>putfield</td>\n        <td>更新字段数据</td>\n    </tr>\n    <tr>\n        <td>--</td>\n        <td>~3a~3b</td>\n        <td>0x0002</td>\n        <td>#2</td>\n        <td>putfield的参数。(#2,10,this)</td>\n    </tr>\n    <tr>\n        <td>10</td>\n        <td>~3c</td>\n        <td>0xa7</td>\n        <td>goto</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td>&nbsp;</td>\n        <td>~3d~3e</td>\n        <td>0x0016</td>\n        <td>32行</td>\n        <td>goto指令的参数</td>\n    </tr>\n    </tbody>\n</table>\n<ul>\n    <li><em>~3f~48</em> 对应catch括号之间的源码：</li>\n</ul>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>行号</td>\n        <td>偏移位</td>\n        <td>字节码</td>\n        <td>指令</td>\n        <td>说明</td>\n    </tr>\n    <tr>\n        <td>13</td>\n        <td>~3f</td>\n        <td>0x4d</td>\n        <td>astore_2</td>\n        <td>栈顶引用存入本地存储[2]</td>\n    </tr>\n    <tr>\n        <td>14</td>\n        <td>~40</td>\n        <td>0x3c</td>\n        <td>iconst_0</td>\n        <td>整数0压入栈顶</td>\n    </tr>\n    <tr>\n        <td>15</td>\n        <td>~41</td>\n        <td>0x3c</td>\n        <td>istore_1</td>\n        <td>栈顶整数0存入本地存储[1]</td>\n    </tr>\n    <tr>\n        <td>16</td>\n        <td>~42</td>\n        <td>0x2a</td>\n        <td>aload_0</td>\n        <td>本地存储[0]引用压入栈顶</td>\n    </tr>\n    <tr>\n        <td>17</td>\n        <td>~43</td>\n        <td>0x1b</td>\n        <td>iload_1</td>\n        <td>本地存储[1]整数0压入栈顶</td>\n    </tr>\n    <tr>\n        <td>18</td>\n        <td>~44</td>\n        <td>0xb5</td>\n        <td>putfield</td>\n        <td>更新字段数据</td>\n    </tr>\n    <tr>\n        <td>--</td>\n        <td>~45~46</td>\n        <td>0x0002</td>\n        <td>#2</td>\n        <td>putfield的参数。(#2,10,this)</td>\n    </tr>\n    <tr>\n        <td>21</td>\n        <td>~47</td>\n        <td>0xa7</td>\n        <td>goto</td>\n        <td>&nbsp;</td>\n    </tr>\n    <tr>\n        <td>--</td>\n        <td>~48~49</td>\n        <td>0x0016</td>\n        <td>32行</td>\n        <td>goto指令的参数</td>\n    </tr>\n    </tbody>\n</table>\n<ul>\n    <li><em>~4a~51</em> 对应finally括号内的代码：</li>\n</ul>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>行号</td>\n        <td>偏移位</td>\n        <td>字节码</td>\n        <td>指令</td>\n        <td>说明</td>\n    </tr>\n    <tr>\n        <td>24</td>\n        <td>~4a</td>\n        <td>0x4e</td>\n        <td>astore_3</td>\n        <td>栈顶引用存入本地存储[3]</td>\n    </tr>\n    <tr>\n        <td>25</td>\n        <td>~4b</td>\n        <td>0x2a</td>\n        <td>aload_0</td>\n        <td>本地存储[0]引用压入栈顶</td>\n    </tr>\n    <tr>\n        <td>26</td>\n        <td>~4c</td>\n        <td>0x1b</td>\n        <td>iload_1</td>\n        <td>本地存储[1]整数压入栈顶</td>\n    </tr>\n    <tr>\n        <td>27</td>\n        <td>~4d</td>\n        <td>0xb5</td>\n        <td>putfield</td>\n        <td>本地存储[0]引用压入栈顶</td>\n    </tr>\n    <tr>\n        <td>--</td>\n        <td>~4e~4f</td>\n        <td>0x0002</td>\n        <td>#2</td>\n        <td>putfield的参数。(#2,?,this)</td>\n    </tr>\n    <tr>\n        <td>30</td>\n        <td>~50</td>\n        <td>0x2d</td>\n        <td>aload_3</td>\n        <td>本地存储[3]引用压入栈顶</td>\n    </tr>\n    <tr>\n        <td>31</td>\n        <td>~51</td>\n        <td>0xbf</td>\n        <td>athrow</td>\n        <td>跑出栈顶异常</td>\n    </tr>\n    </tbody>\n</table>\n<ul>\n    <li>最后 <em>~52~53</em> 就是&nbsp;<span style="background-color:#D3D3D3">&nbsp;</span><em><span\n            style="background-color:#D3D3D3">return local</span></em><span\n            style="background-color:#D3D3D3">&nbsp; </span>：\n    </li>\n</ul>\n<table border="1" cellpadding="1" cellspacing="1" style="width:600px">\n    <tbody>\n    <tr>\n        <td>行号</td>\n        <td>偏移位</td>\n        <td>字节码</td>\n        <td>指令</td>\n        <td>说明</td>\n    </tr>\n    <tr>\n        <td>32</td>\n        <td>~52</td>\n        <td>0x1b</td>\n        <td>iload_1</td>\n        <td>本地存储[1]整数压入栈顶</td>\n    </tr>\n    <tr>\n        <td>33</td>\n        <td>~53</td>\n        <td>0xac</td>\n        <td>ireturn</td>\n        <td>返回栈顶的整数</td>\n    </tr>\n    </tbody>\n</table>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">5</span>: <span class="code-comment">#### ###</span><span class="code-comment"># 0003 0002 0005 000d 0003 0002  </span>\n <span class="hljs-number">6</span>: <span class="hljs-number">0005</span> <span class="hljs-number">0018</span> <span\n            class="hljs-number">0000</span> <span class="hljs-number">000</span>d <span class="hljs-number">0010</span> <span\n            class="hljs-number">0018</span> <span class="hljs-number">0000</span>\n</code></pre>\n<p>按照前面对Code属性的介绍，<em>~54~55</em> 表示异常列表，这里的值为0x0003，表示异常列表有3行。异常列表的属性结构如下：</p>\n<pre><code class="javascript">{\n   <span class="hljs-attr">length</span>:<span class="hljs-number">3</span>,<span\n            class="code-comment">// 2byte表示异常列表个数</span>\n   info:[\n     {\n       <span class="hljs-attr">start_pc</span>: <span class="hljs-number">2</span> <span class="code-comment">// 拦截异常开始的行号，2byte</span>\n       end_pc: <span class="hljs-number">5</span> <span class="code-comment">// 拦截异常结束的行号，2byte</span>\n       handler_pc: <span class="hljs-number">13</span> <span class="code-comment">// 异常处理的行号，2byte</span>\n       catch_type: <span class="hljs-number">3</span> <span class="code-comment">//异常类型，指向常量池的索引，2byte</span>\n     }\n   ]\n}</code></pre>\n<p><em>~56~6d</em> 都是记录异常列表的结构。<br> <em>~56~57</em>：拦截异常开始的位置，0x0002=&gt;第2行。</p>\n<p><em>~58~59</em>：拦截异常结束的位置，0x0005=&gt;第5行。</p>\n<p><em>~5a~5b</em>：异常处理的位置，0x000d=&gt;13行。</p>\n<p><em>~5c~5d</em>：异常类型的常量池索引，0x0003=&gt;#3=&gt;"java/lang/Exception"。</p>\n<p>对应异常列表结构将&nbsp;<em>~56~6d 部分的字节流</em> 还原成一个表：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\n    <tbody>\n    <tr>\n        <td>start_pc</td>\n        <td>end_pc</td>\n        <td>handler_pc</td>\n        <td>catch_type</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>5</td>\n        <td>13</td>\n        <td>"java/lang/Exception"</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>5</td>\n        <td>24</td>\n        <td>所有异常</td>\n    </tr>\n    <tr>\n        <td>13</td>\n        <td>16</td>\n        <td>24</td>\n        <td>所有异常</td>\n    </tr>\n    </tbody>\n</table>\n<p>对照前面的指令集，这个表结构就是告诉JVM：</p>\n<ol>\n    <li>如果在字节码2到5行遇到"java/lang/Exception"异常，跳转到13行继续执行。等价于try跳转到catch中。</li>\n    <li>如果在字节码2到5行遇到异常（排除"java/lang/Exception"及其父类的异常），跳转到24行继续执行。等价于遇到Exception之外的异常，直接跳转到finally块去处理。</li>\n    <li>如果在字节码13到16行遇到任何异常，跳转到24行执行。等价于在catch块中遇到异常，跳转到finally块继续执行。</li>\n</ol>\n<p>Code属性结合异常列表就完成对所有执行中遇到异常的处理。</p>\n<p>异常列表属性之后 <em>~6e~c0</em> 是LineNumberTable和StackMapTable属性。</p>\n<pre><code class="coffeescript">     <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span\n        class="hljs-number">2</span> <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span\n        class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">7</span>  <span\n        class="hljs-number">8</span> <span class="hljs-number">9</span>  a b  c d  e f\n <span class="hljs-number">6</span>: <span class="code-comment">#### ###</span><span class="code-comment"># #### #### #### #### #### 0002  </span>\n <span class="hljs-number">7</span>: <span class="hljs-number">000</span>b <span class="hljs-number">0000</span> <span\n            class="hljs-number">002</span>a <span class="hljs-number">000</span>a <span class="hljs-number">0000</span> <span\n            class="hljs-number">0005</span> <span class="hljs-number">0002</span> <span class="hljs-number">0007</span>\n <span class="hljs-number">8</span>: <span class="hljs-number">0005</span> <span class="hljs-number">000</span>b <span\n            class="hljs-number">000</span>a <span class="hljs-number">000</span>c <span class="hljs-number">000</span>d <span\n            class="hljs-number">0008</span> <span class="hljs-number">000</span>e <span class="hljs-number">0009</span>\n <span class="hljs-number">9</span>: <span class="hljs-number">0010</span> <span class="hljs-number">000</span>b <span\n            class="hljs-number">0015</span> <span class="hljs-number">000</span>c <span class="hljs-number">0018</span> <span\n            class="hljs-number">000</span>b <span class="hljs-number">0020</span> <span class="hljs-number">000</span>d\n a: <span class="hljs-number">000</span>e <span class="hljs-number">0000</span> <span\n            class="hljs-number">0015</span> <span class="hljs-number">0003</span> ff00 <span\n            class="hljs-number">0</span>d00 <span class="hljs-number">0207</span> <span class="hljs-number">000</span>f\n b: <span class="hljs-number">0100</span> <span class="hljs-number">0107</span> <span\n            class="hljs-number">0010</span> <span class="hljs-number">4</span>a07 <span class="hljs-number">0011</span> <span\n            class="hljs-number">0700</span> <span class="hljs-number">1200</span> <span class="hljs-number">0000</span>\n c: <span class="hljs-number">04</span>\n</code></pre>\n<p><strong>异常属性</strong></p>\n<p>get方法除了Code属性外，还有一个Exception属性。他的作用是列举出该方法抛出的可查异常，即方法体throws关键字后面声明的异常。其结构为：</p>\n<pre><code class="javascript">{\n  <span class="hljs-attr">exceptionNumber</span>:<span class="hljs-number">1</span>, <span class="code-comment">//抛出异常的个数 2byte</span>\n  exceptionTable[<span class="hljs-number">16</span>] <span\n            class="code-comment">//抛出异常的列表，每一个值指向常量池的Class类型,每个元素2byte</span>\n}</code></pre>\n<p>字节码 <em>~c1~c4</em> 就是异常属性：</p>\n<pre><code class="bash">     0 1  2 3  4 5  6 7  8 9  a b  c d  e f\n c: <span class="code-comment">##00 0100 13</span>\n</code></pre>\n<p><em>~c1~c2</em>：0x0001表示该方法抛出一个异常。</p>\n<p><em>~c3~c4</em>：0x0013表示抛出的异常类型指向常量池#19位置的 <em><strong>Class</strong></em> ，即"java/lang/RuntimeException"。</p>\n<p>到此，2进制流的异常处理介绍完毕。</p>\n\n<h3 id="h3-3">总结</h3>\n<p>\n    Jvm识别字节码的过程到此介绍完毕，按照这个识别过程可以理解JVM是怎么一步一步解析字节码的。有机会的话可以跳出Java语言在JVM的基础上倒腾自己的语言，Scala、Groovy、Kotlin也正是这样做的。在JSR-292之后，JVM就完全脱离Java成为了一个更加独立且更加生机勃勃的规范体系。</p>\n<p>能够理解字节码和JVM的识别过程还可以帮助我们更深层次优化代码。无论Java代码写得再漂亮也要转换成字节码去运行。从字节码层面去看运行的方式，要比从Java源码层面更为透彻。</p>\n<p>理解字节码还有一个好处，更容易理解多线程的3个主要特性：原子性、可见性和有序性。比如<strong><em>new Object()</em></strong>&nbsp;从字节码层面一看就知道不具备原子性，指令重排的问题在字节码层面也是一目了然。\n</p>\n<h3 id="h3-4">附录</h3>\n<h4 id="h4-10">常量池类型</h4>\n<table style="width:600px">\n    <tbody>\n    <tr>\n        <td>常量表类型</td>\n        <td>标志</td>\n        <td>描述</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Utf8</td>\n        <td>1</td>\n        <td>UTF-8编码的<a href="https://baike.baidu.com/item/Unicode" target="_blank" rel="nofollow">Unicode</a>字符串</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Integer</td>\n        <td>3</td>\n        <td>int类型的字面值</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Float</td>\n        <td>4</td>\n        <td>float类型的字面值</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Long</td>\n        <td>5</td>\n        <td>long类型的字面值</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Double</td>\n        <td>6</td>\n        <td>double类型的字面值</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Class</td>\n        <td>7</td>\n        <td>对一个类或接口的符号引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_String</td>\n        <td>8</td>\n        <td>String类型字面值的引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Fieldref</td>\n        <td>9</td>\n        <td>对一个字段的符号引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_Methodref</td>\n        <td>10</td>\n        <td>对一个类中方法的符号引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_InterfaceMethodref</td>\n        <td>11</td>\n        <td>对一个接口中方法的符号引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_NameAndType</td>\n        <td>12</td>\n        <td>对一个字段或方法的部分符号引用</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_MethodHandle</td>\n        <td>15</td>\n        <td>表示方法的句柄</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_MethodType</td>\n        <td>16</td>\n        <td>标识方法的类型</td>\n    </tr>\n    <tr>\n        <td>CONSTANT_InvokeDynamic</td>\n        <td>18</td>\n        <td>标识一个动态方法调用点</td>\n    </tr>\n    </tbody>\n</table>\n\n<h4 id="h4-11">格式化的字节码信息附录</h4>\n<pre><code class="apache"><span class="code-attribute">Classfile</span> /work/myRepository/MetaSpaceOutError/src/main/java/example/classLifecicle/SimpleClass.class\n  <span class="code-attribute">Last</span> modified Dec 4, 2017; size 300 bytes\n  <span class="code-attribute">MD5</span> checksum c78b7fb8709a924751d31028768a430d\n  <span class="code-attribute">Compiled</span> from <span class="code-string">"SimpleClass.java"</span>\n<span class="code-attribute">public</span> class example.classLifecicle.SimpleClass\n  <span class="code-attribute">minor</span> version: 0\n  <span class="code-attribute">major</span> version: 52\n  <span class="code-attribute">flags</span>: ACC_PUBLIC, ACC_SUPER\n<span class="code-attribute">Constant</span> pool:\n   <span class="code-comment">#1 = Methodref          #4.#15         // java/lang/Object."&lt;init&gt;":()V</span>\n   <span class="code-comment">#2 = Fieldref           #3.#16         // example/classLifecicle/SimpleClass.i:I</span>\n   <span class="code-comment">#3 = Class              #17            // example/classLifecicle/SimpleClass</span>\n   <span class="code-comment">#4 = Class              #18            // java/lang/Object</span>\n   <span class="code-comment">#5 = Utf8               i</span>\n   <span class="code-comment">#6 = Utf8               I</span>\n   <span class="code-comment">#7 = Utf8               &lt;init&gt;</span>\n   <span class="code-comment">#8 = Utf8               ()V</span>\n   <span class="code-comment">#9 = Utf8               Code</span>\n  <span class="code-comment">#10 = Utf8               LineNumberTable</span>\n  <span class="code-comment">#11 = Utf8               get</span>\n  <span class="code-comment">#12 = Utf8               ()I</span>\n  <span class="code-comment">#13 = Utf8               SourceFile</span>\n  <span class="code-comment">#14 = Utf8               SimpleClass.java</span>\n  <span class="code-comment">#15 = NameAndType        #7:#8          // "&lt;init&gt;":()V</span>\n  <span class="code-comment">#16 = NameAndType        #5:#6          // i:I</span>\n  <span class="code-comment">#17 = Utf8               example/classLifecicle/SimpleClass</span>\n  <span class="code-comment">#18 = Utf8               java/lang/Object</span>\n{\n  <span class="code-attribute">public</span> example.classLifecicle.SimpleClass();\n    <span class="code-attribute">descriptor</span>: ()V\n    <span class="code-attribute">flags</span>: ACC_PUBLIC\n    <span class="code-attribute">Code</span>:\n      <span class="code-attribute">stack</span>=1, locals=1, args_size=1\n         <span class="code-attribute">0</span>: aload_0\n         <span class="code-attribute">1</span>: invokespecial #1                  // Method java/lang/Object.<span\n            class="code-string">"&lt;init&gt;"</span>:()V\n         <span class="code-attribute">4</span>: return\n      <span class="code-attribute">LineNumberTable</span>:\n        <span class="code-attribute">line</span> 3: 0\n\n  <span class="code-attribute">public</span> int get();\n    <span class="code-attribute">descriptor</span>: ()I\n    <span class="code-attribute">flags</span>: ACC_PUBLIC\n    <span class="code-attribute">Code</span>:\n      <span class="code-attribute">stack</span>=1, locals=1, args_size=1\n         <span class="code-attribute">0</span>: aload_0\n         <span class="code-attribute">1</span>: getfield      #2                  // Field i:I\n         <span class="code-attribute">4</span>: ireturn\n      <span class="code-attribute">LineNumberTable</span>:\n        <span class="code-attribute">line</span> 6: 0\n}\n<span class="code-attribute">SourceFile</span>: <span class="code-string">"SimpleClass.java"</span></code></pre>'}};