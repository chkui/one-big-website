exports.ids=[76],exports.modules={317:function(a,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">Maven生命周期阶段</h2>\n<p>Maven为打包过程提供了各种各样的生命周期功能，主要有：</p>\n<ol>\n    <li>Validate：验证，对工程的所有内容进行验证。</li>\n    <li>compile：编译。</li>\n    <li>test：运行测试用例。</li>\n    <li>package：将代码进行打包并生成到本地。</li>\n    <li>integration-test：与其他的工程进行集成测试，会将依赖内容放置到一个统一环境中。</li>\n    <li>verify：校验功能，检查包的质量。</li>\n    <li>install：将打包之后的文件放置到本地仓库。</li>\n    <li>deploy：将已经打包的文件放置到远程仓库。</li>\n    <li>clean：清除之前构建的内容。</li>\n    <li>site：针对当前的工程生成一个可视化的站点文档。</li>\n</ol>\n<h2 id="h2-2">常用命令</h2>\n<p>对应以上生命周期都有一个对应的命令。</p>\n<ol>\n    <li><code>mvn compile</code>，编译代码，编译之后代码会出现在/target目录中，整合了IDE会自动执行这个步骤。</li>\n    <li><code>mvn test</code>，运行单元测试。</li>\n    <li><code>mvn test-compile</code>, 编译测试用用欧，并执行。如果在IDE中通过IDE会自定对单元测试代码打包。</li>\n    <li><code>mvn package</code>，对项目进行打包，打包之后会出现在/targer目录下。</li>\n    <li><code>mvn install</code>，安装包，会将打包之后的包安装到本地仓库对应的位置。</li>\n    <li><code>mvn deploy</code>，将包发布到远程仓库。</li>\n</ol>\n<p>maven打包基本上就涉及以上命令，除此之外还有一些配套的命令：</p>\n<ol>\n    <li><code>mvn site</code>，输出到/target一个依赖视图文档。</li>\n    <li>``</li>\n</ol>\n<h2 id="h2-3">Xml文件元素定义</h2>\n<ol>\n    <li>project：整个XML文档的最顶层标签。</li>\n    <li>modelVersion：使用的maven模型版本<code>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</code></li>\n    <li>groupId：组织Id。<code>&lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;</code></li>\n    <li>artifactId：标识符号id。<code>&lt;artifactId&gt;my-app&lt;/artifactId&gt;</code></li>\n    <li>packaging：打包模式， 例如JAR, WAR, EAR。<code>&lt;packaging&gt;jar&lt;/packaging&gt;</code></li>\n    <li>version：当前的版本号。<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code></li>\n    <li>name：项目名称。<code>&lt;name&gt;Maven Quick Start Archetype&lt;/name&gt;</code></li>\n    <li>url：项目地址。<code>&lt;url&gt;http://maven.apache.org&lt;/url&gt;</code></li>\n    <li>description: 项目介绍。</li>\n</ol>\n<h2 id="h2-4">测试用例运行规则</h2>\n<p>测试用例在运行的时候装载和排除一下格式的文件。\n    包含：</p>\n<ol>\n    <li><code>**/*Test.java</code></li>\n    <li><code>**/Test*.java</code></li>\n    <li><code>**/*TestCase.java</code></li>\n</ol>\n<p>排除：</p>\n<ol>\n    <li><code>**/Abstract*Test.java</code></li>\n    <li><code>**/Abstract*TestCase.java</code></li>\n</ol>\n<h2 id="h2-5">SNAPSHOT（快照版本）</h2>\n<p>当版本号使用<code>-SNAPSHOT</code>结构的后缀时表示这是一个快照版本。快照版本一般用于开发分支，快照版本即使不改变版本号也会自动获取到最新版本。以只相对的是发布（<code>Release</code>）版本，只要不使用<code>-SNAPSHOT</code>结尾的都是发布版本。每一个发布版本只对应一个编号。\n</p>\n<h2 id="h2-6">插件使用</h2>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">build</span>&gt;</span>\n  <span class="code-tag">&lt;<span class="code-name">plugins</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">plugin</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">groupId</span>&gt;</span>org.apache.maven.plugins<span\n            class="code-tag">&lt;/<span class="code-name">groupId</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">artifactId</span>&gt;</span>maven-compiler-plugin<span\n            class="code-tag">&lt;/<span class="code-name">artifactId</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">version</span>&gt;</span>3.3<span class="code-tag">&lt;/<span\n            class="code-name">version</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">configuration</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">source</span>&gt;</span>1.5<span class="code-tag">&lt;/<span\n            class="code-name">source</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">target</span>&gt;</span>1.5<span class="code-tag">&lt;/<span\n            class="code-name">target</span>&gt;</span>\n      <span class="code-tag">&lt;/<span class="code-name">configuration</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">plugin</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">plugins</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">build</span>&gt;</span>\n</code></pre>\n<p>\n    上面是在<code>build</code>过程中使用插件的一个配置。插件的使用方式和依赖比较类似，也是2级菜单引入一个插件，插件也是要标记<code>groupId</code>、<code>artifactId</code>以及<code>version</code>等内容。<code>configuration</code>标签用于向插件传递参数（插件就好像一个方法执行一个任务，某些方法需要我们提供参数才能正常运行）。\n</p>\n<p>这个配置会在build阶段被运行（package，install，deploy）。</p>\n<p>插件可以在maven执行的各个生命周期被使用。（<a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html"\n                              title="maven生命周期">maven生命周期</a>）插件的类型繁多，除了直接通过<code>&lt;plugin&gt;</code>引入，实际上maven的各种标签功能也是通过插件实现的，需要知道使用某个插件可以查看官方提供的<a\n        href="http://maven.apache.org/plugins/" title="插件清单">插件清单</a>。</p>\n<p>##　资源文件管理</p>\n<p>一个Java程序肯定会涉及到各种各样的配置文件，在maven的结构下通常我们会将资源文件放置到<code>${root}/src/main/resources</code>目录下。如下面结构的<code>application.properties</code>。\n</p>\n<pre><code class="sql">my-app\n|<span class="code-comment">-- pom.xml</span>\n`<span class="code-comment">-- src</span>\n    |<span class="code-comment">-- main</span>\n    |   |<span class="code-comment">-- java</span>\n    |   |   `<span class="code-comment">-- com</span>\n    |   |       `<span class="code-comment">-- mycompany</span>\n    |   |           `<span class="code-comment">-- app</span>\n    |   |               `<span class="code-comment">-- App.java</span>\n    |   `<span class="code-comment">-- resources</span>\n    |       `<span class="code-comment">-- META-INF</span>\n    |           `<span class="code-comment">-- application.properties</span>\n    `<span class="code-comment">-- test</span>\n        `<span class="code-comment">-- java</span>\n            `<span class="code-comment">-- com</span>\n                `<span class="code-comment">-- mycompany</span>\n                    `<span class="code-comment">-- app</span>\n                        `<span class="code-comment">-- AppTest.java</span>\n</code></pre>\n<p>例如上面这个文件格式，</p>\n<p>对于maven项目而言，classpath的根路径是从java开始的，与之对应的，<code>/resources</code>路径也是一个classpath的root，编译或者打包后，会将<code>resource</code>中的文件合并到一个classpath中。如下图的是根据上面的结构打包成JAR之后的文件格式。\n</p>\n<pre><code class="sql">|<span class="code-comment">-- META-INF</span>\n|   |<span class="code-comment">-- MANIFEST.MF</span>\n|   |<span class="code-comment">-- application.properties</span>\n|   `<span class="code-comment">-- maven</span>\n|       `<span class="code-comment">-- com.mycompany.app</span>\n|           `<span class="code-comment">-- my-app</span>\n|               |<span class="code-comment">-- pom.properties</span>\n|               `<span class="code-comment">-- pom.xml</span>\n`<span class="code-comment">-- com</span>\n    `<span class="code-comment">-- mycompany</span>\n        `<span class="code-comment">-- app</span>\n            `<span class="code-comment">-- App.class</span>\n</code></pre>\n<p>META-INF用于存放程序入口的相关信息，可以将他理解为classpath的一个root，所以在其中的各种配置文件也可以直接在classpath中获取，除此之外还存在<code>MANIFEST.MF</code>、<code>pom.properties</code>、<code>pom.xml</code>等几个文件。这些问价那都是maven在<code>package</code>时生成的标准文件，<code>MANIFEST.MF</code>告知了程序的入口，另外两个文件标记了maven的依赖关系。\n</p>\n<p>对应的，也可以在test目录下建立一个<code>resources</code>目录，在执行单元测试的时候，它会被加入到单元测试时的classpath中。</p>\n<h2 id="h2-7">资源文件参数化</h2>\n<p>通常情况下，发布生产和发布测试某些参数肯定是不一样的（比如数据库链接参数），所以某些时候需要资源文件中的参数根据打包命令进行变更。这个使用会用到<code>&lt;resources&gt;</code>标签（插件）。</p>\n<p>替换参数的过程并不复杂，首先是如下图引入<code>&lt;resources&gt;</code>标签。</p>\n<pre><code class="xml">  <span class="code-tag">&lt;<span class="code-name">build</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">resources</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">resource</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">directory</span>&gt;</span>src/main/resources<span\n            class="code-tag">&lt;/<span class="code-name">directory</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">filtering</span>&gt;</span>true<span\n            class="code-tag">&lt;/<span class="code-name">filtering</span>&gt;</span>\n      <span class="code-tag">&lt;/<span class="code-name">resource</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">resources</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">build</span>&gt;</span>\n</code></pre>\n<p>然后用<code>&lt;directory&gt;</code>表示要进行参数替换的路径位置，这里将会把<code>resource</code>目录中的内容全部替换。</p>\n<p>对应的，在配置文件中使用占位符表示要替换的内容：</p>\n<p>properties：</p>\n<pre><code class="apache"><span class="code-attribute">application</span>.name=<span class="code-variable">${project.name}</span>\n<span class="code-attribute">application</span>.version=<span class="code-variable">${project.version}</span>\n</code></pre>\n<p>yaml：</p>\n<pre><code class="yaml coffeescript">application:\n\tname: @project.name@\n\tversion: @project.version@\n</code></pre>\n<p>配置好之后可以通过<code>mvn process-resources</code>命令来检查文件替换的效果。执行后可以到/target/classses看到替换效果。除了使用<em>project.version</em>之类的固定参数，还可以使用<code>&lt;properties&gt;</code>在<strong>pom.xml</strong>文件中定义全局参数：\n</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">properties</span>&gt;</span>\n\t<span class="code-tag">&lt;<span class="code-name">my.value</span>&gt;</span>hello<span class="code-tag">&lt;/<span\n            class="code-name">my.value</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">properties</span>&gt;</span>\n</code></pre>\n<p>最后，maven还支持系统参数和Java运行时参数，比如：</p>\n<pre><code class="apache"><span class="code-attribute">java</span>.version=<span\n        class="code-variable">${java.version}</span>\n<span class="code-attribute">command</span>.line.prop=<span class="code-variable">${command.line.prop}</span>\n</code></pre>\n<p><code>${java.version}</code>可以获取到操作系统中Java的版本参数。maven本身是一个Java程序，所以<code>mvn process-resources\n    "-Dcommand.line.prop=hello again"</code>命令在启动jvm同时，还传入了<code>command.line.prop</code>的数据。</p>\n<h2 id="h2-8">依赖管理</h2>\n<p><code>&lt;dependencies&gt;</code>和<code>&lt;dependency&gt;</code>组合表示引入依赖。一项依赖通过<code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>、<code>&lt;version&gt;</code>引入。<code>&lt;scope&gt;</code>用于确定依赖包的使用范围，与maven的运行生命周期相对应。更多的标签说明参见\n    <a href="http://maven.apache.org/ref/3.6.1/maven-model/maven.html" title="官网Project Descriptor Reference">官网Project\n        Descriptor Reference</a>。</p>\n<h3 id="h3-1">依赖范围</h3>\n<ol>\n    <li>compile：这是默认的范围，引入的包会在mvn的整个生命周期内被用到。</li>\n    <li>provided：在编译和测试的时候都会引入该包，但是到了打包（<code>install</code>）之后的阶段将不会依赖这个包。主要应用场景是使用tomcat之类的容器，在开发和单元测试的时候并不会引入容器，但是需要引用某些包（比如Servlet）完成编译。但是打包放入容器后某些包容器已经提供了，不需要我们带入到classpath中。\n    </li>\n    <li>runtime：除了编译（<code>compile</code>）阶段，其他阶段都会被引入。</li>\n    <li>test：仅用于测试。</li>\n    <li>system：本地操作系统依赖，不会去仓库下载jar包，根据配置的路径（包括网络路径）查找包。</li>\n    <li>import：导入其他pom文件，该标签仅仅能适用于<code>&lt;dependencyManagement&gt;</code>依赖管理标签中。<a\n            href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html。"\n            title="参考这篇文章的说明">参考说明</a>。\n    </li>\n</ol>\n<p>关于maven的依赖机制见<a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html"\n                   title="官网关于依赖的说明">官网关于依赖的说明</a>。</p>\n<h3 id="h3-2">包引入过程</h3>\n<p>对于maven而言，一个包最终被引入到项目中有很多层级。首先每个人的操作系统上都有一个本地仓库。在本地执行<code>mvn install</code>命令时都会将对应的包安装到这个仓库中。当其他工程需要这个包时候，maven也是直接到本地仓库获取。\n</p>\n<p>除了自己<code>install</code>的包，更多的时候都是使用第三发提供的包。需要用到某个包时都是先去本地仓路获取，如果不存在maven会到远程仓库去获取。</p>\n<h3 id="h3-3">仓库说明</h3>\n<p>前面已经提及maven的包加载过程涉及到2个仓路：本地仓库（默认位置：<code>${user.home}/.m2/repository</code>）和远程仓库（默认位置：repo.maven.apache.org/maven2/）。\n</p>\n<p>本地仓路可以通过修改<code>${Maven_HOme}/conf/setting.xml</code>的<code>&lt;localRepository&gt;</code>设定，远程仓库通过<code>&lt;mirrors&gt;</code>标签指定。详情见：<a\n        href="http://maven.apache.org/guides/introduction/introduction-to-repositories.html" title="远程仓库介绍">仓库介绍</a>、<a\n        href="http://maven.apache.org/guides/mini/guide-mirror-settings.html"\n        title="远程仓库Mirrors配置说明">远程仓库Mirrors配置说明</a>、<a href="http://maven.apache.org/repository/index.html"\n                                                       title="中央仓库结构">中央仓库结构</a>。</p>\n<h2 id="h2-9">发布到远程仓库</h2>\n<p>发布到远程仓库需要对本地pom.xml以及本机的setting.xml进行配置。\n    pom.xml文件增加：</p>\n<pre><code class="xml">  <span class="code-tag">&lt;<span class="code-name">distributionManagement</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">repository</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">id</span>&gt;</span>mycompany-repository<span class="code-tag">&lt;/<span\n            class="code-name">id</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">name</span>&gt;</span>MyCompany Repository<span\n            class="code-tag">&lt;/<span class="code-name">name</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">url</span>&gt;</span>scp://repository.mycompany.com/repository/maven2<span\n            class="code-tag">&lt;/<span class="code-name">url</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">repository</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">distributionManagement</span>&gt;</span>\n</code></pre>\n<p>setting.xml配置：</p>\n<pre><code class="xml"> <span class="code-tag">&lt;<span class="code-name">servers</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">server</span>&gt;</span>\n      <span class="code-comment">&lt;!-- 使用账号密码登录 --&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">id</span>&gt;</span>mycompany-repository<span class="code-tag">&lt;/<span\n            class="code-name">id</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">username</span>&gt;</span>jvanzyl<span\n            class="code-tag">&lt;/<span class="code-name">username</span>&gt;</span>\n      <span class="code-comment">&lt;!-- 使用ssh登录 --&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">privateKey</span>&gt;</span>/path/to/identity<span\n            class="code-tag">&lt;/<span class="code-name">privateKey</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">passphrase</span>&gt;</span>my_key_passphrase<span\n            class="code-tag">&lt;/<span class="code-name">passphrase</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">server</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">servers</span>&gt;</span>\n</code></pre>\n<p>远程服务器的权限有各种各样的规则——<a href="http://maven.apache.org/guides/mini/guide-encryption.html" title="参考文件">参考文件</a>。</p>\n<p>参考资料：<a href="http://maven.apache.org/guides/getting-started/index.html" title="官网介绍">官网介绍</a>。</p>'}};