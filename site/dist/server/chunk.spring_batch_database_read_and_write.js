exports.ids=[25],exports.modules={372:function(e,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});s.content='<p>前序文章陆续介绍了<a href="https://www.chkui.com/article/spring/spring_batch_introduction">批处理的基本概念</a>，<a\n        href="https://www.chkui.com/article/spring/spring_batch_job">Job使用</a>、<a\n        href="https://www.chkui.com/article/spring/spring_batch_step">Step控制</a>、<a\n        href="https://www.chkui.com/article/spring/spring_batch_item_and_code_case">Item的结构</a>以及<a\n        href="https://www.chkui.com/article/spring/spring_batch_flat_file_read_and_write">扁平文件的读写</a>。本文将接着前面的内容说明数据库如何进行批处理读写。\n</p>\n<h2 id="h2-1">数据读取</h2>\n<p>数据库是绝大部分系统要用到的数据存储工具，因此针对数据库执行批量数据处理任务也是很常见的需求。数据的批量处理与常规业务开发不同，如果一次性读取百万条，对于任何系统而言肯定都是不可取的。为了解决这个问题Spring\n    Batch提供了2套数据读取方案：</p>\n<ul>\n    <li>基于游标读取数据</li>\n    <li>基于分页读取数据</li>\n</ul>\n<h2 id="h2-2">游标读取数据</h2>\n<p>对于有经验大数据工程师而言数据库游标的操作应该是非常熟悉的，因为这是从数据库读取<em>数据流</em>标准方法，而且在Java中也封装了<code>ResultSet</code>这种面向游标操作的数据结构。</p>\n<p><code>ResultSet</code>一直都会指向<em>结果集</em>中的某一行数据，使用<code>next</code>方法可以让游标跳转到下一行数据。Spring Batch同样使用这个特性来控制数据的读取：</p>\n<ol>\n    <li>在初始化时打开游标。</li>\n    <li>每一次调用<code>ItemReader::read</code>方法就从<code>ResultSet</code>获取一行数据并执行<code>next</code>。</li>\n    <li>返回可用于数据处理的映射结构（map、dict）。</li>\n</ol>\n<p>\n    在一切都执行完毕之后，框架会使用回调过程调用<code>ResultSet::close</code>来关闭游标。由于所有的业务过程都绑定在一个事物之上，所以知道到<code>Step</code>执行完毕或异常退出调用执行<code>close</code>。下图展示了数据读取的过程：\n</p>\n<p><img src="https://docs.spring.io/spring-batch/4.2.x/reference/html/images/cursorExample.png"\n        alt="Spring Batch(6)——数据库批数据读写 " class="zoom-in-cursor"></p>\n<p>SQL语句的查询结果称为<em>数据集</em>（对于大部分数据库而言，其SQL执行结果会产生临时的表空间索引来存放数据集）。游标开始会停滞在ID=2的位置，一次<code>ItemReader</code>执行完毕后会产生对应的实体<code>FOO2</code>，然后游标下移直到最后的ID=6。最后关闭游标。\n</p>\n<h3 id="h3-1">JdbcCursorItemReader</h3>\n<p><code>JdbcCursorItemReader</code>是使用游标读取数据集的<code>ItemReader</code>实现类之一。它使用<code>JdbcTemplate</code>中的<code>DataSource</code>控制<code>ResultSet</code>,其过程是将<code>ResultSet</code>的每行数据转换为所需要的实体类。\n</p>\n<p><code>JdbcCursorItemReader</code>的执行过程有三步：</p>\n<ol>\n    <li>通过<code>DataSource</code>创建<code>JdbcTemplate</code>。</li>\n    <li>设定数据集的SQL语句。</li>\n    <li>创建<code>ResultSet</code>到实体类的映射。\n        大致如下：\n    </li>\n</ol>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\nJdbcCursorItemReader itemReader = <span class="code-keyword">new</span> JdbcCursorItemReader();\nitemReader.setDataSource(dataSource);\nitemReader.setSql(<span class="code-string">"SELECT ID, NAME, CREDIT from CUSTOMER"</span>);\nitemReader.setRowMapper(<span class="code-keyword">new</span> CustomerCreditRowMapper());\n</code></pre>\n<p>除了上面的代码，<code>JdbcCursorItemReader</code>还有其他属性：</p>\n<table>\n    <thead>\n    <tr>\n        <th>属性名称</th>\n        <th>说明</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>ignoreWarnings</td>\n        <td>标记当执行SQL语句出现警告时，是输出日志还是抛出异常，默认为true——输出日志</td>\n    </tr>\n    <tr>\n        <td>fetchSize</td>\n        <td>预通知JDBC驱动全量数据的个数</td>\n    </tr>\n    <tr>\n        <td>maxRows</td>\n        <td>设置ResultSet从数据库中一次读取记录的上限</td>\n    </tr>\n    <tr>\n        <td>queryTimeout</td>\n        <td>设置执行SQL语句的等待超时时间，单位秒。当超过这个时间会抛出<em>DataAccessException</em></td>\n    </tr>\n    <tr>\n        <td>verifyCursorPosition</td>\n        <td>\n            对游标位置进行校验。由于在<em>RowMapper::mapRow</em>方法中<em>ResultSet</em>是直接暴露给使用者的，因此有可能在业务代码层面调用了<em>ResultSet::next</em>方法。将这个属性设置为<em>true</em>,在框架中会有一个位置计数器与ResultSet保持一致，当执行完<em>Reader</em>后位置不一致会抛出异常。\n        </td>\n    </tr>\n    <tr>\n        <td>saveState</td>\n        <td>标记读取的状态是否被存放到<em>ExecutionContext</em>中。默认为<em>true</em></td>\n    </tr>\n    <tr>\n        <td>driverSupportsAbsolute</td>\n        <td>告诉框架是指直接使用<em>ResultSet::absolute</em>方法来指定游标位置，使用这个属性需要数据库驱动支持。建议在支持absolute特性的数据库上开启这个特性，能够明显的提升性能。默认为<em>false</em>\n        </td>\n    </tr>\n    <tr>\n        <td>setUseSharedExtendedConnection</td>\n        <td>\n            标记读取数据的游标是否与<em>Step</em>其他过程绑定成同一个事物。默认为<em>false</em>,表示读取数据的游标是单独建立连接的，具有自身独立的事物。如果设定为<em>true</em>需要用<em>ExtendedConnectionDataSourceProxy</em>包装<em>DataSource</em>用于管理事物过程。此时游标的创建标记为\'READ_ONLY\'、\'HOLD_CURSORS_OVER_COMMIT\'。需要注意的是该属性需要数据库支持3.0以上的JDBC驱动。\n        </td>\n    </tr>\n    </tbody>\n</table>\n<h4 id="h4-1">可执行源码</h4>\n<p>源码在下列地址的<em>items</em>子项目：</p>\n<ul>\n    <li>Gitee：<a\n            href="https://gitee.com/chkui-com/spring-batch-sample">https://gitee.com/chkui-com/spring-batch-sample</a>\n    </li>\n    <li>Github：<a href="https://github.com/chkui/spring-batch-sample">https://github.com/chkui/spring-batch-sample</a>\n    </li>\n</ul>\n<p>执行<code>JdbcCursorItemReader</code>的代码在<code>org.chenkui.spring.batch.sample.items.JdbcReader</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.cursor.JdbcCurosrApplication</code>。\n</p>\n<p>在运行代码之前请先在数据库中执行以下DDL语句，并添加部分测试数据。</p>\n<pre><code class="SQL"><span class="code-keyword">CREATE</span> <span class="code-keyword">TABLE</span> <span\n        class="code-string">`tmp_test_weather`</span> (\n  <span class="code-string">`id`</span> <span class="code-built_in">int</span>(<span\n            class="hljs-number">10</span>) <span class="code-keyword">unsigned</span> <span\n            class="code-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span\n            class="code-keyword">COMMENT</span> <span class="code-string">\'主键\'</span>,\n  <span class="code-string">`siteid`</span> <span class="code-built_in">varchar</span>(<span\n            class="hljs-number">64</span>) <span class="code-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span\n            class="code-keyword">COMMENT</span> <span class="code-string">\'业务主键\'</span>,\n  <span class="code-string">`month`</span> <span class="code-built_in">varchar</span>(<span\n            class="hljs-number">64</span>) <span class="code-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span\n            class="code-keyword">COMMENT</span> <span class="code-string">\'日期\'</span>,\n  <span class="code-string">`type`</span> <span class="code-built_in">varchar</span>(<span class="hljs-number">64</span>) <span\n            class="code-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span\n            class="code-keyword">COMMENT</span> <span class="code-string">\'气象类型\'</span>,\n  <span class="code-string">`value`</span> <span class="code-built_in">int</span>(<span\n            class="hljs-number">11</span>) <span class="code-keyword">NOT</span> <span class="hljs-literal">NULL</span> <span\n            class="code-keyword">COMMENT</span> <span class="code-string">\'值\'</span>,\n  <span class="code-string">`ext`</span> <span class="code-built_in">varchar</span>(<span class="hljs-number">255</span>) <span\n            class="code-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="code-keyword">COMMENT</span> <span\n            class="code-string">\'扩展数据\'</span>,\n  PRIMARY <span class="code-keyword">KEY</span> (<span class="code-string">`id`</span>)\n) ;\n</code></pre>\n<p>运行代码：</p>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">JdbcReader</span> </span>{\n\n    <span class="code-meta">@Bean</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> RowMapper&lt;WeatherEntity&gt; <span\n            class="code-title">weatherEntityRowMapper</span><span class="hljs-params">()</span> </span>{\n\n        <span class="code-keyword">return</span> <span class="code-keyword">new</span> RowMapper&lt;WeatherEntity&gt;() {\n            <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">final</span> String SITEID_COLUMN = <span class="code-string">"siteId"</span>; <span\n            class="code-comment">// 设置映射字段</span>\n            <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">final</span> String MONTH_COLUMN = <span class="code-string">"month"</span>;\n            <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">final</span> String TYPE_COLUMN = <span class="code-string">"type"</span>;\n            <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">final</span> String VALUE_COLUMN = <span class="code-string">"value"</span>;\n            <span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">final</span> String EXT_COLUMN = <span class="code-string">"ext"</span>;\n\n            <span class="code-meta">@Override</span>\n            <span class="code-comment">// 数据转换</span>\n            <span class="hljs-function"><span class="code-keyword">public</span> WeatherEntity <span class="code-title">mapRow</span><span\n                    class="hljs-params">(ResultSet resultSet, <span class="code-keyword">int</span> rowNum)</span> <span\n                    class="code-keyword">throws</span> SQLException </span>{\n                WeatherEntity weatherEntity = <span class="code-keyword">new</span> WeatherEntity();\n                weatherEntity.setSiteId(resultSet.getString(SITEID_COLUMN));\n                weatherEntity.setMonth(resultSet.getString(MONTH_COLUMN));\n                weatherEntity.setType(WeatherEntity.Type.valueOf(resultSet.getString(TYPE_COLUMN)));\n                weatherEntity.setValue(resultSet.getInt(VALUE_COLUMN));\n                weatherEntity.setExt(resultSet.getString(EXT_COLUMN));\n                <span class="code-keyword">return</span> weatherEntity;\n            }\n        };\n    }\n\n    <span class="code-meta">@Bean</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> ItemReader&lt;WeatherEntity&gt; <span\n            class="code-title">jdbcCursorItemReader</span><span class="hljs-params">(\n        @Qualifier(<span class="code-string">"weatherEntityRowMapper"</span>)</span> RowMapper&lt;WeatherEntity&gt; rowMapper, DataSource datasource) </span>{\n        JdbcCursorItemReader&lt;WeatherEntity&gt; itemReader = <span class="code-keyword">new</span> JdbcCursorItemReader&lt;&gt;();\n        itemReader.setDataSource(datasource); <span class="code-comment">//设置DataSource</span>\n        <span class="code-comment">//设置读取的SQL</span>\n        itemReader.setSql(<span\n            class="code-string">"SELECT siteId, month, type, value, ext from TMP_TEST_WEATHER"</span>);\n        itemReader.setRowMapper(rowMapper); <span class="code-comment">//设置转换</span>\n        <span class="code-keyword">return</span> itemReader;\n    }\n}\n</code></pre>\n<h3 id="h3-2">HibernateCursorItemReader</h3>\n<p>在Java体系中数据库操作常见的规范有<code>JPA</code>或<code>ORM</code>，Spring Batch提供了<code>HibernateCursorItemReader</code>来实现<code>HibernateTemplate</code>,它可以通过<em>Hibernate</em>框架进行游标的控制。\n</p>\n<p><strong>需要注意的是</strong>：使用<em>Hibernate</em>框架来处理批量数据到目前为止一直都有争议，核心原因是<em>Hibernate</em>最初是为在线联机事物型系统开发的。不过这并不意味着不能使用它来处理批数据，解决此问题就是让<em>Hibernate</em>使用<code>StatelessSession</code>用来保持游标，而不是<code>standard\n    session</code>一次读写，这将导致<em>Hibernate</em>的缓存机制和数据脏读检查失效，进而影响批处理的过程。关于<em>Hibernate</em>的状态控制机制请阅读官方文档。</p>\n<p><code>HibernateCursorItemReader</code>使用过程与<code>JdbcCursorItemReader</code>没多大差异都是逐条读取数据然后控制状态链接关闭。只不过他提供了<em>Hibernate</em>所使用的<em>HSQL</em>方案。\n</p>\n<pre><code class="Java"><span class="code-meta">@Bean</span>\n<span class="hljs-function"><span class="code-keyword">public</span> ItemReader&lt;WeatherEntity&gt; <span\n        class="code-title">hibernateCursorItemReader</span><span\n        class="hljs-params">(SessionFactory sessionFactory)</span> </span>{\n    HibernateCursorItemReader&lt;WeatherEntity&gt; itemReader = <span class="code-keyword">new</span> HibernateCursorItemReader&lt;&gt;();\n    itemReader.setName(<span class="code-string">"hibernateCursorItemReader"</span>);\n    itemReader.setQueryString(<span class="code-string">"from WeatherEntity tmp_test_weather"</span>);\n    itemReader.setSessionFactory(sessionFactory);\n    <span class="code-keyword">return</span> itemReader;\n}\n</code></pre>\n<p>或</p>\n<pre><code class="Java"><span class="hljs-function"><span class="code-keyword">public</span> ItemReader&lt;WeatherEntity&gt; <span\n        class="code-title">hibernateCursorItemReader</span><span\n        class="hljs-params">(SessionFactory sessionFactory)</span> </span>{\n    <span class="code-keyword">return</span> <span class="code-keyword">new</span> HibernateCursorItemReaderBuilder&lt;CustomerCredit&gt;()\n            .name(<span class="code-string">"creditReader"</span>)\n            .sessionFactory(sessionFactory)\n            .queryString(<span class="code-string">"from CustomerCredit"</span>)\n            .build();\n}\n</code></pre>\n<p>如果没有特别的需要，不推荐使用<em>Hibernate</em>。</p>\n<h3 id="h3-3">StoredProcedureItemReader</h3>\n<p>存储过程是在同一个数据库中处理大量数据的常用方法。<code>StoredProcedureItemReader</code>的执行过程和<code>JdbcCursorItemReader</code>一致，但是底层逻辑是先执行存储过程，然后返回存储过程执行结果游标。不同的数据库存储过程游标返回会有一些差异：\n</p>\n<ol>\n    <li>作为一个<code>ResultSet</code>返回。（SQL Server, Sybase, DB2, Derby以及MySQL）</li>\n    <li>参数返回一个 <code>ref-cursor</code>实例。比如Oracle、PostgreSQL数据库，这类数据库存储过程是不会直接return任何内容的，需要从传参获取。</li>\n    <li>返回存储过程调用后的返回值。</li>\n</ol>\n<p>针对以上3个类型，配置上有一些差异：</p>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\n<span class="code-meta">@Bean</span>\n<span class="hljs-function"><span class="code-keyword">public</span> StoredProcedureItemReader <span class="code-title">reader</span><span\n        class="hljs-params">(DataSource dataSource)</span> </span>{\n    StoredProcedureItemReader reader = <span class="code-keyword">new</span> StoredProcedureItemReader();\n\n    reader.setDataSource(dataSource);\n    reader.setProcedureName(<span class="code-string">"sp_processor_weather"</span>);\n    reader.setRowMapper(<span class="code-keyword">new</span> weatherEntityRowMapper());\n\t\n    reader.setRefCursorPosition(<span class="hljs-number">1</span>);<span class="code-comment">//第二种类型需要指定ref-cursor的参数位置</span>\n\n    reader.setFunction(<span class="code-keyword">true</span>);<span\n            class="code-comment">//第三种类型需要明确的告知reader通过返回获取</span>\n\n    <span class="code-keyword">return</span> reader;\n}\n</code></pre>\n<p>使用存储过程处理数据的好处是可以实现针对库内的数据进行合并、分割、排序等处理。如果数据在同一个数据库，性能也明显好于通过Java处理。</p>\n<h2 id="h2-3">分页读取数据</h2>\n<p>相对于游标，还有一个办法是进行分页查询。分页查询意味着再进行批处理的过程中同一个SQL会多次执行。在联机型事物系统中分页查询常用于列表功能，每一次查询需要指定开始位置和结束位置。</p>\n<h3 id="h3-4">JdbcPagingItemReader</h3>\n<p>分页查询的默认实现类是<code>JdbcPagingItemReader</code>，它的核心功能是用分页器<code>PagingQueryProvider</code>进行分页控制。由于不同的数据库分页方法差别很大，所以针对不同的数据库有不同的实现类。框架提供了<code>SqlPagingQueryProviderFactoryBean</code>用于检查当前数据库并自动注入对应的<code>PagingQueryProvider</code>。\n</p>\n<p><code>JdbcPagingItemReader</code>会从数据库中一次性读取一整页的数据，但是调用<code>Reader</code>的时候还是会一行一行的返回数据。框架会自行根据运行情况确定什么时候需要执行下一个分页的查询。\n</p>\n<h4 id="h4-2">分页读取数据执行源码</h4>\n<ul>\n    <li>Gitee：<a\n            href="https://gitee.com/chkui-com/spring-batch-sample">https://gitee.com/chkui-com/spring-batch-sample</a>\n    </li>\n    <li>Github：<a href="https://github.com/chkui/spring-batch-sample">https://github.com/chkui/spring-batch-sample</a>\n    </li>\n</ul>\n<p>执行<code>JdbcPagingItemReader</code>的代码在<code>org.chenkui.spring.batch.sample.items.pageReader</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.paging.JdbcPagingApplication</code>：\n</p>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">pageReader</span> </span>{\n    <span class="code-keyword">final</span> <span class="code-keyword">private</span> <span\n            class="code-keyword">boolean</span> wrapperBuilder = <span class="code-keyword">false</span>;\n    <span class="code-meta">@Bean</span>\n    <span class="code-comment">//设置 queryProvider</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> SqlPagingQueryProviderFactoryBean <span\n            class="code-title">queryProvider</span><span class="hljs-params">(DataSource dataSource)</span> </span>{\n        SqlPagingQueryProviderFactoryBean provider = <span class="code-keyword">new</span> SqlPagingQueryProviderFactoryBean();\n\n        provider.setDataSource(dataSource);\n        provider.setSelectClause(<span class="code-string">"select id, siteid, month, type, value, ext"</span>);\n        provider.setFromClause(<span class="code-string">"from tmp_test_weather"</span>);\n        provider.setWhereClause(<span class="code-string">"where id&gt;:start"</span>);\n        provider.setSortKey(<span class="code-string">"id"</span>);\n\n        <span class="code-keyword">return</span> provider;\n    }\n\n    <span class="code-meta">@Bean</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> ItemReader&lt;WeatherEntity&gt; <span\n            class="code-title">jdbcPagingItemReader</span><span class="hljs-params">(DataSource dataSource,\n            PagingQueryProvider queryProvider,\n            RowMapper&lt;WeatherEntity&gt; rowMapper)</span> </span>{\n\n        Map&lt;String, Object&gt; parameterValues = <span class="code-keyword">new</span> HashMap&lt;&gt;();\n        parameterValues.put(<span class="code-string">"start"</span>, <span class="code-string">"1"</span>);\n        JdbcPagingItemReader&lt;WeatherEntity&gt; itemReader;\n        <span class="code-keyword">if</span> (wrapperBuilder) {\n            itemReader = <span class="code-keyword">new</span> JdbcPagingItemReaderBuilder&lt;WeatherEntity&gt;()\n                    .name(<span class="code-string">"creditReader"</span>)\n                    .dataSource(dataSource)\n                    .queryProvider(queryProvider)\n                    .parameterValues(parameterValues)\n                    .rowMapper(rowMapper)\n                    .pageSize(<span class="hljs-number">1000</span>)\n                    .build();\n        } <span class="code-keyword">else</span> {\n            itemReader = <span class="code-keyword">new</span> JdbcPagingItemReader&lt;&gt;();\n            itemReader.setName(<span class="code-string">"weatherEntityJdbcPagingItemReader"</span>);\n            itemReader.setDataSource(dataSource);\n            itemReader.setQueryProvider(queryProvider);\n            itemReader.setParameterValues(parameterValues);\n            itemReader.setRowMapper(rowMapper);\n            itemReader.setPageSize(<span class="hljs-number">1000</span>);\n        }\n        <span class="code-keyword">return</span> itemReader;\n    }\n}\n</code></pre>\n<h2 id="h2-4">数据写入</h2>\n<p>Spring Batch为不同类型的文件的写入提供了多个实现类，但并没有为数据库的写入提供任何实现类，而是交由开发者自己去实现接口。理由是：</p>\n<ol>\n    <li>\n        <p>数据库的写入与文件写入有巨大的差别。对于一个<code>Step</code>而言，在写入一份文件时需要保持对文件的打开状态从而能够高效的向队尾添加数据。如果每次都重新打开文件，从开始位置移动到队尾会耗费大量的时间（很多文件流无法在open时就知道长度）。当整个<code>Step</code>结束时才能关闭文件的打开状态，框架提供的文件读写类都实现了这个控制过程。\n        </p>\n    </li>\n    <li>\n        <p>另外无论使用何种方式将数据写入文件都是"逐行进行"的（流数据写入、字符串逐行写入）。因此当数据写入与整个<code>Step</code>绑定为事物时还需要实现一个控制过程是：在写入数据的过程中出现异常时要擦除本次事物已经写入的数据，这样才能和整个<code>Step</code>的状态保持一致。框架中的类同样实现了这个过程。\n        </p>\n    </li>\n    <li>\n        <p>但是向数据库写入数据并不需要类似于文件的<em>尾部写入控制</em>，因为数据库的各种链接池本身就保证了链接-&gt;写入-&gt;释放的高效执行，也不存在向队尾添加数据的问题。而且几乎所有的数据库驱动都提供了事物能力，在任何时候出现异常都会自动回退，不存在擦除数据的问题。\n        </p>\n    </li>\n</ol>\n<p>因此，对于数据库的写入操作只要按照常规的批量数据写入的方式即可，开发者使用任何工具都可以完成这个过程。</p>\n<h3 id="h3-5">写入数据一个简单的实现</h3>\n<p>实现数据写入方法很多，这和常规的联机事务系统没任何区别。下面直接用<code>JdbcTemplate</code>实现了一个简单的数据库写入过程。</p>\n<p>执行数据库写入的核心代码在<code>org.chenkui.spring.batch.sample.items.JdbcWriter</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.output.JdbcWriterApplication</code>。\n</p>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">JdbcWriter</span> </span>{\n\n    <span class="code-meta">@Bean</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> ItemWriter&lt;WeatherEntity&gt; <span\n            class="code-title">jdbcBatchWriter</span><span class="hljs-params">(JdbcTemplate template)</span> </span>{\n\n        <span class="code-keyword">return</span> <span class="code-keyword">new</span> ItemWriter&lt;WeatherEntity&gt;() {\n            <span class="code-keyword">final</span> <span class="code-keyword">private</span> <span\n            class="code-keyword">static</span> String INSERt_SQL =\n                      <span class="code-string">"INSERT INTO tmp_test_weather(siteid, month, type, value, ext) VALUES(?,?,?,?,?)"</span>;\n            <span class="code-meta">@Override</span>\n            <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n                    class="code-title">write</span><span\n                    class="hljs-params">(List&lt;? extends WeatherEntity&gt; items)</span> <span class="code-keyword">throws</span> Exception </span>{\n                List&lt;Object[]&gt; batchArgs = <span class="code-keyword">new</span> ArrayList&lt;&gt;();\n                <span class="code-keyword">for</span> (WeatherEntity entity : items) {\n                    Object[] objects = <span class="code-keyword">new</span> Object[<span class="hljs-number">5</span>];\n                    objects[<span class="hljs-number">0</span>] = entity.getSiteId();\n                    objects[<span class="hljs-number">1</span>] = entity.getMonth();\n                    objects[<span class="hljs-number">2</span>] = entity.getType().name();\n                    objects[<span class="hljs-number">3</span>] = entity.getValue();\n                    objects[<span class="hljs-number">4</span>] = entity.getExt();\n                    batchArgs.add(objects);\n                }\n                template.batchUpdate(INSERt_SQL, batchArgs);\n            }\n        };\n    }\n}\n</code></pre>\n<h2 id="h2-5">组合使用案例</h2>\n<p>下面是一些组合使用过程，简单实现了文件到数据库、数据库到文件的过程。文件读写的过程已经在<a\n        href="https://www.chkui.com/article/spring/spring_batch_flat_file_read_and_write">文件读写</a>中介绍过，这里会重复使用之前介绍的文件读写的功能。\n</p>\n<p>下面的案例是将<code>data.csv</code>中的数据写入到数据库，然后再将数据写入到<code>out-data.csv</code>。案例组合使用已有的<code>item</code>完成任务：<code>flatFileReader</code>、<code>jdbcBatchWriter</code>、<code>jdbcCursorItemReader</code>、<code>simpleProcessor</code>、<code>flatFileWriter</code>。这种<code>Reader</code>、<code>Processor</code>、<code>Writer</code>组合的方式也是完成一个批处理工程的常见开发方式。\n</p>\n<p>案例的运行代码在<code>org.chenkui.spring.batch.sample.database.complex</code>包中，使用了2个<code>Step</code>来完成任务，一个将数据读取到数据库，一个将数据进行过滤，然后再写入到文件：\n</p>\n<pre><code class="Java"><span class="code-comment">//随风溜达的向日葵 chkui.com</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">FileComplexProcessConfig</span> </span>{\n    <span class="code-meta">@Bean</span>\n    <span class="code-comment">// 配置Step1</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> Step <span\n            class="code-title">file2DatabaseStep</span><span class="hljs-params">(StepBuilderFactory builder,\n            @Qualifier(<span class="code-string">"flatFileReader"</span>)</span> ItemReader&lt;WeatherEntity&gt; reader,\n            @<span class="code-title">Qualifier</span><span class="hljs-params">(<span class="code-string">"jdbcBatchWriter"</span>)</span> ItemWriter&lt;WeatherEntity&gt; writer) </span>{\n        <span class="code-keyword">return</span> builder.get(<span class="code-string">"file2DatabaseStep"</span>) <span\n            class="code-comment">// 创建</span>\n                .&lt;WeatherEntity, WeatherEntity&gt;chunk(<span class="hljs-number">50</span>) <span\n            class="code-comment">// 分片</span>\n                .reader(reader) <span class="code-comment">// 读取</span>\n                .writer(writer) <span class="code-comment">// 写入</span>\n                .faultTolerant() <span class="code-comment">// 开启容错处理</span>\n                .skipLimit(<span class="hljs-number">20</span>) <span class="code-comment">// 跳过设置</span>\n                .skip(Exception.class) <span class="code-comment">// 跳过异常</span>\n                .build();\n    }\n\n    <span class="code-meta">@Bean</span>\n    <span class="code-comment">// 配置Step2</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> Step <span\n            class="code-title">database2FileStep</span><span class="hljs-params">(StepBuilderFactory builder,\n            @Qualifier(<span class="code-string">"jdbcCursorItemReader"</span>)</span> ItemReader&lt;WeatherEntity&gt; reader,\n            @<span class="code-title">Qualifier</span><span class="hljs-params">(<span class="code-string">"simpleProcessor"</span>)</span> ItemProcessor&lt;WeatherEntity, MaxTemperatureEntiry&gt; processor,\n            @<span class="code-title">Qualifier</span><span class="hljs-params">(<span class="code-string">"flatFileWriter"</span>)</span> ItemWriter&lt;MaxTemperatureEntiry&gt; writer) </span>{\n        <span class="code-keyword">return</span> builder.get(<span class="code-string">"database2FileStep"</span>) <span\n            class="code-comment">// 创建</span>\n                .&lt;WeatherEntity, MaxTemperatureEntiry&gt;chunk(<span class="hljs-number">50</span>) <span\n            class="code-comment">// 分片</span>\n                .reader(reader) <span class="code-comment">// 读取</span>\n                .processor(processor) <span class="code-comment">//</span>\n                .writer(writer) <span class="code-comment">// 写入</span>\n                .faultTolerant() <span class="code-comment">// 开启容错处理</span>\n                .skipLimit(<span class="hljs-number">20</span>) <span class="code-comment">// 跳过设置</span>\n                .skip(Exception.class) <span class="code-comment">// 跳过异常</span>\n                .build();\n    }\n\n    <span class="code-meta">@Bean</span>\n    <span class="hljs-function"><span class="code-keyword">public</span> Job <span\n            class="code-title">file2DatabaseJob</span><span class="hljs-params">(@Qualifier(<span class="code-string">"file2DatabaseStep"</span>)</span> Step step2Database,\n            @<span class="code-title">Qualifier</span><span class="hljs-params">(<span class="code-string">"database2FileStep"</span>)</span> Step step2File, JobBuilderFactory builder) </span>{\n        <span class="code-keyword">return</span> builder.get(<span class="code-string">"File2Database"</span>).start(step2Database).next(step2File).build();\n    }\n}\n</code></pre>'}};