exports.ids=[23],exports.modules={250:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<p>\n    在第一篇介绍<em>Hazelcast</em>的文章已经提到，<em>Hazelcast</em>为<em>Java</em>中绝大部分数据结构提供了分布式实现。我们常用的<em>Map</em>、<em>List</em>、<em>Queue</em>等数据结构可以用<em>Hazelcast</em>的实现类在多个集群节点之间共享数据。本篇将介绍<em>Map</em>的分布式实现方式和使用方法，后续的博文再简要说明<em>Set、Queue、List、Ringbuffer、Topic、Lock</em>等数据结构的配置和使用方法。如果你对<em>Hazelcast</em>的基础知识还不太了解，建议先阅读本人前面关于<em>Hazelcast</em>介绍的三篇博文——\n\t<a title="Hazelcast 入门及使用案例" href="https://www.chkui.com/article/hazelcast/hazelcast_get_started_and_code_sample">Hazelcast 入门及使用案例</a>、\n\t<a title="Hazelcast 配置教程" href="https://www.chkui.com/article/hazelcast/hazelcast_configuration_management">Hazelcast 配置教程</a>、\n\t<a title="Hazelcast 集群功能及配置" href="https://www.chkui.com/article/hazelcast/hazelcast_introduction_of_cluster">Hazelcast 集群功能及配置</a>。</p>\n\n<h2 id="h2-1">分布式Map基础功能</h2>\n<p><em>Map</em>是我们再最常用的数据接口之一，时常用于存储某种关系值。在前面介绍Hazelcast的文章中已经用<em>Map</em>举了很多分布式环境使用的例子。下面我们将由浅入深的介绍<em>Hazelcast</em>的<em>Map</em>。\n</p>\n<p>\n    在<em>Hazelcast</em>中自定义了一个名为<em>IMap</em>的接口，该接口自<em>java.util.concurrent.ConcurrentMap</em>接口，所以可以通过常规的<em>Map::get</em>和<em>Map::put</em>方法来控制集群<em>Map</em>的数据。先看一个<em>Map</em>使用简单的例子：\n</p>\n<p>（<span style="color:#FF8C00">再次申明，文中所有的例子的代码都在：</span>\n\t<a href="https://github.com/chkui/hazelcast-demo" rel="nofollow"><span style="color:#FF8C00">https://github.com/chkui/hazelcast-demo</span></a><span\n        style="color:#FF8C00">，git clone到本地用Maven导入即可运行</span>）</p>\n<p>首先创建一个服务端节点，并向节点中的<em>Map</em>添加数据。</p>\n<pre class="swift"><code class="language-java"><span class="code-comment"><span class="code-comment">// </span></span>\n<span class="code-comment"><span class="code-comment">// 服务端节点</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">ServiceNode</span></span></span><span\n            class="hljs-class"> </span></span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="code-keyword">public</span></span> <span\n            class="code-keyword"><span class="code-keyword">static</span></span> <span class="code-keyword">void</span> <span\n            class="code-title">main</span><span class="hljs-params">(<span\n            class="code-type">String</span>[] args)</span> </span>{\n\t\t<span class="code-comment"><span class="code-comment">// 获取Hazelcast实例</span></span>\n\t\t<span class="code-type">HazelcastInstance</span> ins = <span class="code-type">Hazelcast</span>.newHazelcastInstance();\n\n\t\t<span class="code-comment"><span class="code-comment">// 从集群中读取Map实例</span></span>\n\t\t<span class="code-type">Map</span>&lt;<span class="code-type">Integer</span>, <span\n            class="code-type">String</span>&gt; <span class="code-built_in">map</span> = ins.getMap(<span\n            class="code-string"><span class="code-string">"default map"</span></span>);\n\n\t\t<span class="code-comment"><span class="code-comment">// 向集群中添加数据</span></span>\n\t\t<span class="code-type">System</span>.out.<span class="code-built_in">println</span>(<span\n            class="code-string"><span class="code-string">"Begin insert data"</span></span>);\n\t\t<span class="code-built_in">map</span>.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span\n            class="code-string"><span class="code-string">"Cait Cassiopeia"</span></span>);\n\t\t<span class="code-built_in">map</span>.put(<span class="hljs-number"><span class="hljs-number">2</span></span>, <span\n            class="code-string"><span class="code-string">"Annie"</span></span>);\n\t\t<span class="code-built_in">map</span>.put(<span class="hljs-number"><span class="hljs-number">3</span></span>, <span\n            class="code-string"><span class="code-string">"Evelynn"</span></span>);\n\t\t<span class="code-built_in">map</span>.put(<span class="hljs-number"><span class="hljs-number">4</span></span>, <span\n            class="code-string"><span class="code-string">"Ashe"</span></span>);\n\t\t<span class="code-type">System</span>.out.<span class="code-built_in">println</span>(<span\n            class="code-string"><span class="code-string">"End"</span></span>);\n\t\t\n\t}\n}</code></pre>\n<p>然后创建一个客户端节点，从节点的<em>Map</em>读取数据。</p>\n<pre class="cpp"><code class="language-java"><span class="code-comment"><span class="code-comment">//</span></span>\n<span class="code-comment"><span class="code-comment">// 客户端节点</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="code-keyword">class</span></span> <span\n            class="code-title">ClientNode</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(String[] args)</span></span></span><span class="hljs-function"> </span></span>{\n\t\t<span class="code-comment"><span class="code-comment">// 获取Hazelcast实例</span></span>\n\t\tHazelcastInstance ins = Hazelcast.newHazelcastInstance();\n\n\t\t<span class="code-comment"><span class="code-comment">// 从集群中读取Map实例</span></span>\n\t\tMap&lt;Integer, String&gt; <span class="code-built_in">map</span> = ins.getMap(<span class="code-string"><span\n            class="code-string">"default map"</span></span>);\n\n\t\t<span class="code-comment"><span class="code-comment">// 输出map中数据</span></span>\n\t\t<span class="code-built_in">map</span>.forEach((k,v)-&gt;{\n\t\t\tSystem.out.println(<span class="code-string"><span class="code-string">"Pos:"</span></span> + k + <span\n            class="code-string"><span class="code-string">". name:"</span></span> + v);\n\t\t});\n\t\t\n\t}\n}</code></pre>\n<p>这就是使用集群<em>Map</em>的过程，和常规<em>Map</em>并没有什么差异。在使用集群<em>Map</em>时，最主要是了解<em>Map</em>的各种配置对<em>Map</em>功能的影响，以及<em>Hazelcast</em>为<em>Map</em>提供了哪些扩展接口。下面将会结合配置文档，说明每一个配置参数的功效。\n</p>\n<p>先看分布式<em>Map</em>的基础配置参数：</p>\n<pre class="xml"><code class="language-xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">map</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span\n        class="hljs-attr">name</span></span></span><span class="code-tag">=</span><span class="code-string"><span\n        class="code-tag"><span class="code-string">"default"</span></span></span><span\n        class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">backup-count</span></span></span><span class="code-tag">&gt;</span></span>0<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">backup-count</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">async-backup-count</span></span></span><span class="code-tag">&gt;</span></span>1<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">async-backup-count</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">read-backup-data</span></span></span><span class="code-tag">&gt;</span></span>true<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">read-backup-data</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">in-memory-format</span></span></span><span class="code-tag">&gt;</span></span>BINARY<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">in-memory-format</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">eviction-policy</span></span></span><span class="code-tag">&gt;</span></span>LRU<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">eviction-policy</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">time-to-live-seconds</span></span></span><span class="code-tag">&gt;</span></span>0<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">time-to-live-seconds</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">max-idle-seconds</span></span></span><span class="code-tag">&gt;</span></span>0<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">max-idle-seconds</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">min-eviction-check-millis</span></span></span><span class="code-tag">&gt;</span></span>150<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">min-eviction-check-millis</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">max-size</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n            class="code-tag"><span class="hljs-attr">policy</span></span></span><span class="code-tag">=</span><span\n            class="code-string"><span class="code-tag"><span class="code-string">"PER_NODE"</span></span></span><span\n            class="code-tag">&gt;</span></span>5000<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">max-size</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">eviction-percentage</span></span></span><span class="code-tag">&gt;</span></span>25<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">eviction-percentage</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">map</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>下面这个是一个使用代码配置的例子：</p>\n<pre class="java"><code class="language-java"><span class="code-comment"><span class="code-comment">//</span></span>\n<span class="code-comment"><span class="code-comment">// 代码设置Map</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">StaticMapConfig</span></span></span><span\n            class="hljs-class"> </span></span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(String[] args)</span></span></span><span class="hljs-function"> </span></span>{\n\t\tMapConfig mapConfig = <span class="code-keyword"><span class="code-keyword">new</span></span> MapConfig();\n\t\tmapConfig.setName(<span class="code-string"><span class="code-string">"cacheMap"</span></span>)<span\n            class="code-comment"><span class="code-comment">// 设置Map名称</span></span>\n\t\t\t\t.setInMemoryFormat(InMemoryFormat.BINARY)<span class="code-comment"><span\n            class="code-comment">// 设置内存格式</span></span>\n\t\t\t\t.setBackupCount(<span class="hljs-number"><span class="hljs-number">1</span></span>);<span\n            class="code-comment"><span class="code-comment">// 设置副本个数</span></span>\n\n\t\tmapConfig.getMapStoreConfig()<span class="code-comment"><span class="code-comment">//</span></span>\n\t\t\t\t.setWriteDelaySeconds(<span class="hljs-number"><span class="hljs-number">60</span></span>)<span\n            class="code-comment"><span class="code-comment">//</span></span>\n\t\t\t\t.setWriteBatchSize(<span class="hljs-number"><span class="hljs-number">1000</span></span>);<span\n            class="code-comment"><span class="code-comment">// 设置缓存格式</span></span>\n\n\t\tmapConfig.addMapIndexConfig(<span class="code-keyword"><span class="code-keyword">new</span></span> MapIndexConfig().setAttribute(<span\n            class="code-string"><span class="code-string">"id"</span></span>).setOrdered(<span\n            class="code-keyword"><span class="code-keyword">true</span></span>));<span class="code-comment"><span\n            class="code-comment">// 增加索引</span></span>\n\t\tmapConfig.addMapIndexConfig(<span class="code-keyword"><span class="code-keyword">new</span></span> MapIndexConfig().setAttribute(<span\n            class="code-string"><span class="code-string">"name"</span></span>).setOrdered(<span\n            class="code-keyword"><span class="code-keyword">true</span></span>));\n\t}\n}</code></pre>\n<p>下面我们将一一介绍每个配置的含义。</p>\n\n<h3 id="h3-1">backup-count</h3>\n<p><strong>备份副本个数[0~Integer.MAX_VALUE]</strong>。 前面的博文已经介绍，集群中分布式存储的数据都会被均匀的存储在每个节点上。我们使用Map进行分布式数据存储时，每个节点会按条目（<em>Entry</em>）数将数据进行分布，并且每条数据都会有备份。例如集群中的一个Map有1000条数据，此时有2个节点，那么每个节点会存储1000条数——500条主数据和500条备份数据，以此类推，当有5个节点是，每个节点200条主数据加200条备份数据。\n</p>\n<p><strong><em>backup-count&nbsp;</em></strong>就是用来定义备份副本个数的，默认为1。当设置为0时，集群中不会有任何数据副本。这个参数需要根据数据的业务需要来定义，值越大，需要备份的副本就越多，集群中需要处理的数据就越多会导致性能降低。\n</p>\n\n<h3 id="h3-2">async-backup-count</h3>\n<p>\n    <strong>异步备份副本的个数[0~Integer.MAX_VALUE]</strong>。这个参数和<em>backup-count</em>类似，也是指定备份副本的个数，区别在于这里指定的副本，是异步备份的。例如，我们执行<em>map.put(key,value)</em>时，<em>Hazelcast</em>会先向主表添加数据。这时如果指定了<em>backup-count\n    = 1</em>，会先更新副本数据，然后再return到调用put方法的线程，在添加数据完成之前，调用线程都是被阻塞的。如果指定了<em>async-backup-count</em> =\n    1，那么当添加主表数据成功后，会直接返回给调用线程，然后再去异步执行数据备份。使用同步方法还是异步方法，需要根据业务数据的重要性来决定，如果是一定不能丢失的数据，最好用同步方法，如果备份出现异常，会马上通知到调用线程然后执行补偿操作。\n</p>\n\n<h3 id="h3-3">read-backup-data</h3>\n<p><strong> 副本直读数据[true|false]</strong>。当我们的集群中有一个map的备份数据后，这些备份数据也是分散存储在各个节点的。当某个节点需要读取数据时，<em>read-backup-data</em>设置为<em>false</em>表示只能从主表数据读取，设置为<em>true</em>表示可以从备份副本中读取数据。设置为<em>true</em>，可以提升数据的读取数据，因为在某个节点要读取某条数据时，该节点正好有该条数据，可以减少网络交互消耗。但是设置为<em>trure</em>可能会导致“数据脏读”。\n</p>\n\n<h3 id="h3-4">in-memory-format</h3>\n<p><strong>内存数据格式[BINARY|OBJECT]</strong>。</p>\n<p>BINARY：这是默认配置。数据将被序列化成二进制的方式存储。如果在应用中Map的主要执行的都是像get和put这样的常规操作，建议使用这个配置。</p>\n<p>OBJECT：数据将以非序列化的结构存储。这个配置有利于当<em>Map</em>中存储的对象比较复杂，对其进行序列化的成本较高时。当需要对存储复杂对象的Map条目进行大量查询时，建议使用OBJECT。</p>\n<p>\n    用一个场景来说明他们的区别。我们的对象都是存储在存储在每个节点中的，当某个节点需要get不在本地一条数据时，Hazelcast需要去其他节点获取数据。此时如果以二进制的方式存储，不用进行序列化，直接将数据进行传输，而如果以对象的方式存储，在传输之前，需要进行一次序列化操作，然后再传递数据。</p>\n\n<h3 id="h3-5">eviction-policy</h3>\n<p>数据释放策略[NONE|LRU|LFU]。这是Map作为缓存的一个参数，用于指定数据的回收算法。默认为NONE。</p>\n<p>NONE：当设置为NONE时，不会发生数据回收，同时<em>max-size</em>会失效。但是任然可以使用<em>time-to-live-seconds</em>和max-idle-seconds参数来控制数据留存时间。</p>\n<p>LRU：“最近最少使用“策略。</p>\n<p>LFU：“最不常用的使用”策略。</p>\n\n<h3 id="h3-6">time-to-live-seconds（TTL）</h3>\n<p><strong>数据留存时间[0~Integer.MAX_VALUE]</strong>。缓存相关参数，单位秒，默认为0。这个参数决定了一条数据在map中的停留时间。当数据在Map中留存超过这个时间并且没有被更新时，它会根据指定的回收策略从Map中移除。值为0时，意味着无求大。\n</p>\n\n<h3 id="h3-7">max-idle-seconds</h3>\n<p><strong>数据的最大空闲时间[0~Integer.MAX_VALUE]</strong>。缓存相关参数，单位秒，默认值为0。当条目的空闲时间大于这个数值时，将会被自动释放。条目的空闲是指没<em>get、put、EntryProcessor.process</em>或<em>containsKey</em>方法被调用。默认值为0，意味着无求大。\n</p>\n\n<h3 id="h3-8">min-eviction-check-millis</h3>\n<p><strong>分区数据释放检查周期[0~Integer.MAX_VALUE]</strong>。缓存先关参数，单位秒，默认值为100。前面提到了Hazelcast会对map存储的数据进行释放。为了移除这些数据，有一个轮询工作在不间断的执行。换一种说嘛，就是数据释放的频率。当设置为0时，每一次数据的put操作，都会导致一次数据释放执行。\n</p>\n\n<h3 id="h3-9">max-size</h3>\n<p><strong>Map中存储条目的最大值[0~Integer.MAX_VALUE]</strong>。默认值为0。当条目数量达到接近最大值时，map将基于配置的策略进行条目数据释放。如果期望<em>max-size</em>生效，必须<em>eviction-policy</em>将设置为NONE之外的其他值。max-size中包含一个属性参数——<em>policy</em>，<strong>他定义了max-size对应的存储策略，回收机制会根据这个策略检查数据</strong>。其值有[PER_NODE|PER_PARTITION|USED_HEAP_SIZE|USED_HEAP_PERCENTAGE|FREE_HEAP_SIZE|FREE_HEAP_PERCENTAGE]。\n</p>\n<p>PER_NODE：<em>max-size</em>指定单个集群成员中<em>map</em>条目的最大数量。这是max-size的默认策略。如果使用这个配置，需要注意<em>max-size</em>的值必须大于分区的数量（默认为271）。\n</p>\n<p>\n    PER_PARTITION：max-size指定每个分区存储的map条目最大数。这个策略建议不要在小规模的集群中使用，因为小规模的集群，单个节点包含了大量的分区，在执行回收策略时，会去按照分区的划分组个检查回收条件，导致效率低下。</p>\n<p>USED_HEAP_SIZE：指在每个Hazelcast实例中，<em>max-size</em>指定<em>map</em>所占用的内存堆的（以megabytes计算，兆字节）最大值。需要注意这个策略不能工作在<em>in-memory-format</em>=<em>OBJECT</em>，因为当数据被设置为<em>OBJECT</em>时，无法确定所占用的内存大小。\n</p>\n<p>\n    USED_HEAP_PERCENTAGE：每个Hazelcast实例中，max-size指定map占用内存堆的百分比。例如，JVM被设置有1000MB，而这个值设置为max-size=10，当map条目数占用的堆数据超过100MB时，Hazelcast开始执行数据释放工作。需要注意的是当使用这个策略时，不能将in-memory-format设置为OBJECT，理由同上。</p>\n<p>FREE_HEAP_SIZE：max-size指定了单个JVM的堆最小空闲空间，单位为megabytes。</p>\n<p>FREE_HEAP_PERCENTAGE：max-size指定单个JVM的最小空闲空间的百分比。例如JVM分配了1000MB的空间，这个值设置为10，当空闲堆只有100MB时，会引发map的数据清除放行为。</p>\n\n<h3 id="h3-10">eviction-percentage</h3>\n<p><strong>数据清理的百分比[0-100]</strong>。当触发数据清除条件，这个参数所配置的百分比MAP条目将被释放。例如设置为25，25%的条目将会被清除。将这个值设置较小时会导致Map中只有较少的条目被释放，导致Hazelcast频繁的执行数据清除操作。如果map的条目数据经常被添加，请将这个比率提高，默认为25。\n</p>\n\n<h2 id="h2-2">Near&nbsp;Cache</h2>\n<p>Near\n    cache是Hazelcast分布式Map重要的功能之一。根据前面的知识我们知道，Hazelcast的所有数据都是按照分区存储在每个集群节点之上的。假设集群中的一个节点需要根据key读取某条数据，而这些数据被放置在其他的节点。这样每次Map.get操作都会导致一次网络数据传输，如果节点分布较广、传输能力参差不齐，会导致大量的网络拥塞，进而影响每个节点的执行。尤其是某个map的读操作远远多于写操作时，我们可以考虑使用Near\n    cache功能。Near cache会将那些被某个节点经常使用的数据存储到当前节点或“附近”节点，以此来减少过多的网络传输工作。使用Near cache也会导致一直问题出现，在使用之前，必须了解一下问题：</p>\n<ol>\n    <li>使用Near cache功能会导致集群中的成员额外存储缓存数据，会增加内存的消耗。</li>\n    <li>Near cache会破坏数据一致性性，可能会出现“脏读”现象，因此在频繁写或数据一致性要求较高的应用中不建议使用。</li>\n    <li>建议在高频读操作的Map中启用Near cache功能，这样可以极大的提升执行效率。</li>\n</ol>\n<p>Near&nbsp;cache的配置都在near-cache元素中。下面介绍Near cache的相关参数。</p>\n<pre class="xml"><code class="language-xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">map</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span\n        class="hljs-attr">name</span></span></span><span class="code-tag">=</span><span class="code-string"><span\n        class="code-tag"><span class="code-string">"my-read-mostly-map"</span></span></span><span\n        class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">near-cache</span></span></span><span class="code-tag"> </span><span\n            class="hljs-attr"><span class="code-tag"><span class="hljs-attr">name</span></span></span><span\n            class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"default"</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">in-memory-format</span></span></span><span\n                class="code-tag">&gt;</span></span>BINARY<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">in-memory-format</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">max-size</span></span></span><span class="code-tag">&gt;</span></span>5000<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">max-size</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">time-to-live-seconds</span></span></span><span\n                class="code-tag">&gt;</span></span>0<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span\n            class="code-name">time-to-live-seconds</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">max-idle-seconds</span></span></span><span class="code-tag">&gt;</span></span>60<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">max-idle-seconds</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">eviction-policy</span></span></span><span class="code-tag">&gt;</span></span>LRU<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">eviction-policy</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">invalidate-on-change</span></span></span><span class="code-tag">&gt;</span></span>true<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">invalidate-on-change</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">cache-local-entries</span></span></span><span class="code-tag">&gt;</span></span>false<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">cache-local-entries</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">near-cache</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">map</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n\n<h3 id="h3-11">in-memory-format</h3>\n<p>与Map的in-memory-format配置一样，指定了Map在Near cache中的存储格式。参见前文介绍的in-memory-format功能。</p>\n\n<h3 id="h3-12">max-size</h3>\n<p><strong>Near cache缓存中存储的最大条目数[0~Integer.MAX_VALUE]</strong>。Near cache会根据eviction-policy指定的策略来释放数据。默认为0，表示不限定最大条目数。\n</p>\n\n<h3 id="h3-13">time-to-live-seconds</h3>\n<p><strong>单条数据在Near cache中的最大驻留时间[0~Integer.MAX_VALUE]</strong>。单位秒，默认为0。如果存储在Near cache中的某条数据在Near\n    cache中的驻留时间（没有被更新）超过这个时间，则在执行数据回收时会被释放掉。值为0时表示永远不会过期。</p>\n\n<h3 id="h3-14">max-idle-seconds</h3>\n<p><strong>单条数据在Near cache中的最大失效时间[0~Integer.MAX_VALUE]</strong>。单位秒，默认值为0。如果存储在Near\n    cache中的某条数据在指定时间内没有被读取，则认为该条数据失效。此时在执行数据回收时会释放掉该条数据。值为0时表示用于不会失效。</p>\n\n<h3 id="h3-15">eviction-policy</h3>\n<p>数据释放策略，见前面&nbsp;Map释放策略 的说明。</p>\n\n<h3 id="h3-16">invalidate-on-change</h3>\n<p>设定当Near cache中的某条数据被更新或移除时，是否对其执行释放[true|false]。默认为true。</p>\n\n<h3 id="h3-17">cache-local-entries</h3>\n<p>指定那些已经被存储在当前节点的数据条目，是否也进行Near cache缓存[true|false]。这个参数最大的作用在于，可以将Near cache的内存格式设定成和Map存储格式不一样的方式。默认为fasle。&nbsp;\n    &nbsp;</p>\n\n<h2 id="h2-3">MapStore数据持久化</h2>\n<p>后续得篇幅将介绍Hazelcast分布式Map的一些基础功能。这里先介绍如何对数据库进行数据读写。Hazelcast分布式Map的持久化数据读写通过MapStore来实现。请看下面这个例子：</p>\n<p>先是一个配置文件，后面在说他的意义：</p>\n<pre class="xml"><code class="language-xml"><span class="code-comment"><span class="code-comment">&lt;!--https://github.com/chkui/hazelcast-demo/blob/master/src/main/java/org/palm/hazelcast/map/store/mapStoreConfig.xml --&gt;</span></span>\n<span class="php"><span class="code-meta"><span class="php"><span class="code-meta">&lt;?</span></span></span><span\n        class="php">xml version=</span><span class="code-string"><span class="php"><span\n        class="code-string">"1.0"</span></span></span><span class="php"> encoding=</span><span class="code-string"><span\n        class="php"><span class="code-string">"UTF-8"</span></span></span><span class="code-meta"><span\n        class="php"><span class="code-meta">?&gt;</span></span></span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">hazelcast</span></span></span><span class="code-tag">\n\t</span><span class="hljs-attr"><span class="code-tag"><span\n        class="hljs-attr">xsi:schemaLocation</span></span></span><span class="code-tag">=</span><span\n        class="code-string"><span class="code-tag"><span class="code-string">"http://www.hazelcast.com/schema/config hazelcast-config-3.6.xsd"</span></span></span><span\n        class="code-tag">\n\t</span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">xmlns</span></span></span><span\n        class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"http://www.hazelcast.com/schema/config"</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">xmlns:xsi</span></span></span><span\n        class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><span\n        class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">map</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n            class="code-tag"><span class="hljs-attr">name</span></span></span><span class="code-tag">=</span><span\n            class="code-string"><span class="code-tag"><span class="code-string">"demo"</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">map-store</span></span></span><span class="code-tag"> </span><span\n                class="hljs-attr"><span class="code-tag"><span class="hljs-attr">enabled</span></span></span><span\n                class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"true"</span></span></span><span\n                class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">initial-mode</span></span></span><span\n                class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"EAGER"</span></span></span><span\n                class="code-tag">&gt;</span></span>\n\t\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span\n                    class="code-tag"><span class="code-name">class-name</span></span></span><span\n                    class="code-tag">&gt;</span></span>org.palm.hazelcast.map.store.MapStoreExample<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">class-name</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span\n                    class="code-tag"><span class="code-name">write-delay-seconds</span></span></span><span\n                    class="code-tag">&gt;</span></span>60<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span\n            class="code-name">write-delay-seconds</span></span></span><span class="code-tag">&gt;</span></span>\n\t\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span\n                    class="code-tag"><span class="code-name">write-batch-size</span></span></span><span\n                    class="code-tag">&gt;</span></span>1000<span class="code-tag"><span\n            class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">write-batch-size</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t\t\t<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span\n                    class="code-tag"><span class="code-name">write-coalescing</span></span></span><span\n                    class="code-tag">&gt;</span></span>true<span class="code-tag"><span\n            class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">write-coalescing</span></span></span><span\n            class="code-tag">&gt;</span></span>\n\t\t<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n                class="code-name">map-store</span></span></span><span class="code-tag">&gt;</span></span>\n\t<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">map</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">hazelcast</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>然后定义一个当Map发生数据读写时对数据库进行操作的MapStore类：</p>\n<pre class="java"><code class="language-java"><span class="code-comment"><span class="code-comment">//https://github.com/chkui/hazelcast-demo/blob/master/src/main/java/org/palm/hazelcast/map/store/MapStoreExample.java</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">MapStoreExample</span></span></span><span\n            class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">implements</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">MapStore</span></span></span><span\n            class="hljs-class">&lt;</span><span class="code-title"><span class="hljs-class"><span class="code-title">Integer</span></span></span><span\n            class="hljs-class">, </span><span class="code-title"><span class="hljs-class"><span class="code-title">String</span></span></span><span\n            class="hljs-class">&gt; </span></span>{\n\tMap&lt;Integer, String&gt; store;\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">MapStoreExample</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span></span>{\n\t\tstore = <span class="code-keyword"><span class="code-keyword">new</span></span> HashMap&lt;Integer, String&gt;();\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span\n            class="code-string">"Azeroth"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">2</span></span>, <span class="code-string"><span\n            class="code-string">"Duskwood"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">3</span></span>, <span class="code-string"><span\n            class="code-string">"Elwynn Forest"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">4</span></span>, <span class="code-string"><span\n            class="code-string">"Deadwind Pass"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">5</span></span>, <span class="code-string"><span\n            class="code-string">"Dead Mines"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">6</span></span>, <span class="code-string"><span\n            class="code-string">"Grand Hamlet"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">7</span></span>, <span class="code-string"><span\n            class="code-string">"Dark Portal"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">8</span></span>, <span class="code-string"><span\n            class="code-string">"Ashenvale"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">9</span></span>, <span class="code-string"><span\n            class="code-string">"Felwood"</span></span>);\n\t\tstore.put(<span class="hljs-number"><span class="hljs-number">10</span></span>, <span class="code-string"><span\n            class="code-string">"Orgrimmar"</span></span>);\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> String </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">load</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Integer key)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span\n            class="code-comment">//读取</span></span>\n\t\t<span class="code-keyword"><span class="code-keyword">if</span></span>(store.size() &lt; key){\n\t\t\tkey = <span class="hljs-number"><span class="hljs-number">0</span></span>;\n\t\t}\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> store.get(key);\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span\n            class="hljs-function"> Map&lt;Integer, String&gt; </span><span class="code-title"><span\n            class="hljs-function"><span class="code-title">loadAll</span></span></span><span class="hljs-params"><span\n            class="hljs-function"><span class="hljs-params">(Collection&lt;Integer&gt; arg0)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span\n            class="code-comment">//读取所有</span></span>\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> store;\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> Iterable&lt;Integer&gt; </span><span\n            class="code-title"><span class="hljs-function"><span\n            class="code-title">loadAllKeys</span></span></span><span class="hljs-params"><span\n            class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span></span>{<span\n            class="code-comment"><span class="code-comment">// 读取所有键值</span></span>\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> store.keySet();\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">delete</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Integer key)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span\n            class="code-comment">// 删除键值</span></span>\n\t\tstore.remove(key);\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">deleteAll</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Collection&lt;Integer&gt; list)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span class="code-comment">// 删除所有键值</span></span>\n\t\tlist.forEach(key-&gt;store.remove(key));\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">store</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Integer key, String value)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span\n            class="code-comment">// 存储键值</span></span>\n\t\tstore.put(key, value);\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">storeAll</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Map&lt;Integer, String&gt; map)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span class="code-comment">// 存储所有键值</span></span>\n\t\tstore.putAll(map);\n\t}\n}</code></pre>\n<p>最后时一个测试main：</p>\n<pre class="swift"><code class="language-java"><span class="code-comment"><span class="code-comment">//https://github.com/chkui/hazelcast-demo/blob/master/src/main/java/org/palm/hazelcast/map/store/MapStoreExampleMain.java</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">MapStoreExampleMain</span></span></span><span\n            class="hljs-class"> </span></span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="code-keyword">public</span></span> <span\n            class="code-keyword"><span class="code-keyword">static</span></span> <span class="code-keyword">void</span> <span\n            class="code-title">main</span><span class="hljs-params">(<span\n            class="code-type">String</span>[] args)</span> <span class="code-keyword"><span\n            class="code-keyword">throws</span></span> <span class="code-type">FileNotFoundException</span> </span>{\n\t\t<span class="code-comment"><span class="code-comment">//加载配置</span></span>\n\t\t<span class="code-type">Config</span> config = <span class="code-keyword">new</span> <span class="code-type">ClasspathXmlConfig</span>(<span\n            class="code-string"><span\n            class="code-string">"org/palm/hazelcast/map/store/mapStoreConfig.xml"</span></span>);\n\t\t<span class="code-comment"><span class="code-comment">//创建Hazelcast实力</span></span>\n\t\t<span class="code-type">HazelcastInstance</span> ins = <span class="code-type">Hazelcast</span>.newHazelcastInstance(config);\n\t\t<span class="code-comment"><span class="code-comment">//获取Map</span></span>\n\t\t<span class="code-type">Map</span>&lt;<span class="code-type">Integer</span>, <span\n            class="code-type">String</span>&gt; <span class="code-built_in">map</span> = ins.getMap(<span\n            class="code-string"><span class="code-string">"demo"</span></span>);\n\t\t<span class="code-built_in">println</span>(<span class="code-built_in">map</span>.<span\n            class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">1</span></span>));<span\n            class="code-comment"><span class="code-comment">//输出第一条数据</span></span>\n\t\t\n\t\t<span class="code-built_in">map</span>.put(<span class="hljs-number"><span class="hljs-number">11</span></span>, <span\n            class="code-string"><span class="code-string">"Moonbrook"</span></span>);<span class="code-comment"><span\n            class="code-comment">//添加一条数据</span></span>\n\t\t<span class="code-built_in">println</span>(<span class="code-built_in">map</span>.<span\n            class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">11</span></span>));<span\n            class="code-comment"><span class="code-comment">//输出第一条数据</span></span>\n\t\t\n\t\t<span class="code-built_in">map</span>.remove(<span class="hljs-number"><span\n            class="hljs-number">11</span></span>);<span class="code-comment"><span class="code-comment">//移除添加的数据</span></span>\n\t\t<span class="code-built_in">println</span>(<span class="code-built_in">map</span>.<span\n            class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">11</span></span>));<span\n            class="code-comment"><span class="code-comment">//输出被移除的数据</span></span>\n\t}\n\t<span class="hljs-function"><span class="code-keyword"><span class="code-keyword">static</span></span> <span\n            class="code-keyword"><span class="code-keyword">private</span></span> <span class="code-keyword">void</span> <span\n            class="code-title"><span class="code-built_in">println</span></span><span class="hljs-params">(<span\n            class="code-type">Object</span> obj)</span></span>{\n\t\t<span class="code-type">System</span>.out.<span class="code-built_in">println</span>(obj);\n\t}\n}</code></pre>\n<p>仔细看代码例子的兄弟应该明白怎么回事了吧。配置文件中&lt;map-store&gt;元素定义了Mapstore的行为，&lt;class-name&gt;定义了当发生数据读写时要调用的存储类，该类需要实现MapStore接口。MapStore接口定义了当对Map进行put、get、remove操作时会被调用实现类的store、load、delete方法，我们可以通过自己的代码来完成对数据库的写入和读取操作。</p>\n<p>MapStore支持Read-Through、Write-Through、Write-Behind模式（不太清楚这几个模式的含义，请看本人的关于他们的介绍：\n\t<a title="Hazelcast缓存模式" href="https://www.chkui.com/article/hazelcast/read_through_write_through_and_write_behind">Hazelcast缓存模式。</a>）。\n</p>\n<p>\n    当我们使用Map::get根据key获取数据时，如果key对应的数据不存在，那么Hazelcast会调用已经注册的Mapstore中的load方法，而在load方法中我们可以中任意位置读取数据，并返回。随后Map会将返回的数据写日自己的缓存，然后返回给调用者。这样就实现了Read-Through模式。</p>\n\n<h3 id="h3-18">write-delay-seconds</h3>\n<p>我们可以使用&lt;write-delay-seconds&gt;来指定Map是使用Write-Through模式还是Write-Behind模式。</p>\n<p><strong><em>&nbsp; </em></strong>&nbsp;当设定&lt;write-delay-seconds&gt;为0时，表示当执行Map::put时立刻调用注册的Mapstore的store方法，直到自定义的代码执行完毕返回后，Map::put方法才会返回，整个过程都会阻塞线程。这样就实现了Write-Through模式。\n</p>\n<p>当设置&lt;write-delay-seconds&gt;大于0时，表示延迟指定的时间后（秒）再异步调用Mapstore::store方法。整个过程不会产生阻塞，数据被添加到Map里后就返回给调用者。这就实现了Write-Behind模式。</p>\n<p>使用什么模式，请根据你的业务要求设置。下面是其他几个参数的含义。</p>\n\n<h3 id="h3-19">write-batch-size</h3>\n<p><span style="color:#FFA500">批量更新参数[0~Integer.MAX_VALUE]</span>。这个参数用于指定当累计多少次更新数据之后再调用Mapstore::store一次性写入数据库。例如设置为50，只有调用50次Map::put方法后，Hazelcast才会去调用一次storeAll，并且传入所有的更新数据。如果运行我上面提供的例子，你会发现MapStoreExample的store和remove方法并没有被调用。\n</p>\n\n<h3 id="h3-20">write-coalescing</h3>\n<p><span style="color:#FFA500">标记是否执行所有更新[true|false]</span>。默认为true。用于标记Mapstore::store是否获取所有的更新。在Write-Behind模式下，在延迟的时间中，可能已经对某个key对应的value值进行了多次更新，若参数设定为true，表示只传递最后一次更新给Mapstore::store(Mapstore::storeAll)。如果设置为false，会将所有的更新传递给Mapstore::storeAll。\n</p>\n\n<h3 id="h3-21">enabled属性</h3>\n<p><span style="color:#FFA500">表示是否启用Mapstore[true|false]</span>。</p>\n\n<h3 id="h3-22">initial-mode属性</h3>\n<p><span style="color:#FFA500">初始化模式[LAZY|EAGER]</span>。默认为LAZY，在此参数下，会对Mapstore执行异步初始化。当设置为“EAGER”时, 初始化过程将被阻塞，直到加载完成。\n</p>\n<p>\n    除了上面的配置，我们可以通过Mapstore::loadAllKeys方法来设定当Map初始化时，要加载的数据。如果loadAllKeys返回null，则不预加载任何数据。因此我们可以在loadAllKeys方法中指定当Map初始化时需要先加载的数据。</p>\n\n<h2 id="h2-4">Map拦截器（Interceptors）</h2>\n<p>\n    我们可以为Map的所有方法添加拦截器，拦截器类似于AOP机制。对某些方法增加拦截器后，当这些方法被调用时，会根据拦截器的配置进入拦截器。拦截器都的代码都是会组赛线程的，也就是说我们我们在拦截器中处理完某些事物后，必须马上返回。因为组赛了线程，拦截器的功能强大，可以对返回值、更新值进行任何修改。</p>\n<p>\n    拦截器采取链式操作，也就是说可以为一个方法增加多个拦截器，这些拦截器会根据添加的次序逐个被调用。Hazelcast会根据拦截器的hashCode()方法来判断是否是同一个拦截器，如果是具有相同的hashcode，则认为是同一个拦截器，不会被添加。因此建议最好根据需要重载hashcode方法，以免重复添加相同的拦截器。</p>\n<p>下面是一个代码的例子，首先是实现了一个拦截器：</p>\n<pre class="java"><code class="language-java"><span class="code-comment"><span class="code-comment">// https://github.com/chkui/hazelcast-demo/blob/master/src/main/java/org/palm/hazelcast/map/interceptor/InterceptorExample.java</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">InterceptorExample</span></span></span><span\n            class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">implements</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">MapInterceptor</span></span></span><span\n            class="hljs-class">, </span><span class="code-title"><span class="hljs-class"><span class="code-title">Serializable</span></span></span><span\n            class="hljs-class"> </span></span>{\n\t<span class="code-keyword"><span class="code-keyword">private</span></span> <span class="code-keyword"><span\n            class="code-keyword">static</span></span> <span class="code-keyword"><span class="code-keyword">final</span></span> <span\n            class="code-keyword"><span class="code-keyword">long</span></span> serialVersionUID = -<span\n            class="hljs-number"><span class="hljs-number">7591859317633144192L</span></span>;\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t <span class="code-comment"><span class="code-comment">/**拦截get。可以返回其他值来替换原有值。返回null将不影响原有操作。 */</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> Object </span><span\n            class="code-title"><span class="hljs-function"><span\n            class="code-title">interceptGet</span></span></span><span class="hljs-params"><span\n            class="hljs-function"><span class="hljs-params">(Object obj)</span></span></span><span\n            class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"get : "</span></span> + obj);\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> obj;\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t <span class="code-comment"><span class="code-comment">/**在get操作执行完毕后被调用。*/</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">afterGet</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object obj)</span></span></span><span class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"after get : "</span></span> + obj);\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="code-comment"><span class="code-comment">/**拦截put。返回的值会设置到map中。返回null时原有的put数据不会发生任何改变。 抛出异常会取消put操作。 */</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> Object </span><span\n            class="code-title"><span class="hljs-function"><span\n            class="code-title">interceptPut</span></span></span><span class="hljs-params"><span\n            class="hljs-function"><span\n            class="hljs-params">(Object oldValue, Object newValue )</span></span></span><span\n            class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"put old value : "</span></span> + oldValue);\n\t\tprinfln(<span class="code-string"><span class="code-string">"put new value : "</span></span> + newValue);\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> newValue;\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t <span class="code-comment"><span class="code-comment">/**在put操作执行完毕后被调用。*/</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">afterPut</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object obj)</span></span></span><span class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"after put : "</span></span> + obj);\n\t}\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="code-comment"><span\n            class="code-comment">/**拦截remove。返回被删除对象或null将继续执行删除。 抛出异常会取消remove操作。 */</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> Object </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">interceptRemove</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object obj)</span></span></span><span class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"remove : "</span></span> + obj);\n\t\t<span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword"><span\n            class="code-keyword">null</span></span>;\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t <span class="code-comment"><span class="code-comment">/**在remove操作执行完毕后被调用。*/</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">afterRemove</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object obj)</span></span></span><span class="hljs-function"> </span></span>{\n\t\tprinfln(<span class="code-string"><span class="code-string">"afrer remove : "</span></span> + obj);\n\t}\n\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">private</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">prinfln</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object obj)</span></span></span></span>{\n\t\tSystem.out.println(obj);\n\t}\n}</code></pre>\n<p>Map拦截器的拦截器需要实现MapInterceptor接口。这些接口提供了针对get、put、remove实现了拦截。然后下面是一个使用的例子：</p>\n<pre class="cs"><code class="language-java"><span class="code-keyword"><span\n        class="code-keyword">public</span></span> <span class="hljs-class"><span class="code-keyword"><span\n        class="code-keyword">class</span></span> <span class="code-title"><span\n        class="code-title">InterceptorDemo</span></span> </span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span\n            class="hljs-params"><span class="hljs-function">(<span\n            class="hljs-params">String[] args</span>)</span></span><span class="hljs-function"> </span></span>{\n\t\tHazelcastInstance ins = Hazelcast.newHazelcastInstance();\n\t\tIMap&lt;Integer, String&gt; imap = ins.getMap(<span class="code-string"><span\n            class="code-string">""</span></span>);\n\t\timap.addInterceptor(<span class="code-keyword"><span class="code-keyword">new</span></span> InterceptorExample());<span\n            class="code-comment"><span class="code-comment">// 添加拦截器</span></span>\n\t\timap.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span\n            class="code-string">"Mei"</span></span>);\n\t\timap.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span\n            class="code-string">"Tracer"</span></span>);\n\t\timap.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span\n            class="code-string">"D.va"</span></span>);\n\t\timap.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span\n            class="code-string">"Mercy"</span></span>);\n\t\t\n\t\timap.<span class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">1</span></span>);\n\t\timap.remove(<span class="hljs-number"><span class="hljs-number">1</span></span>);\n\t\tSystem.<span class="code-keyword">out</span>.println(imap.<span class="code-keyword">get</span>(<span\n            class="hljs-number"><span class="hljs-number">1</span></span>));\n\t}\n}</code></pre>\n<p>\n    我们使用IMap接口来获取map实例。然后使用IMap::addInterceptor方法来增加前面实现的拦截器。随后，所有针对这个Map的get、put、remove都会进入我们设定的拦截器。IMap::removeInterceptor可以用来移除一个拦截器。</p>\n\n<h2 id="h2-5">Map事件监听器</h2>\n<p>\n    除了拦截器，Hazelcast还有监听器。监听器和拦截器的区别在于：拦截器会嵌入到业务流程中去，拦截器可以在处理数据的过程中改变数据和行为。而监听器并不会摄入到处理逻辑中，他只是观察到发生某个事件后，通知我们注册的监听器。下面还是同一个代码的例子说明监听器，先创建一个监听器：</p>\n<pre class="java"><code class="language-java"><span class="code-comment"><span class="code-comment">// https://github.com/chkui/hazelcast-demo/blob/master/src/main/java/org/palm/hazelcast/map/listener/ListenerExample.java</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span\n            class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">ListenerExample</span></span></span><span\n            class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">implements</span></span></span><span\n            class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">EntryAddedListener</span></span></span><span\n            class="hljs-class">&lt;</span><span class="code-title"><span class="hljs-class"><span class="code-title">Integer</span></span></span><span\n            class="hljs-class">, </span><span class="code-title"><span class="hljs-class"><span class="code-title">String</span></span></span><span\n            class="hljs-class">&gt;, </span><span class="code-title"><span class="hljs-class"><span class="code-title">EntryRemovedListener</span></span></span><span\n            class="hljs-class">&lt;</span><span class="code-title"><span class="hljs-class"><span class="code-title">Integer</span></span></span><span\n            class="hljs-class">, </span><span class="code-title"><span class="hljs-class"><span class="code-title">String</span></span></span><span\n            class="hljs-class">&gt;, </span><span class="code-title"><span class="hljs-class"><span class="code-title">EntryUpdatedListener</span></span></span><span\n            class="hljs-class">&lt;</span><span class="code-title"><span class="hljs-class"><span class="code-title">Integer</span></span></span><span\n            class="hljs-class">, </span><span class="code-title"><span class="hljs-class"><span class="code-title">String</span></span></span><span\n            class="hljs-class">&gt; </span></span>{\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">entryUpdated</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(EntryEvent&lt;Integer, String&gt; entry)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span class="code-comment">//监听更新数据</span></span>\n\t\tprint(<span class="code-string"><span\n            class="code-string">"put entry. key = "</span></span> + entry.getKey() + <span class="code-string"><span\n            class="code-string">". value = "</span></span> + entry.getValue());\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">entryRemoved</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(EntryEvent&lt;Integer, String&gt; entry)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span class="code-comment">//监听移除数据</span></span>\n\t\tprint(<span class="code-string"><span class="code-string">"remove entry. key = "</span></span> + entry.getKey() + <span\n            class="code-string"><span class="code-string">". value = "</span></span> + entry.getValue());\n\t}\n\n\t<span class="code-meta"><span class="code-meta">@Override</span></span>\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">entryAdded</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(EntryEvent&lt;Integer, String&gt; entry)</span></span></span><span\n            class="hljs-function"> </span></span>{<span class="code-comment"><span class="code-comment">//监听新增数据</span></span>\n\t\tprint(<span class="code-string"><span\n            class="code-string">"add entry. key = "</span></span> + entry.getKey() + <span class="code-string"><span\n            class="code-string">". value = "</span></span> + entry.getValue());\n\t}\n\t\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">private</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">print</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(Object obj)</span></span></span></span>{\n\t\tSystem.out.println(obj);\n\t}\n}</code></pre>\n<p>一个监听器可以实现多个监听接口，除了例子中的接口，还有EntryEvictedListener（释放单条数据）、MapEvictedListener（清除Map数据）、MapClearedListener（清空Map数据）等。</p>\n<p>至此，Hazelcasl分布式Map的基本功能就介绍完毕了。除了本文介绍的内容，Map还有使用断言监听特定数据、使用分区监听器监听分区变化等功能，这里就不深入展开了，如果你有需要，可以给我留言，我们一起讨论学习。</p>\n<p>希望阅读本文之后，在使用Hazelcast时能对你有所帮助。也是把本文当作工具类API文档随时查阅。</p>\n<p></p>'}};