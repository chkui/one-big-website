exports.ids=[53],exports.modules={315:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h1 id="h1-1">Portals</h1>\n<p>在React 16.x 新增了一个名为“Protals”的特性，直接按照字面意思翻译实在不靠谱。在描述这个特性时，我们还是用官方的英文单词来指定它。<strong><em>Portals</em></strong>的作用简单的说就是为了便于开发“弹窗”、“对话框”、“浮动卡片”、“提示窗”等脱离标准文档流的组件而设定的，用于替换之前的<em><strong>unstable_renderSubtreeIntoContainer。</strong></em>&nbsp;\n</p>\n\n<h2 id="h2-1">15.x之前的时代实现"弹窗"</h2>\n<p>过去没有这个特性的时候，我们使用React绘制“弹窗”之前无非就三种方法：</p>\n<p>1.将弹窗作为一个子元素在组件中直接使用，然后赋予弹窗 <em><strong>{position: fixed&nbsp;，z-index:99}</strong></em>这样的样式，让他漂浮在整个页面应用的最上层并相对与整个浏览器窗口定位。如果你认为fixed能实现所有要求，那么最好把下面的这个页面代码复制到本地运行看看：\n</p>\n<pre class="xml"><code class="language-html xml"><span class="code-meta"><span\n        class="code-meta">&lt;!DOCTYPE html&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">html</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">meta</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n            class="code-tag"><span class="hljs-attr">charset</span></span></span><span class="code-tag">=</span><span\n            class="code-string"><span class="code-tag"><span class="code-string">"utf-8"</span></span></span><span\n            class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">meta</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n            class="code-tag"><span class="hljs-attr">name</span></span></span><span class="code-tag">=</span><span\n            class="code-string"><span class="code-tag"><span class="code-string">"viewport"</span></span></span><span\n            class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span\n            class="hljs-attr">content</span></span></span><span class="code-tag">=</span><span class="code-string"><span\n            class="code-tag"><span class="code-string">"width=device-width"</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>Fixed<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">div</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n        class="code-tag"><span class="hljs-attr">class</span></span></span><span class="code-tag">=</span><span\n        class="code-string"><span class="code-tag"><span class="code-string">"top-div"</span></span></span><span\n        class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">div</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span><span class="code-tag">=</span><span\n            class="code-string"><span class="code-tag"><span class="code-string">"fixed-div"</span></span></span><span\n            class="code-tag">&gt;</span></span>Do I look fixed to you?<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">div</span></span></span><span\n            class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">div</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">style</span></span></span><span class="code-tag">&gt;</span></span><span class="css"><span\n            class="css">\n    </span><span class="code-selector-class"><span class="css"><span class="code-selector-class">.top-div</span></span></span><span\n            class="css"> {\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">width</span></span></span><span class="css">: </span><span class="hljs-number"><span\n            class="css"><span class="hljs-number">300px</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">height</span></span></span><span class="css">: </span><span class="hljs-number"><span\n            class="css"><span class="hljs-number">300px</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">background</span></span></span><span class="css">: coral;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">transform</span></span></span><span class="css">: </span><span class="code-built_in"><span\n            class="css"><span class="code-built_in">translate</span></span></span><span class="css">(100px, 100px);\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">animation</span></span></span><span class="css">: diagonal-loop </span><span\n            class="hljs-number"><span class="css"><span class="hljs-number">1s</span></span></span><span class="css"> infinite alternate;\n    }\n    </span><span class="code-selector-class"><span class="css"><span\n            class="code-selector-class">.fixed-div</span></span></span><span class="css"> {\n        </span><span class="code-attribute"><span class="css"><span class="code-attribute">position</span></span></span><span\n            class="css">: fixed;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">background</span></span></span><span class="css">: </span><span\n            class="code-built_in"><span class="css"><span class="code-built_in">rgba</span></span></span><span\n            class="css">(0, 0, 0, 0.7);\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">width</span></span></span><span class="css">: </span><span class="hljs-number"><span\n            class="css"><span class="hljs-number">100%</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">height</span></span></span><span class="css">: </span><span class="hljs-number"><span\n            class="css"><span class="hljs-number">100%</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span class="code-attribute">top</span></span></span><span\n            class="css">: </span><span class="hljs-number"><span class="css"><span\n            class="hljs-number">100px</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">left</span></span></span><span class="css">: </span><span class="hljs-number"><span\n            class="css"><span class="hljs-number">100px</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">padding</span></span></span><span class="css">: </span><span\n            class="hljs-number"><span class="css"><span class="hljs-number">10px</span></span></span><span class="css">;\n        </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">color</span></span></span><span class="css">: white;\n    }\n    @</span><span class="code-keyword"><span class="css"><span class="code-keyword">keyframes</span></span></span><span\n            class="css"> diagonal-loop {\n        0% {\n            </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">transform</span></span></span><span class="css">: </span><span class="code-built_in"><span\n            class="css"><span class="code-built_in">translate</span></span></span><span class="css">(100px, 100px);\n        }\n        100% {\n            </span><span class="code-attribute"><span class="css"><span\n            class="code-attribute">transform</span></span></span><span class="css">: </span><span class="code-built_in"><span\n            class="css"><span class="code-built_in">translate</span></span></span><span class="css">(200px, 200px);\n        }\n    }\n</span></span><span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span\n            class="code-tag"><span class="code-name">style</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">html</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>除此之外，这种方式处理事件的冒泡也会导致一些问题。</p>\n<p>2.使用<em><strong>unstable_renderSubtreeIntoContainer</strong></em>方法将弹窗组件添加到body中。官方文档明确告诉你了，这玩意是有坑的，使用起来也到处是雷区。</p>\n<p>3.最后一种方式是使用Redux来全局控制，可以在<a href="https://www.chkui.com/article/react/modals_in_react"\n                               rel="nofollow">React中的模式对话框</a>一文了解使用Redux实现对话框的内容。虽然能解决前面2个问题，但是使用 Redux\n    除了多引入一些包之外，这也不是一种很“自然”的实现方式。</p>\n\n<h2 id="h2-2">Protals的使用</h2>\n<p><strong><em>Protals组件</em></strong>的使用方式和普通的React组件并没有太大差异，只不过要用一个新的方法将其包裹起来：</p>\n<pre class="php"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n* <span class="hljs-doctag">@param</span> child 需要展示在Protals中的组件，如&lt;div&gt;child&lt;/div&gt;\n* <span class="hljs-doctag">@param</span> container 组件放置的容器，就是一个Element对象。例如 document.getElementById(\'pop\');\n*/</span></span>\nReactDOM.createPortal(child, container)</code></pre>\n<p>通常情况下，我们需要为某个组件增加子元素都会直接写在render()方法中：</p>\n<pre class="less"><code class="language-javascript"><span class="code-selector-tag">render</span>() {\n  <span class="code-keyword"><span class="code-selector-tag">return</span></span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n      {this<span class="code-selector-class">.props</span><span class="code-selector-class">.children</span>}\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n  );\n}</code></pre>\n<p>而如果是一个 <strong><em>Protals</em></strong> 特性的组件，我们通过下面的过程创建它：</p>\n<pre class="kotlin"><code class="language-javascript">render() {\n  <span class="code-keyword"><span class="code-keyword">return</span></span> ReactDOM.createPortal(\n    <span class="code-keyword"><span class="code-keyword">this</span></span>.props.children,\n    domNode,\n  );\n}</code></pre>\n\n<h2 id="h2-3">Protals的事件传递</h2>\n<p>Protals特性的组件渲染成真实DOM后结构上和虚拟DOM不完全一致，但是其事件流还是像普通的React组件一样可以在父组件中接收并加以处理。所以我们依然可以按照冒泡的方式处理Protals组件的事件。</p>\n<p>看个代码的例子，我们定义两个组件——<em><strong>App</strong></em>、<em><strong>Pop</strong></em>。</p>\n<p><em><strong>App</strong></em>是整个页面的框架，负责将<em><strong>Pop</strong></em>弹窗中输入的内容显示到页面中。<strong><em>React</em></strong>\n    会将弹窗直接添加为<em>&lt;body&gt;</em>的子元素。</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">App</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n    <span class="code-comment"><span class="code-comment">//constructor </span></span>\n    clickHandle() {\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({popShow: <span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>})\n    }\n    submitHandle(value) {\n        <span class="code-keyword"><span\n                class="code-keyword">this</span></span>.setState({message: value, popShow: <span\n            class="hljs-literal"><span class="hljs-literal">false</span></span>})\n    }\n    cancelHandle() {\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({popShow: <span\n            class="hljs-literal"><span class="hljs-literal">false</span></span>})\n    }\n    render() {\n        <span class="code-keyword"><span class="code-keyword">return</span></span> (\n            <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n                <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span><span\n                        class="code-type">Input</span> <span class="code-type">Message</span> : {<span\n                        class="code-keyword">this</span>.state.message}<span class="code-tag">&lt;/<span\n                        class="code-name">p</span>&gt;</span>\n                <span class="code-tag">&lt;<span class="code-name">button</span> <span class="hljs-attr">onClick</span>=<span\n                        class="code-string">{<span class="code-keyword">this</span>.clickHandle}</span>&gt;</span><span\n                        class="code-type">Click</span><span class="code-tag">&lt;/<span class="code-name">button</span>&gt;</span>\n                {<span class="code-keyword">this</span>.state.popShow &amp;&amp; \n                <span class="code-tag">&lt;<span class="code-name"><span\n                        class="code-type">Modal</span></span>&gt;</span>\n                    <span class="code-tag">&lt;<span class="code-name"><span class="code-type">Pop</span></span> <span\n                            class="hljs-attr">onSubmit</span>=<span class="code-string">{<span\n                            class="code-keyword">this</span>.submitHandle}</span> <span\n                            class="hljs-attr">onCancel</span>=<span class="code-string">{<span\n                            class="code-keyword">this</span>.cancelHandle}/</span>&gt;</span>\n                <span class="code-tag">&lt;/<span class="code-name"><span\n                        class="code-type">Modal</span></span>&gt;</span>}\n            <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span>\n        )\n    }\n}</span></code></pre>\n<pre class="javascript"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">Pop</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n    <span class="code-comment"><span class="code-comment">//constructor</span></span>\n    submitHandle() {\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.props.onSubmit(<span\n            class="code-keyword"><span class="code-keyword">this</span></span>.el.value)\n    }\n    render() {\n        <span class="code-keyword"><span class="code-keyword">const</span></span> {onCancel} = <span\n            class="code-keyword"><span class="code-keyword">this</span></span>.props\n        <span class="code-keyword"><span class="code-keyword">return</span></span> createPortal(\n            <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="code-tag"><span\n                    class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span\n                    class="code-tag"><span class="code-name">span</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{onCancel}</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">X</span><span\n                    class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">span</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="code-tag"><span class="xml"><span\n                    class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span\n                    class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">textarea</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">ref</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{ref</span></span></span></span><span class="xml"><span\n                    class="code-tag">=&gt;</span></span></span><span class="xml">this.el=ref}/&gt;\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n                    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{this.submitHandle}</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">submit</span><span\n                    class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{onCancel}</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">cancel</span><span\n                    class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n            </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">,\n            document.getElementById(\'body\'))\n    }\n}</span></span></code></pre>\n<p><span style="color:#FF0000">以上只是示例，已实现的源码在：https://github.com/chkui/ReactProtalExample。你可以执行下面这几步运行，并在浏览器输入http://localhost:8080/看到效果。</span>\n</p>\n<pre class="php"><code class="language-bash">$ git <span class="code-built_in"><span\n        class="code-keyword">clone</span></span> https:<span class="code-comment">//github.com/chkui/ReactProtalExample.git</span>\n$ npm install <span class="code-comment"><span class="code-comment">#按照node_module</span></span>\n$ npm start <span class="code-comment"><span class="code-comment">#运行webpack</span></span></code></pre>\n<p>观察代码我们会发现：实现这个弹窗的效果仅仅需要在旧的React组件编码的方式上增加一层<em><strong>createPortal</strong></em>\n    方法包装即可。其他的处理方式没有任何变化。但是出现弹窗后，观察真实的DOM结构，你会发现弹窗是出现在<em>&lt;body /&gt;</em>标签下，脱离了React的树形结构：</p>\n<pre class="javascript"><code class="language-html xml"><span class="code-tag">&lt;<span\n        class="code-name">body</span> <span class="hljs-attr">id</span>=<span class="code-string"><span\n        class="code-string">"body"</span></span>&gt;</span>\n    <span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span\n            class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">id</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"root"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"app"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">p</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"message"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">Input Message : Input</span><span\n            class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">p</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"button"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">Click</span><span class="code-tag"><span class="xml"><span\n            class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span>\n    <span class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr"><span class="hljs-class"><span\n            class="code-keyword">class</span></span></span>=<span class="code-string"><span\n            class="code-string">"modal"</span></span>&gt;</span> <span class="code-comment"><span class="xml"><span\n            class="code-comment">&lt;!-- 弹窗的DOM --&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"mask"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"pop"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"title"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">span</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"close"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">X</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">span</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="code-tag"><span class="xml"><span\n            class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">div</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">textarea</span></span></span></span><span class="xml"><span\n            class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"text"</span></span></span></span><span class="xml"><span\n            class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">placeholder</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"input message"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">textarea</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"pop-bottom"</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n             </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"button pop-btn"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">submit</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n             </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">class</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"button pop-btn"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">cancel</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n         </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span>\n<span class="code-tag">&lt;<span class="hljs-regexp">/</span><span class="code-name"><span\n        class="hljs-regexp">body</span></span><span class="hljs-regexp">&gt;</span></span></code></pre>\n\n<h1 id="h1-2">Error Boundaries</h1>\n<p>在 <strong>16.x</strong> 版本之前，React并没有对异常有什么处理（<strong><em>15.x&nbsp;</em></strong>增加的 <strong><em>unstable_handleError</em></strong>\n    满地是坑），都是让使用React的开发人员按照标准JavaScript的方式自行处理可能会出现的异常，这会导致某些由底层渲染过程引起的异常很难定位。此外，由于一个React组件常常伴随多个生命周期方法（lifecycle\n    methods），如果要全面的去处理异常，会导致代码结构越来越差。</p>\n<p>为了解决这些坑，最新版本的React提供了一个优雅处理渲染过程异常的机制——&nbsp;<strong><em>Error Boundaries</em></strong>&nbsp;。同时，随着 Error Boundaries\n    的推出，React也调整了一些异常处理的的行为和日志输出的内容。</p>\n\n<h2 id="h2-4">Error Boundaries特点</h2>\n<p>特点1：通过一个生命周期方法捕获子组件的所有异常：</p>\n<pre class="tcl"><code class="language-javascript"><span class="code-comment">/**\n*@param <span class="code-keyword">error</span>: 被抛出的异常\n*@param <span class="code-keyword">info</span>: 包含异常堆栈列表的对象\n**/</span>\ncomponentDidCatch(<span class="code-keyword">error</span>, <span class="code-keyword">info</span>)</code></pre>\n<p>特点2：只能捕获子组件的异常，而不能捕获自身出现的异常。</p>\n<p>特点3：只能捕获渲染方法，和生命周日方法中出现的异常。<span style="color:#FF0000">而事件方法中的异常、异步代码中的异常（例如setTimeoout、一些网络请求方法）、服务端渲染时出现的异常以及componentDidCatch方法中出现的异常是无法被捕获的</span>。如果需要捕获这些异常，只能使用<em><strong>JavaScript</strong></em>的<strong><em>try/catch</em></strong>语法。\n</p>\n\n<h2 id="h2-5">异常处理行为变更</h2>\n<p>16.x 之后的React的异常处理较之前有一些变动。当组件在使用的过程中出现某个异常没有被任何&nbsp;<em><strong>componentDidCatch</strong></em>&nbsp;方法捕获，那么\n    <strong><em>React</em></strong> 将会卸载掉整个 虚拟Dom树。这样的结果是任何未处理的异常都导致用户看到一个空白页面。官方的原文——“<strong>As of React 16, errors\n        that were not caught by any error boundary will result in unmounting of the whole React component\n        tree”。</strong></p>\n<p>\n    这样的目的是尽可能保证页面完整性，避免由于页面的错误而导致业务逻辑错误。所以React升级到16.x版本后，至少在最顶层的根节点组件实现&nbsp;<em><strong>componentDidCatch </strong></em>方法并附加一个&nbsp;错误提示的简单组件。如果根节点的组件需要处理的事物太复杂，最好多加一层包装组件仅处理异常。\n</p>\n<p>有了&nbsp;<em><strong>componentDidCatch</strong></em>&nbsp;之后，我们可以更细粒度的按照模块或者业务来控制异常。还可以专门设定一个服务器接口来收集页面在客户端运行时出现的异常。\n</p>\n\n<h2 id="h2-6">优化异常堆栈</h2>\n<p>新版本的React优化了异常输出，能够更清晰的跟踪到出错的位置。异常日志输出的内容将会比之前的React丰富很多，除了输出JavaScript的异常信息，还会清晰的定位到错误出现的组件：</p>\n<p></p>\n<p>如果你的项目使用最新版本的&nbsp;<a href="https://github.com/facebookincubator/create-react-app"\n                         rel="nofollow">create-react-app</a>&nbsp;创建的，那么这一项功能已经存在了。如果没使用&nbsp;Create React App，那么可以通过一个\n    Babel 的插件添加这个功能：</p>\n<pre class="sql"><code class="language-bash">$ npm <span class="code-keyword">install</span> <span class="code-comment">--save-dev babel-plugin-transform-react-jsx-source</span></code></pre>\n<p>然后在对应的配置（<em>.babelrc</em>、<em>webpack的plugins</em>等）中添加：</p>\n<pre class="json"><code class="language-json">{\n  <span class="hljs-attr"><span class="hljs-attr">"plugins"</span></span>: [<span class="code-string"><span\n            class="code-string">"transform-react-jsx-source"</span></span>]\n}</code></pre>\n<p><span style="color:#FF0000">切记这项功能仅仅用于开发或测试环境，切勿用于生产环境。</span>某些浏览器可能不支持&nbsp;<a\n        href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name"\n        rel="nofollow"><code>Function.name</code></a>&nbsp;&nbsp;的属性，可能无法正确显示组件名称（例如所有版本的IE）。可以通过使用一些&nbsp;polyfill\n    来解决这个问题，比如这个 <a href="https://github.com/JamesMGreene/Function.name" rel="nofollow">function-name工具</a>&nbsp;。</p>\n\n<h2 id="h2-7">代码实例</h2>\n<p>最后是一个代码的例子。请按照以下步骤到github上clone下来运行。</p>\n<pre class="bash"><code class="language-bash">$ git <span class="code-built_in"><span class="code-built_in">clone</span></span> https://github.com/chkui/ErrorBoundariesExample.git <span\n        class="code-comment"><span class="code-comment">#下载代码</span></span>\n$ npm install <span class="code-comment"><span class="code-comment">#安装node_module</span></span>\n$ npm start <span class="code-comment"><span class="code-comment">#安装完后webpakc启动</span></span></code></pre>\n<p>例子值得关注的就几个点。</p>\n<p>1.通过 <strong><em>webpack</em></strong> 的方式引入了babel的源码映射插件用以定位异常出现的位置。</p>\n<pre class="gradle"><code class="language-javascript"><span class="code-built_in">module</span>: {\n        rules: [{\n            test: <span class="hljs-regexp"><span class="hljs-regexp">/\\.js$/</span></span>,\n            use: [{\n                loader: <span class="code-string"><span class="code-string">\'babel-loader\'</span></span>,\n                <span class="code-keyword">options</span>: {\n                    presets: [<span class="code-string"><span class="code-string">\'es2015\'</span></span>, <span\n            class="code-string"><span class="code-string">\'stage-0\'</span></span>, <span class="code-string"><span\n            class="code-string">\'react\'</span></span>],\n                    plugins: [<span class="code-string"><span\n            class="code-string">\'transform-react-jsx-source\'</span></span>], <span class="code-comment"><span\n            class="code-comment">//添加插件</span></span>\n                }\n            }],\n            <span class="code-keyword">exclude</span>: <span class="hljs-regexp"><span class="hljs-regexp">/node_modules/</span></span>\n        }]\n    },</code></pre>\n<p>\n    2.定义了四个组件——<strong><em>App</em></strong>、<strong><em>Parent</em></strong>、<strong><em>Child</em></strong>、<strong><em>ErrorTip</em></strong>，分别是入口组件、父组件、子组件和捕获到异常时用来提示的组件。\n</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">App</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n    <span class="code-comment"><span class="code-comment">//constructor</span></span>\n    componentDidCatch(error, info) {\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({error: <span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>}) <span class="code-comment"><span\n            class="code-comment">//处理子组件的异常</span></span>\n    }\n    render() {\n        <span class="code-keyword"><span class="code-keyword">return</span></span> (<span class="xml"><span\n            class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr">className</span>=<span\n            class="code-string"><span class="code-string">"app"</span></span>&gt;</span>\n                <span class="code-tag">&lt;<span class="code-name">h2</span>&gt;</span><span\n                class="code-type">Example</span><span class="code-tag">&lt;/<span class="code-name">h2</span>&gt;</span>\n                {<span class="code-keyword">this</span>.state.error ? (<span class="code-tag">&lt;<span\n                class="code-name"><span class="code-type">ErrorTip</span></span> /&gt;</span>) : (<span\n                class="code-tag">&lt;<span class="code-name"><span class="code-type">Parent</span></span>/&gt;</span>)}\n            <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>)\n    }\n}\n</code></pre>\n<pre class="javascript"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">Parent</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n    <span class="code-comment"><span class="code-comment">//constructor</span></span>\n    clickHandle() {\n        <span class="code-keyword"><span class="code-keyword">try</span></span> {\n            <span class="code-keyword"><span class="code-keyword">throw</span></span> <span class="code-keyword"><span\n            class="code-keyword">new</span></span> <span class="code-built_in"><span class="code-built_in">Error</span></span>(<span\n            class="code-string"><span class="code-string">\'event error\'</span></span>)\n        } <span class="code-keyword"><span class="code-keyword">catch</span></span> (e) {\n            <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({myError: <span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>})\n        }\n    }\n    childErrorClickHandle(){\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({childError:<span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>})\n    }\n    componentWillUpdate(nextProps, nextState) {\n        <span class="code-keyword"><span class="code-keyword">if</span></span> (nextState.myError) {\n            <span class="code-keyword"><span class="code-keyword">throw</span></span> <span class="code-keyword"><span\n            class="code-keyword">new</span></span> <span class="code-built_in"><span class="code-built_in">Error</span></span>(<span\n            class="code-string"><span class="code-string">\'Error\'</span></span>)\n        }\n    }\n    componentDidCatch(error, info) {\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.setState({catchError: <span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>})\n    }\n    render() {\n        <span class="code-keyword"><span class="code-keyword">return</span></span> (\n            <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">className</span></span></span></span><span\n                    class="xml"><span class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">"box"</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">p</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n                    class="xml">Parent</span><span class="code-tag"><span class="xml"><span\n                    class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span\n                    class="code-tag"><span class="code-name">p</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{this.clickHandle}</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span\n                    class="xml">throw parent error</span><span class="code-tag"><span class="xml"><span\n                    class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span\n                    class="code-tag"><span class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span\n                    class="code-string">{this.childErrorClickHandle}</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">throw child error</span><span\n                    class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">button</span></span></span></span><span class="xml"><span\n                    class="code-tag">&gt;</span></span></span><span class="xml">\n                {this.state.catchError ? (</span><span class="code-tag"><span class="xml"><span\n                    class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span\n                    class="code-name">ErrorTip</span></span></span></span><span class="xml"><span\n                    class="code-tag">/&gt;</span></span></span><span class="xml">):(</span><span class="code-tag"><span\n                    class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span\n                    class="code-tag"><span class="code-name">Child</span></span></span></span><span class="xml"><span\n                    class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n                    class="code-tag"><span class="hljs-attr">error</span></span></span></span><span class="xml"><span\n                    class="code-tag">=</span></span><span class="code-string"><span class="xml"><span\n                    class="code-tag"><span class="code-string">{this.state.childError}/</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">)}\n            </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n                    class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n                    class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n        )\n    }\n}</span></span></code></pre>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">Child</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span></span>{\n    <span class="code-comment"><span class="code-comment">//constructor</span></span>\n    componentWillReceiveProps(nextProps){\n        <span class="code-keyword"><span class="code-keyword">if</span></span>(nextProps.error){<span\n            class="code-keyword"><span class="code-keyword">throw</span></span> <span class="code-keyword"><span\n            class="code-keyword">new</span></span> <span class="code-built_in"><span\n            class="code-type">Error</span></span>(<span class="code-string"><span class="hljs-symbol">\'child</span> error\'</span>)}\n    }\n    render(){\n        <span class="code-keyword"><span class="code-keyword">return</span></span> (<span class="xml"><span\n            class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr">className</span>=<span\n            class="code-string"><span class="code-string">"box"</span></span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span><span\n                class="code-type">Child</span><span class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>)\n    }\n}</code></pre>\n<p>\n    <em><strong>Child</strong></em>抛出的异常会被<strong><em>Parent</em></strong>组件处理、<em><strong>Parent</strong></em>组件抛出的异常会被<strong><em>App</em></strong>组件处理，组件无法捕获自生出现的异常。\n</p>\n<p>最后，由于16.x版本提供了componentDidCatch的功能，所以将15.x的unstable_handleError特性取消调了，如果需要进行升级的可以去 <a\n        href="https://github.com/reactjs/react-codemod#error-boundaries" rel="nofollow">这里</a> 下载并使用升级工具。</p>'}};