webpackJsonp([3],{332:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>本文将一点一滴的累计记录Java中的一些细节知识。不只是加以说明，而是所有的细节都找到来源，以官方文档、知名社区的介绍为主。</p>\n<h2 id="h2-1"><strong>StringTokenizer和String.split</strong></h2>\n<pre class="gradle"><code class="gradle">&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-comment"><span class="code-comment">//Use&nbsp;StringTokenizer&nbsp;</span></span>\n&nbsp;&nbsp;&nbsp;&nbsp;StringTokenizer&nbsp;st&nbsp;=&nbsp;<span class="code-keyword"><span\n            class="code-keyword">new</span></span>&nbsp;StringTokenizer(<span class="code-string"><span\n            class="code-string">"this&nbsp;is&nbsp;a&nbsp;test"</span></span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-keyword"><span class="code-keyword">while</span></span>&nbsp;(st.hasMoreTokens())&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.<span class="code-keyword"><span\n            class="code-keyword">println</span></span>(st.nextToken());\n&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>\n<pre class="javascript"><code class="javascript">&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-comment"><span\n        class="code-comment">//Use&nbsp;split</span></span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-built_in"><span class="code-built_in">String</span></span>[]&nbsp;results&nbsp;=&nbsp;<span\n            class="code-string"><span class="code-string">"this&nbsp;is&nbsp;a&nbsp;test"</span></span>.split(<span\n            class="code-string"><span class="code-string">"\\\\s"</span></span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span class="code-keyword"><span class="code-keyword">for</span></span>&nbsp;(<span\n            class="code-built_in"><span class="code-built_in">String</span></span>&nbsp;result：results){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result);\n&nbsp;&nbsp;&nbsp;&nbsp;}</code></pre>\n<p></p>\n<p>关于StringTokenizer和String.split的差异说法很多。官方文档<a\n        href="http://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html有定型说明：" rel="nofollow">http://docs.oracle.com/javase/6/docs/api/java/util/StringTokenizer.html</a>&nbsp;有定性说明（附注：最新的JDK8\n    API文档中也是相同的说明）。</p>\n<blockquote>\n    <p><span style="font-size:11px"><span style="font-family:微软雅黑,microsoft yahei">StringTokenizer</span><span\n            style="background-color:rgb(255, 255, 255); font-family:微软雅黑,microsoft yahei">&nbsp;is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the&nbsp;</span><span\n            style="font-family:微软雅黑,microsoft yahei">split</span><span\n            style="background-color:rgb(255, 255, 255); font-family:微软雅黑,microsoft yahei">&nbsp;method of&nbsp;</span><span\n            style="font-family:微软雅黑,microsoft yahei">String</span><span\n            style="background-color:rgb(255, 255, 255); font-family:微软雅黑,microsoft yahei">&nbsp;or the java.util.regex package instead.</span></span>\n    </p>\n</blockquote>\n<p>大意是StringTokenizer是一个历史遗留类，为了保证向后兼容性而保留这个类。推荐在新的代码中使用split或regex替换。</p>\n<p>至于网上的测评资料说<strong>StringTokenizer比<strong>String.split</strong></strong>效率更高，由于没有亲测就不妄加评论了。作为项目管理者，从风险和可靠性的角度考虑，在项目规范和代码review的过程中，还是以官方文档为准。\n</p>\n<h2 id="h2-2"><strong>transient和volatile关键词的使用</strong></h2>\n<pre class="java"><code class="java"><span class="code-keyword"><span class="code-keyword">transient</span></span>&nbsp;<span\n        class="code-keyword"><span class="code-keyword">volatile</span></span>&nbsp;Set&lt;K&gt;&nbsp;keySet&nbsp;=&nbsp;<span\n        class="code-keyword"><span class="code-keyword">null</span></span>;\n<span class="code-keyword"><span class="code-keyword">transient</span></span>&nbsp;<span class="code-keyword"><span\n            class="code-keyword">volatile</span></span>&nbsp;Collection&lt;V&gt;&nbsp;values&nbsp;=&nbsp;<span\n            class="code-keyword"><span class="code-keyword">null</span></span>;</code></pre>\n<p>transient是变量修饰符，表明该字段不是对象持久状态的一部分，储存的时候不用储存，比如序列化这个对象时，该字段是不会储存的。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;volatile也是变量修饰符，只能用来修饰变量。volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。&nbsp;而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。<br>\n    在此解释一下Java的内存机制：<br>\n    Java使用一个主内存来保存变量当前值，而每个线程则有其独立的工作内存。线程访问变量的时候会将变量的值拷贝到自己的工作内存中，这样，当线程对自己工作内存中的变量进行操作之后，就造成了工作内存中的变量拷贝的值与主内存中的变量值不同。<br>\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java语言规范中指出：为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比。这样当多个线程同时与某个对象交互时，就必须要注意到要让线程及时地得到共享成员变量的变化。而volatile关键字就是提示VM：对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。<br>\n    使用建议：在两个或者更多的线程访问的成员变量上使用volatile。当要访问的变量已在synchronized代码块中，或者为常量时，不必使用。由于使用volatile屏蔽掉了VM中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字。\n</p>'},338:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">安装</h2>\n\n<h3 id="h3-1">安装SDKMAN</h3>\n<p>Gradle在安装之前可以选择很多安装方式，这里选择SDKMAN。其他方式见<a href="https://gradle.org/install/#install" rel="nofollow">安装说明</a>。</p>\n<p>linux安装SDKMAN，分别执行：</p>\n<pre><code class="bash"><span class="code-comment"># 下载安装执行</span>\n$ curl -s <span class="code-string">"https://get.sdkman.io"</span> | bash\n<span class="code-comment"># 自行设置</span>\n$ <span class="code-built_in">source</span> <span class="code-string">"<span class="code-variable">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span></code></pre>\n<p>安装结果测试。</p>\n<p>输入：</p>\n<pre><code class="bash">$ sdk version </code></pre>\n<p>成功安装会输出：</p>\n<pre><code class="bash">==== BROADCAST =================================================================\n* 02/07/18: Kscript 2.4.5 released on SDKMAN! <span class="code-comment">#kscript</span>\n* 28/06/18: Micronaut 1.0.0.M2 released on SDKMAN! <span class="code-comment">#micronautfw</span>\n* 27/06/18: Infrastructor 0.2.0 rolling out. With stronger encryption and new task progress UI.\n================================================================================\n\nSDKMAN 5.6.4+305</code></pre>\n\n<h3 id="h3-2">安装Gradle</h3>\n<p>Gradle需要JDK7以上才能运行，请先使用 <strong><em>java -version</em></strong> 命令确定环境。&nbsp;</p>\n<p>使用SDKMAN安装Gradle：</p>\n<pre><code class="bash"><span class="code-comment"># 4.8.1是当前gradle的版本，根据需要调整</span>\n$ sdk install gradle 4.8.1</code></pre>\n<p>安装完成后输入gradle -v检查安装结果：</p>\n<pre><code class="bash">$ gradle -v\n------------------------------------------------------------\nGradle 4.8.1\n------------------------------------------------------------</code></pre>\n\n<h3 id="h3-3">Gradle基础要点知识</h3>\n<ul>\n    <li>一个Gradle文件（例如build.gradle）视为一个project。在Gradle的项目组织中就2个层级——Project和Task。</li>\n    <li>在Gradle中有3个重要的概念Project、Plug、Task。三者的关系：Project就是一个容器，里面可以放置各种类型的Task，Plug是一堆Task的集合。</li>\n    <li>Gradle中所有的功能都是以一个Task实现的，包括Jar包的依赖。</li>\n    <li>Properties：Project和Task都有自己的属性（Properties）。Project级别的属性可以设置，也可以通过外部传入。</li>\n</ul>\n\n<h3 id="h3-4">一个配置案例</h3>\n<pre><code class="groovy cs"><span class="code-comment">/**\nbuild.gradle\n这是一个使用 gradle init --type java-application创建的Gradle Project，进行了一些修改\n整个文件的范围都是一个Project。\n**/</span>\n<span class="code-comment">// ---------------------------------------------------------------------</span>\n<span class="code-comment">// 引入预设的Plug</span>\n<span class="code-comment">// 一个plug中会包含多个Task</span>\n<span class="code-comment">// plugins是Project的一个方法</span>\n<span class="code-comment">// 里面的id实际上也是一个方法。</span>\nplugins {\n    id <span class="code-string">\'java\'</span>\n    id <span class="code-string">\'application\'</span>\n}\n\n<span class="code-comment">// 资源路径的设置参数。用于java plug中的task</span>\n<span class="code-comment">// Gradle的资源路径和Maven的几乎一样，也可以单独配置</span>\nsourceSets {\n   main {\n      java {\n         srcDir <span class="code-string">\'src/main/java\'</span>\n      }\n      resources {\n         srcDir <span class="code-string">\'src/main/resources\'</span>\n      }\n   }\n}\n<span class="code-comment">//-----------------------------------</span>\n<span class="code-comment">/**\n如果不设置，资源路径默认为：\nsrc {\n   main{\n      java\n      res\n   }\n   test{\n      java\n      res\n   }\n}\n**/</span>\n<span class="code-comment">//-----------------------------------</span>\n\n<span class="code-comment">// mainClassName可以理解为一个变量</span>\n<span class="code-comment">// 定义这个程序的Main Class，实际上这也是在设定一个Project的属性</span>\nmainClassName = <span class="code-string">\'App\'</span>\n\n<span class="code-comment">//预设一个用于装载结构的类，Gradle使用groovy语法</span>\n<span class="code-keyword">class</span> <span class="code-title">GroupAndVersion</span> {\n\tString <span class="code-keyword">group</span>\n\tString version\n}\n\n<span class="code-comment">// 向project添加一个名为“spring”的属性，属性的值是一个GroupAndVersion的一个实例。</span>\n<span class="code-comment">// ext是Project的一个方法，作用就是添加一个属性。</span>\next {\n\tspring = <span class="code-keyword">new</span> GroupAndVersion(<span class="code-keyword">group</span>:<span\n            class="code-string">\'org.springframework\'</span>, version:<span class="code-string">\'5.0.7.RELEASE\'</span>)\n}\n\n<span class="code-comment">// dependencies 是由某个plug中的预设的“方法”，</span>\n<span class="code-comment">// Gradle是groovy语法，这里就是执行Project.dependencies方法</span>\n<span class="code-comment">// Plug中可以用project.extensions.create扩展Project中的定义方法</span>\ndependencies {\n    <span class="code-comment">//compile表示引入包的执行域</span>\n    compile <span class="code-string">\'com.google.guava:guava:23.0\'</span>\n\n    <span class="code-comment">//使用定义好的属性引入包</span>\n\tcompile <span class="code-keyword">group</span>: spring.<span class="code-keyword">group</span>, name: <span\n            class="code-string">\'spring-core\'</span>, version: spring.version\n\tcompile <span class="code-keyword">group</span>: spring.<span class="code-keyword">group</span>, name: <span\n            class="code-string">\'spring-beans\'</span>, version: spring.version\n\tcompile <span class="code-keyword">group</span>: spring.<span class="code-keyword">group</span>, name: <span\n            class="code-string">\'spring-context\'</span>, version: spring.version\n\n    testCompile <span class="code-string">\'junit:junit:4.12\'</span>\n}\n\n<span class="code-comment">// repositories与dependencies一样的性质，同样会被用于某个task</span>\n<span class="code-comment">// repositories用于指定依赖仓库</span>\nrepositories {\n    jcenter()\n}\n\n<span class="code-comment">// 自定义的一个任务，用于呈现当前依赖包的物理地址</span>\ntask show &lt;&lt; {\n\tprintln configurations.compile.asPath\n}</code></pre>\n<p>配置文件对应的工程结构：</p>\n<pre><code class="bash">project\n--bin IDE动态编译的文件（Eclipse）\n----main\n----<span class="code-built_in">test</span>\n--build 运行gradle build命令生成的文件\n---- classes Java 工程目录对应的.class文件\n---- distributions 打包之后的压缩包\n---- lib 打包之后的jar\n---- report 测试报告\n---- scripts 打包之后的启动脚本\n---- <span class="code-built_in">test</span>-result 测试结果\n---- tmp 临时文件，比如会在打包jar之前临时存放MANIFEST.MF\n--gradle gradle执行相关的文件，比如gradle-wrapper\n--src 源码和资源\n----main\n----text\n--build.gradle\n--gradlew\n--settings.gradle</code></pre>\n\n<h3 id="h3-5">设置仓库源</h3>\n<p>默认情况下Gradle会使用Maven或Ivy的中央仓库，在当前用户的${home}.gradle文件下新建一个init.gradle文件，然后写入：</p>\n<pre><code class="groovy ruby">allprojects{\n  repositories {\n    <span class="hljs-function"><span class="code-keyword">def</span> <span class="code-title">REPOSITORY_URL</span> = \'<span\n            class="code-title">http</span>:<span class="code-title">/</span><span class="code-title">/</span><span\n            class="code-title">maven</span>.<span class="code-title">aliyun</span>.<span\n            class="code-title">com</span><span class="code-title">/</span><span class="code-title">nexus</span><span\n            class="code-title">/</span><span class="code-title">content</span><span class="code-title">/</span><span\n            class="code-title">groups</span><span class="code-title">/</span><span class="code-title">public</span><span\n            class="code-title">/</span>\'</span>\n      all { ArtifactRepository repo -&gt;\n        <span class="code-keyword">if</span>(repo instanceof MavenArtifactRepository){\n          <span class="hljs-function"><span class="code-keyword">def</span> <span class="code-title">url</span> = <span\n                  class="code-title">repo</span>.<span class="code-title">url</span>.<span\n                  class="code-title">toString</span><span class="hljs-params">()</span></span>\n          <span class="code-keyword">if</span> (url.startsWith(<span class="code-string">\'https://repo1.maven.org/maven2\'</span>) <span\n            class="hljs-params">||</span> url.startsWith(<span class="code-string">\'https://jcenter.bintray.com/\'</span>)) {\n            project.logger.lifecycle <span\n            class="code-string">"Repository ${repo.url} replaced by $REPOSITORY_URL."</span>\n            remove repo\n          }\n       }\n    }\n    maven {\n      url REPOSITORY_URL\n    }\n  }\n}</code></pre>\n<p>这样链接的仓库会执行国内的阿里镜像。</p>\n\n<h3 id="h3-6">快速初始化项目</h3>\n<p>Gradle提供了初始化各自类型项目的命令：</p>\n<pre><code class="bash">$ gradle init --<span class="code-built_in">type</span> &lt;name&gt;\n<span class="code-comment"># &lt;name&gt;取以下值</span>\n<span class="code-comment"># java-application java应用程序</span>\n<span class="code-comment"># java-library jar包</span>\n<span class="code-comment"># scala-library scala包</span>\n<span class="code-comment"># groovy-library groovy包</span>\n<span class="code-comment"># basic 基本工程</span>\n<span class="code-comment"># 配置出来的工程结构都可以在后期通过修改build.gradle修改</span></code></pre>\n<p></p>'},391:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>实际上Ioc容器中的大量功能都是通过后置处理器实现的，这里介绍几个主要的处理器。</p>\n<h3 id="h3-1">RequiredAnnotationBeanPostProcessor</h3>\n<p>\n    官方的一些功能就是用后置处理器的方式实现的，例如RequiredAnnotationBeanPostProcessor，它用于处理@Required注解。当我们一个Setter方法加入@Required后，表示必须设置参数，如果未设置则抛出BeanInitializationException异常。</p>\n<p><strong>使用方法1</strong>，直接添加一个Bean：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span\n        class="hljs-attr">class</span>=<span class="code-string">"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"</span> /&gt;</span>\n<span class="code-comment">&lt;!-- 其他bean --&gt;</span></code></pre>\n<p>这相当于直接添加一个后置处理器，他会检查所有的被@Required标注的Setter方法。</p>\n<p><strong>使用方法2</strong>，设置context：</p>\n<pre><code class="xml"><span class="code-comment">&lt;!-- 如果使用了以下2个context级别的标签，则会启用RequiredAnnotationBeanPostProcessor的功能 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">context:annotation-config</span> /&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">context:component-scan</span> /&gt;</span></code></pre>\n<p><strong>使用技巧1</strong>，修改扫描的注解。处理器默认会识别@Required注解，但是可以通过RequiredAnnotationBeanPostProcessor::setRequiredAnnotationType修改生效的注解，例如：\n</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span\n        class="hljs-attr">class</span>=<span class="code-string">"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"</span>&gt;</span>\n   <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n           class="code-string">"requiredAnnotationType"</span> <span class="hljs-attr">value</span>=<span\n           class="code-string">"x.y.Require"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>\n<pre><code class="java"><span class="code-keyword">package</span> x.y;\n\n<span class="code-meta">@Target</span>(ElementType.METHOD)\n<span class="code-meta">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class="code-keyword">public</span> <span class="code-meta">@interface</span> Require {}</code></pre>\n<p>使用技巧2，告知RequiredAnnotationBeanPostProcessor不处理某些Bean方法：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span\n        class="hljs-attr">class</span>=<span class="code-string">"x.y.A"</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">meta</span>  <span class="hljs-attr">key</span>=<span\n            class="code-string">"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.skipRequiredCheck"</span> <span\n            class="hljs-attr">value</span>=<span class="code-string">"true"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>\n\n<h3 id="h3-2">AutowiredAnnotationBeanPostProcessor</h3>\n<p>这个后置处理器在3.x之后使用Spring框架的系统几乎都会使用，就是他在处理大名鼎鼎的@Autowired和@Value注解。此外他也支持JSR-330中的@Inject注解。当我们使用&lt;context:annotation-config\n    /&gt;<br> 或&lt;context:component-scan /&gt;时，IoC容器也会启用这个功能。</p>\n<p>\n    可以通过setAutowiredAnnotationType、setAutowiredAnnotationTypes方法设定对应的注解，可以通过setRequiredParameterName来设置@Autowired中的属性方法：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span\n        class="hljs-attr">class</span>=<span class="code-string">"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"</span>&gt;</span>\n   <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n           class="code-string">"autowiredAnnotationType"</span> <span class="hljs-attr">value</span>=<span\n           class="code-string">"x.y.MyInjectAnnotation"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>\n\n<h3 id="h3-3">CommonAnnotationBeanPostProcessor</h3>\n<p>\n    这个处理器继承InitDestroyAnnotationBeanPostProcessor实现JSR-250的@PostConstruct和@PreDestroy的处理，此外还支持@Resource注解。JSR-250和Resouce貌似没有什么太直接的关系，所以被命名为Common表示这是一个大杂烩一般的存在。同样使用annotation-config和component-scan会被自动启用（因为都是用于处理注解的）。</p>\n<p>同样也有initAnnotationType、destroyAnnotationType等Setter方法来设置自定义注解。</p>\n\n<h3 id="h3-4">InitDestroyAnnotationBeanPostProcessor</h3>\n<p>处理Bean的生命周期方法以及资源数据注入，CommonAnnotationBeanPostProcessor继承自它。</p>'},395:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">条件概率</h2>\n<p>事物A独立发生的概率为<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(A)">，事物B独立发生的概率为<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(B)">，那么有：</p>\n<p><img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(A%7CB)">表示事物B发生之后事物A发生的概率；</p>\n<p><img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(B%7CA)">表示事物A发生之后事物B发生的概率；</p>\n\n<h2 id="h2-2">全概率</h2>\n<p>我们可以将公式写成全量的形式：</p>\n<p><img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=B_k(k%3D1%2C2%2C3...%2Cn)">表示全量相互排斥且性质关联的事物，即：\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=B_i%5Ccap%20B_j%3D%5Coslash%20(%E7%A9%BA%E9%9B%86)">，<img\n        alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=B_1%5Ccup%20B_2%20%5Ccup%20.....B_i%20%3D%20%5COmega%20(%E5%85%A8%E9%9B%86%E7%9A%84%E5%AD%90%E9%9B%86)">\n</p>\n<p>那么可以得到</p>\n<p><img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(A)%3D%5Csum_j%5EiP(B_j)P(A%7CB_j)">,这就是全概率公式。\n</p>\n<p>全概率公式的意义在于：无法知道一个事物独立发生的概率，但是我们可以将其在各种条件下发生的概率进行累加获得。</p>\n\n<h3 id="h3-1">全概率的例子</h3>\n<p>\n    例1，已知某种疾病的发病率是0.001，即1000人中会有1个人得病。现有一种试剂可以检验患者是否得病，它的准确率是0.99，即在患者确实得病的情况下，它有99%的可能呈现阳性。它的误报率是5%，即在患者没有得病的情况下，它有5%的可能呈现阳性。一个人检测为阳性的概率是多少。</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E8%AE%BEP(A)%3D0.001%E8%A1%A8%E7%A4%BA%E5%8F%91%E7%97%85%E7%8E%87%EF%BC%8C%E5%88%99P(%5Cbar%7BA%7D%20)%3D0.999%E8%A1%A8%E7%A4%BA%E4%B8%8D%E5%8F%91%E7%97%85%E7%8E%87%E3%80%82P(B)%E8%A1%A8%E7%A4%BA%E6%A3%80%E6%B5%8B%E4%B8%BA%E9%98%B3%E6%80%A7%E7%9A%84%E6%A6%82%E7%8E%87%E3%80%82%E6%89%80%E4%BB%A5%EF%BC%9A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(B)%3DP(A)P(B%7CA)%20%2B%20P(%5Cbar%7BA%7D)P(B%7C%5Cbar%7BA%7D)%EF%BC%8C%E4%B8%94P(B%7CA)%3D0.99%2CP(B%7C%5Cbar%7BA%7D)%3D0.05%2C%E6%89%80%E4%BB%A5">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(B)%3D0.001%C3%970.99%20%2B%200.999%C3%970.05%3D0.05094"></p>\n<p>例2，袋子中50个球，20个黄球，30个白球。2个人一次从袋中各获取一个球，且不放回，求第二个人取得黄球的概率。</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A)%3D%5Cfrac%7B2%7D%7B5%7D%E8%A1%A8%E7%A4%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%8F%96%E5%BE%97%E9%BB%84%E7%90%83%E7%9A%84%E6%A6%82%E7%8E%87%2C%E5%88%99P(%5Cbar%7BA%7D)%3D%5Cfrac%7B3%7D%7B5%7D%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=B%E8%A1%A8%E7%A4%BA%E7%AC%AC%E4%BA%8C%E4%B8%AA%E4%BA%BA%E5%8F%96%E5%BE%97%E9%BB%84%E7%90%83%E7%9A%84%E4%BA%8B%E4%BB%B6%E3%80%82%E6%9C%89%EF%BC%9A%0A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(B)%3DP(A)P(B%7CA)%2BP(%5Cbar%7BA%7D)P(B%7C%5Cbar%7BA%7D)%3D%5Cfrac%7B2%7D%7B5%7D%C3%97%5Cfrac%7B19%7D%7B49%7D%2B%5Cfrac%7B3%7D%7B5%7D%C3%97%5Cfrac%7B20%7D%7B49%7D%3D%5Cfrac%7B2%7D%7B5%7D">\n</p>\n<p>从另外一个角度说，无论前面的人抽了多少次，后面的人抽签总体概率是不变的。</p>\n<p>例3，5张卡片上分别标记了1,2,3,4,5，每次取2张，连续取2次，取出后不放回。求第二次取出的卡片，比第一次取出的卡片大的概率。</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=A%E8%A1%A8%E7%A4%BA%E7%AC%AC%E4%BA%8C%E5%BC%A0%E7%89%8C%E5%A4%A7%E7%9A%84%E4%BA%8B%E4%BB%B6%E3%80%82B_i%2Ci%5Cin%5B1%2C5%5D%E8%A1%A8%E7%A4%BA%E7%AC%AC%E4%B8%80%E5%BC%A0%E6%8A%BD%E5%88%B01%E5%88%B05%E7%9A%84%E4%BA%8B%E4%BB%B6%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E7%AC%AC%E4%B8%80%E5%BC%A0%E6%8A%BD%E5%88%B0%E4%BB%BB%E4%BD%95%E4%B8%80%E5%BC%A0%E7%89%8C%E6%A6%82%E7%8E%87%E9%83%BD%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5P(B_i)%3D%5Cfrac%7B1%7D%7B5%7D%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E7%AC%AC%E4%B8%80%E5%BC%A0%E7%89%8C%E6%8A%BD%E5%88%B01%E6%97%B6%EF%BC%8C%E7%AC%AC%E4%BA%8C%E5%BC%A0%E7%89%8C%E5%A4%A7%E7%9A%84%E6%A6%82%E7%8E%87%E4%B8%BAP(A%7CB_1)%3D1%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E7%AC%AC%E4%B8%80%E5%BC%A0%E7%89%8C%E6%8A%BD%E5%88%B02%E6%97%B6%EF%BC%8C%E7%AC%AC%E4%BA%8C%E5%BC%A0%E7%89%8C%E5%A4%A7%E7%9A%84%E6%A6%82%E7%8E%87%E4%B8%BAP(A%7CB_2)%3D%5Cfrac%7B3%7D%7B4%7D%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E4%BB%A5%E6%AD%A4%E7%B1%BB%E6%8E%A8P(A%7CB_3)%3D%5Cfrac%7B2%7D%7B4%7D%2CP(A%7CB_4)%3D%5Cfrac%7B1%7D%7B4%7D%2CP(A%7CB_5)%3D0%E3%80%82%E6%89%80%E4%BB%A5%EF%BC%9A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A)%3D%5Csum_%7Bi%3D1%7D%5E%7B5%7DP(B_i)P(A%7CB_i)%3D%5Cfrac%7B1%7D%7B5%7D%C3%971%2B%5Cfrac%7B1%7D%7B5%7D%C3%97%5Cfrac%7B3%7D%7B4%7D%2B%5Cfrac%7B1%7D%7B5%7D%C3%97%5Cfrac%7B2%7D%7B4%7D%2B%5Cfrac%7B1%7D%7B5%7D%C3%97%5Cfrac%7B1%7D%7B4%7D%2B%5Cfrac%7B1%7D%7B5%7D%C3%970%3D%5Cfrac%7B1%7D%7B2%7D">\n</p>\n<p>例4，甲袋有5只白球、7个红球，乙袋有4只白球、2只红球。任意取一个袋子，求从袋子取得白球的概率。</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E8%AE%BEA%3A%E8%8E%B7%E5%8F%96%E7%9A%84%E7%99%BD%E7%90%83%E7%9A%84%E4%BA%8B%E4%BB%B6%EF%BC%8CB%3A%E8%8E%B7%E5%BE%97%E7%94%B2%E8%A2%8B%E5%AD%90%E7%9A%84%E4%BA%8B%E4%BB%B6%E3%80%81%5Cbar%7BB%7D%3A%E8%8E%B7%E5%8F%96%E4%B9%99%E8%A2%8B%E5%AD%90%E3%80%82%E9%82%A3%E4%B9%88%EF%BC%9A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A)%3DP(B)P(A%7CB)%2BP(%5Cbar%7BB%7D)P(A%7C%5Cbar%7BB%7D)"></p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(B)%3DP(%5Cbar%7BB%7D)%3D%5Cfrac%7B1%7D%7B2%7D%2CP(A%7CB)%3D%5Cfrac%7B5%7D%7B12%7D%2CP(A%7C%5Cbar%7BB%7D)%3D%5Cfrac%7B4%7D%7B6%7D%2C%E6%89%80%E4%BB%A5%EF%BC%9A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(B)%3D%5Cfrac%7B1%7D%7B2%7D%C3%97%5Cfrac%7B5%7D%7B12%7D%2B%5Cfrac%7B1%7D%7B2%7D%C3%97%5Cfrac%7B4%7D%7B6%7D%3D%5Cfrac%7B13%7D%7B24%7D">\n</p>\n\n<h2 id="h2-3">*贝叶斯公式</h2>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CB)%3DP(A)%C3%97%5Cfrac%7BP(B%7CA)%7D%7BP(B)%7D"></p>\n<p><strong>贝叶斯公式的理解</strong>：</p>\n<p>可以理解他是全概率公式的反向应用，他是求某个条件出现时某个事件发生的概率。定义如下：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A)%E8%A1%A8%E7%A4%BA%E5%89%8D%E7%BD%AE%E6%A6%82%E7%8E%87%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%BD%93B%E4%BA%8B%E4%BB%B6%E6%9C%AA%E5%8F%91%E7%94%9F%E6%97%B6A%E4%BA%8B%E4%BB%B6%E5%8F%91%E7%94%9F%E7%9A%84%E6%A6%82%E7%8E%87%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CB)%E4%B8%BA%E5%90%8E%E7%BD%AE%E6%A6%82%E7%8E%87%EF%BC%8C%E8%A1%A8%E7%A4%BAB%E4%BA%8B%E4%BB%B6%E5%8F%91%E7%94%9F%E4%B9%8B%E5%90%8EA%E4%BA%8B%E4%BB%B6%E5%8F%91%E7%94%9F%E7%9A%84%E6%A6%82%E7%8E%87%E3%80%82">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%81%9A%E6%98%AF%E4%BA%8B%E4%BB%B6B%E5%8F%91%E7%94%9F%E5%90%8E%E5%AF%B9%E5%89%8D%E7%BD%AE%E6%A6%82%E7%8E%87%E7%9A%84%E4%BF%AE%E6%AD%A3%EF%BC%8C%5Cfrac%7BP(B%7CA)%7D%7BP(B)%7D%E6%98%AF%E4%BF%AE%E6%AD%A3%E5%9B%A0%E5%AD%90%E3%80%82">\n</p>\n<p>沿用前面医学的例子：</p>\n<p><em>例1，已知某种疾病的发病率是0.001，即1000人中会有1个人得病。现有一种试剂可以检验患者是否得病，它的准确率是0.99，即在患者确实得病的情况下，它有99%的可能呈现阳性。它的误报率是5%，即在患者没有得病的情况下，它有5%的可能呈现阳性。一个人检测为阳性时候，他确切患病的几率是多少。</em>\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E8%AE%BEP(A)%3D0.001%E8%A1%A8%E7%A4%BA%E5%8F%91%E7%97%85%E7%8E%87%EF%BC%8C%E5%88%99P(%5Cbar%7BA%7D%20)%3D0.999%E8%A1%A8%E7%A4%BA%E4%B8%8D%E5%8F%91%E7%97%85%E7%8E%87%E3%80%82P(B%7CA)%3D0.99%2CP(B%7C%5Cbar%7BA%7D)%3D0.05%E3%80%82%E6%89%80%E4%BB%A5%EF%BC%9A"><img\n        alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CB)%3DP(A)%C3%97%5Cfrac%7BP(B%7CA)%7D%7BP(B)%7D%2C%E7%94%A8%E5%85%A8%E6%A6%82%E7%8E%87%E5%85%AC%E5%BC%8F%EF%BC%9A">\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CB)%3DP(A)%C3%97%5Cfrac%7BP(B%7CA)%7D%7BP(A)P(B%7CA)%2BP(%5Cbar%7BA%7D)P(B%7C%5Cbar%7BA%7D)%7D"><img\n        alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CB)%3D0.001%C3%97%5Cfrac%7B0.99%7D%7B0.001%C3%970.99%2B0.999*0.05%7D%5Capprox%200.01943%3D1.94%5C%25">\n</p>\n<p>从结论看，这个试剂挺不可靠的。</p>\n<p>将贝叶斯公式的底部展开为全概率公式：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A_k%7CB)%3DP(A_k)%C3%97%5Cfrac%7BP(B%7CA_k)%7D%7B%5Csum_%7Bj%3D1%7D%5EnP(A_j)P(B%7CA_j)%7D%2Cj%5Cin(0%2Cn)%2CA_j%E8%A1%A8%E7%A4%BA%E7%9B%B8%E4%BA%92%E7%8B%AC%E7%AB%8B%E7%9A%84%E4%BA%8B%E4%BB%B6%E3%80%82">\n</p>\n<p><strong>使用全概率公式展开之后有个很直观的发现：</strong>当我们考察某一个事件的条件概率时——事件<img alt="机器学习中的数学——概率与统计"\n                                                                 src="https://math.jianshu.com/math?formula=B">发生之后<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=A_k">发生的概率，需要将整个样本空间中其他概率事件也加入到其中来。</p>\n\n<h2 id="h2-4">似然函数</h2>\n<p>似然函数个人理解是一种更加“公式化”的条件概率表达式，因为他书写的形式和条件概率相比并没有太大区别——<img alt="机器学习中的数学——概率与统计"\n                                                           src="https://math.jianshu.com/math?formula=P(x%7C%5Ctheta%20)">,只是解读方式不同。这里的<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=x">表示样本特征数据，<img alt="机器学习中的数学——概率与统计"\n                                                                                          src="https://math.jianshu.com/math?formula=%5Ctheta%20">表示模型参数。\n</p>\n<p>如果<img alt="机器学习中的数学——概率与统计"\n          src="https://math.jianshu.com/math?formula=%5Ctheta%20">已知并且固定，那么表示这个是一个概率计算模型，表示：不同的样本<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=x">在固定的模型参数<img alt="机器学习中的数学——概率与统计"\n                                                                                         src="https://math.jianshu.com/math?formula=%5Ctheta%0A">的概率值。\n</p>\n<p>如果<img alt="机器学习中的数学——概率与统计"\n          src="https://math.jianshu.com/math?formula=x">已经并且固定，表示这是一个似然计算模型（统计模型），表示不同的样本用于求解模型参数<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta">。</p>\n\n<h2 id="h2-5">极大似然估计</h2>\n<p>按照前面似然函数<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(x%7C%5Ctheta)">的介绍，似然函数可以看做<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=x">是已知的，<img alt="机器学习中的数学——概率与统计"\n                                                                                      src="https://math.jianshu.com/math?formula=%5Ctheta">是未知的，极大似然估计就是在已知<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=x">的情况下求取<img alt="机器学习中的数学——概率与统计"\n                                                                                       src="https://math.jianshu.com/math?formula=%5Ctheta%20">。\n</p>\n<p>在现实的生产生活中也常常会遇到这样的问题。我们以及有了<strong>样本</strong>以及对应的<strong>标签（结论）</strong>，如何根据这些样本来计算（推算）条件<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta%20">是一件很困难的事情。而极大似然估计就是一个根据样本值<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=x">和结论数据<img alt="机器学习中的数学——概率与统计"\n                                                                                      src="https://math.jianshu.com/math?formula=P(x%7C%5Ctheta)">计算条件参数<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta%20">的过程。</p>\n<p>总的来说，极大似然估计是一种<strong>参数估计算法</strong>。使用极大似然估计有一个很重要的先决条件——每<strong>一组样本都是独立的，并且有充分的训练样本</strong>。</p>\n<p>先看看样本独立的判断公式：<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(A%2CB)%3DP(A)%C3%97P(B)">，即2个事物同时发生的概率等于事物独立发生概率的乘积。\n</p>\n<p>极大似然评估的公式及像这个公式。</p>\n<p>设有一组样本<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=D%3D%5C%7Bx_1%2Cx_2%2Cx_3...x_n%5C%7D">,所有样本的联合概率密度<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P(D%7C%5Ctheta)">称为相对于样本<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5C%7Bx_1%2Cx_2%2Cx_3...x_n%5C%7D">的似然函数。那么由独立判定公式推断出所有样本的概率为：\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=l(%5Ctheta)%3DP(D%7C%5Ctheta)%3DP(x_i%7C%5Ctheta)%3D%5Cprod_%7Bi%3D1%7D%5En%20P(x_i%7C%5Ctheta)">。\n</p>\n<p>设<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Chat%7B%5Ctheta%7D">是使得<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=l(%5Ctheta)">取得最大值的<img alt="机器学习中的数学——概率与统计"\n                                                                                                 src="https://math.jianshu.com/math?formula=%5Ctheta%20">值，那么<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Chat%7B%5Ctheta%7D%20">是<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta%20">的极大似然估计量。可以使用下面的公式表示<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Chat%7B%5Ctheta%7D%20">与<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=D">的关系：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%5Chat%7B%5Ctheta%7D%3Dd(D)%3DD%5C%7Bx_1%2Cx_2%2Cx_3...x_n%5C%7D">,<img\n        alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(x%7C%5Chat%7B%5Ctheta%7D)%E7%A7%B0%E4%B8%BA%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E8%AF%84%E4%BC%B0%E5%80%BC%E3%80%82">\n</p>\n<p>实际计算时，计算连乘比较麻烦，我们可以引入对数将其转换为一个求和的过程：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=L(%5Ctheta)%3Dlnl(%5Ctheta)%3D%5Csum_i%5EnlnP(x_i%7C%5Ctheta)">,因为<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=lnxy%3Dlnx%2Blny">。<img alt="机器学习中的数学——概率与统计"\n                                                                                                 src="https://math.jianshu.com/math?formula=L(%5Ctheta)">也称为对数似然函数。\n</p>\n<p>如果<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=L(%5Ctheta)">连续可微，那么可以使用导数为0求函数的凸点。即：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%5Cfrac%7Bd(L(%5Ctheta))%7D%7Bd%5Ctheta%7D%20%3D%200">。</p>\n<p>将条件因子扩展为M个，即<img alt="机器学习中的数学——概率与统计"\n                    src="https://math.jianshu.com/math?formula=P(x_i%2C%5Ctheta_j)%2Ci%5Cin(0%2Cn%5D%2Cj%5Cin(0%2Cm%5D">,则似然函数（对数似然函数变成）：\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=L(%5Ctheta_j)%3D%5Csum_%7Bi%3D1%7D%5En%5Cln%20P(x_i%7C%5Ctheta_j)">\n</p>\n<p>此时每一个<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta_j">的求导变成一个求偏导数的过程：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%5Cfrac%7B%E2%88%82L(%5Ctheta_j)%7D%7B%E2%88%82%5Ctheta_k%7D%20%3D%20%5Cfrac%7B%E2%88%82%5Csum_%7Bi%3D1%7D%5En%5Cln%20P(x_i%7C%5Ctheta_j)%7D%7B%E2%88%82%5Ctheta_k%7D">,每一个<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=%5Ctheta_j">都要对<img alt="机器学习中的数学——概率与统计"\n                                                                                             src="https://math.jianshu.com/math?formula=L(%5Ctheta_j)">求导。\n</p>\n\n<h3 id="h3-2">最大似然评估的案例</h3>\n\n<h4 id="h4-1">最大似然评估计算</h4>\n<p>\n    最大似然评估（也称为极大似然评估）的用处是什么？首先可以将每个字眼拆解开来看。<strong>最大</strong>就是要找最大值<strong>，似然</strong>说明并不精确似乎就是这个值<strong>，评估</strong>指的是这是一个过程。\n</p>\n<p>现实生活中的例子：2对夫妇<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=(A%2C%5Chat%7BA%7D)%20">和<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=(B%2C%5Chat%7BB%7D)%20">和一个小孩<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=C">。从外观上看，小孩<img alt="机器学习中的数学——概率与统计"\n                                                                                          src="https://math.jianshu.com/math?formula=C">长相比较接近夫妇<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=(A%2C%5Chat%7BA%7D)%20">，有点像<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=B">，不像<img alt="机器学习中的数学——概率与统计"\n                                                                                    src="https://math.jianshu.com/math?formula=%5Chat%7BB%7D%20">,让你猜测<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=C">是谁的小孩。思维正常一点的人肯定会说<img alt="机器学习中的数学——概率与统计"\n                                                                                                   src="https://math.jianshu.com/math?formula=C">是<img\n        alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=(A%2C%5Chat%7BA%7D)">的小孩，这本身就是一个自然而然的判断过程，用数学解释：\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=%E8%AE%BEP(A%7CC)%3EP(B%7CC)%EF%BC%8CP(%5Chat%7BA%7D%7CC)%3EP(%5Chat%7BB%7D%7CC)%E3%80%82P(x%7CC)%E8%A1%A8%E7%A4%BA%E5%B0%8F%E5%AD%A9%E6%9B%B4%E5%83%8F%E8%B0%81%EF%BC%8Cx%5Cin%5BA%2C%5Chat%7BA%7D%2CB%2C%5Chat%7BB%7D%5D%E3%80%82">\n</p>\n<p>使用似然评估，就可以断定小孩更像谁：</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=P(A%7CC)%C3%97P(%5Chat%7BA%7D%7CC)%20%3E%20P(B%7CC)%C3%97P(%5Chat%7BB%7D%7CC)">。\n</p>\n\n<h4 id="h4-2">参数&amp;模型评估</h4>\n<p>最大似然估计更多的应用是在有一定样本数据的情况下用于模型评估，更准确的说是模型中的参数评估。因为似然评估来自于概率独立判决公式——<img alt="机器学习中的数学——概率与统计"\n                                                                         src="https://math.jianshu.com/math?formula=P(A%2CB)%3DP(A)%C3%97P(B)">,所以要求用于评估的样本数据相互独立。\n</p>\n<p>先说一个很直观的案例解释这个问题：</p>\n<p><em>例1，从盒子里连续取球，已知取得红球的概率<img alt="机器学习中的数学——概率与统计"\n                                 src="https://math.jianshu.com/math?formula=P%5Cin%5B0.1%2C0.5%5D">,求当P取何值时最有可能连续三次拿到红球。</em>\n</p>\n<p>只管上来说，肯定是概率越高取得红球的几率越高，所以不做推断也知道<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=P%3D0.5">时拿到红球的几率更高。下面通过数学过程来说明这个问题。\n</p>\n<p>设条件<img alt="机器学习中的数学——概率与统计" src="https://math.jianshu.com/math?formula=Y_i%3D1">，表示取得红球，<img alt="机器学习中的数学——概率与统计"\n                                                                                                  src="https://math.jianshu.com/math?formula=Y_i%3D0">表示没取得红球，所以用最大似然评估来计算参数得：\n</p>\n<p><img alt="机器学习中的数学——概率与统计"\n        src="https://math.jianshu.com/math?formula=l(%5Ctheta)%3DP(Y_1)%C3%97P(Y_2)%C3%97P(Y_3)%3DP%5E3">，只管的看就知道取值0.5似然评估最大。\n</p>'},399:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>最近项目中需要针对Vert.x的运行效率进行监控，查阅Vert.x官文，发现目前提供了Dropwizard和Hawkular两种开箱即用的工具。本文将介绍使用Dropwizard\n    Metrics实现Vert.x性能统计的过程（当然还有踩过的坑）。</p>\n<p>首先简要说说dropwizard&nbsp;metrics。</p>\n<h2 id="h2-1">Dropwizard Metrics</h2>\n<p>按照官网的说法：Metrics是一个Java库，这个库可以让我们有无可比拟的能力去了解编码是如何在生产环境运行的。Metrics提供了强大的工具来测量关键组件在生产环境的运行行为。</p>\n<p>如果仅仅使用Metrics的功能，其实并没有什么复杂，也就是嵌入一些类去使用。把他理解log4j就很容易了。</p>\n<p>在运行之前，通过Maven引入依赖关系：</p>\n<blockquote>\n    <p><br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;dependency&gt;<br> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;groupId&gt;io.dropwizard.metrics&lt;/groupId&gt;<br> &nbsp;&nbsp;\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;artifactId&gt;metrics-core&lt;/artifactId&gt;<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;version&gt;${metrics.version}&lt;/version&gt;<br>\n        &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/dependency&gt;</p>\n</blockquote>\n<p><em>metrics.version&nbsp;</em>使用最新的版本号。</p>\n<p>下面的例子简要说明了如何使用metric。例子中先是包装了一个具有监控功能的队列，在调用add和remove方法时更新指标数据。</p>\n<pre class="cpp"><code class="cpp"><span class="code-comment"><span class="code-comment">//声明一个自带指标功能的队列</span></span>\n<span class="code-keyword"><span class="code-keyword">class</span></span> QueueWarp {\n\t<span class="code-comment"><span class="code-comment">// 真实队列</span></span>\n    <span class="code-keyword"><span class="code-keyword">private</span></span> final Queue&lt;Object&gt; <span\n            class="code-built_in"><span class="code-built_in">queue</span></span>;\n    <span class="code-comment"><span class="code-comment">// 计数器指标</span></span>\n    <span class="code-keyword"><span class="code-keyword">private</span></span> Counter counter;\n    <span class="code-comment"><span class="code-comment">// 柱状图指标</span></span>\n    <span class="code-keyword"><span class="code-keyword">private</span></span> Histogram size_rate;\n    <span class="code-comment"><span class="code-comment">// 计时器指标</span></span>\n    <span class="code-keyword"><span class="code-keyword">private</span></span> Timer optTimer;\n    <span class="code-comment"><span class="code-comment">// 构造函数</span></span>\n    <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">QueueWarp</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">(MetricRegistry metrics, String name)</span></span></span><span\n            class="hljs-function"> </span></span>{\n        <span class="code-keyword"><span class="code-keyword">this</span></span>.<span class="code-built_in"><span\n            class="code-built_in">queue</span></span> = <span class="code-keyword"><span class="code-keyword">new</span></span> LinkedList&lt;Object&gt;();\n\n        <span class="code-comment"><span class="code-comment">//注册一个测量值对象</span></span>\n        metrics.<span class="code-keyword"><span class="code-keyword">register</span></span>(MetricRegistry.name(QueueWarp.<span\n            class="code-keyword"><span class="code-keyword">class</span></span>, name, <span class="code-string"><span\n            class="code-string">"size"</span></span>),\n                         <span class="code-keyword"><span class="code-keyword">new</span></span> Gauge&lt;Integer&gt;() {\n                             @Override\n                             <span class="code-comment"><span class="code-comment">//每次发起统计时获取数据的接口</span></span>\n                             <span class="code-keyword"><span class="code-keyword">public</span></span> Integer getValue() {\n                                 <span class="code-keyword"><span class="code-keyword">return</span></span> <span\n            class="code-built_in"><span class="code-built_in">queue</span></span>.size();\n                             }\n                         });\n        <span class="code-comment"><span class="code-comment">// 注册计数器</span></span>\n        counter = metrics.<span class="code-keyword"><span class="code-keyword">register</span></span>(MetricRegistry.name(QueueWarp.<span\n            class="code-keyword"><span class="code-keyword">class</span></span>, name, <span class="code-string"><span\n            class="code-string">"count"</span></span>), <span class="code-keyword"><span class="code-keyword">new</span></span> Counter());\n        <span class="code-comment"><span class="code-comment">// 注册柱状图</span></span>\n        size_rate = metrics.histogram(MetricRegistry.name(QueueWarp.<span class="code-keyword"><span\n            class="code-keyword">class</span></span>, <span class="code-string"><span\n            class="code-string">"size-rate"</span></span>));\n        <span class="code-comment"><span class="code-comment">// 注册计时器</span></span>\n        optTimer = metrics.timer(MetricRegistry.name(QueueWarp.<span class="code-keyword"><span class="code-keyword">class</span></span>, <span\n            class="code-string"><span class="code-string">"opt-timer"</span></span>));\n    }\n    <span class="code-comment"><span class="code-comment">//增加</span></span>\n    <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> boolean </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">add</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object e)</span></span></span></span>{\n    \tfinal Timer.Context timerContext = optTimer.time();<span class="code-comment"><span\n            class="code-comment">//开始计时</span></span>\n    \tcounter.inc();<span class="code-comment"><span class="code-comment">//计数器+1</span></span>\n    \tsize_rate.update(<span class="code-built_in"><span class="code-built_in">queue</span></span>.size());<span\n            class="code-comment"><span class="code-comment">//柱状图更新</span></span>\n    \tboolean ret = <span class="code-keyword"><span class="code-keyword">this</span></span>.<span\n            class="code-built_in"><span class="code-built_in">queue</span></span>.add(e);<span\n            class="code-comment"><span class="code-comment">//添加数据到队列</span></span>\n    \ttimerContext.stop();<span class="code-comment"><span class="code-comment">//停止计时</span></span>\n        <span class="code-keyword"><span class="code-keyword">return</span></span> ret;\n    }\n    <span class="code-comment"><span class="code-comment">// 删除</span></span>\n    <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> Object </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">remove</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(Object e)</span></span></span></span>{\n    \tfinal Timer.Context timerContext = optTimer.time();\n    \tcounter.dec();\n    \tsize_rate.update(<span class="code-built_in"><span class="code-built_in">queue</span></span>.size());\n    \tObject ret = <span class="code-keyword"><span class="code-keyword">this</span></span>.<span\n            class="code-built_in"><span class="code-built_in">queue</span></span>.remove();\n    \ttimerContext.stop();\n        <span class="code-keyword"><span class="code-keyword">return</span></span> ret;\n    }\n}</code></pre>\n<p>在上面的代码中，当调用add、remove方法时，会记录：</p>\n<ol>\n    <li>方法从调用到返回的时间间隔。</li>\n    <li>更新队列中的数据规模。（Counter和Gauge都记录了规模）</li>\n    <li>更新当前队列成员个数和最大值的比率。</li>\n</ol>\n<p>然后使用一个main方法来测试这个类并输出指标数据：</p>\n<pre class="cpp"><code class="cpp"><span class="code-keyword"><span class="code-keyword">public</span></span> <span\n        class="code-keyword"><span class="code-keyword">class</span></span> MetricDemoRun {\n\t<span class="code-comment"><span class="code-comment">// 注册指标实例</span></span>\n\t<span class="code-keyword"><span class="code-keyword">static</span></span> final MetricRegistry metrics = <span\n            class="code-keyword"><span class="code-keyword">new</span></span> MetricRegistry();\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">(String args[])</span></span></span><span class="hljs-function"> </span></span>{\n\t\t<span class="code-comment"><span class="code-comment">//新建队列</span></span>\n\t\tQueueWarp <span class="code-built_in"><span class="code-built_in">queue</span></span> = <span\n            class="code-keyword"><span class="code-keyword">new</span></span> QueueWarp(metrics, <span\n            class="code-string"><span class="code-string">"jobss"</span></span>);\n\t\t<span class="code-built_in"><span class="code-built_in">queue</span></span>.add(<span class="code-string"><span\n            class="code-string">"1"</span></span>);\n\t\t<span class="code-comment"><span class="code-comment">// 启动指标数据输出</span></span>\n\t\tstartReport();\n\t\t<span class="code-keyword"><span class="code-keyword">try</span></span> {\n\t\t\tThread.sleep(<span class="hljs-number"><span class="hljs-number">5</span></span> * <span\n            class="hljs-number"><span class="hljs-number">1000</span></span>);\n\t\t} <span class="code-keyword"><span class="code-keyword">catch</span></span> (InterruptedException e) {\n\t\t}\n\t\t<span class="code-built_in"><span class="code-built_in">queue</span></span>.add(<span class="code-string"><span\n            class="code-string">"2"</span></span>);\n\t\tMeter requests = metrics.meter(<span class="code-string"><span class="code-string">"requests"</span></span>);\n\t\trequests.mark();\n\t\twait5Seconds();\n\t}\n\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">static</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">startReport</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span\n            class="hljs-function"> </span></span>{\n\t\t<span class="code-comment"><span class="code-comment">//注册报告对象</span></span>\n\t\tConsoleReporter reporter = ConsoleReporter.forRegistry(metrics).\n\t\t\t\tconvertRatesTo(TimeUnit.SECONDS).\n\t\t\t\tconvertDurationsTo(TimeUnit.MILLISECONDS)\n\t\t\t\t.build();\n\n\t\t<span class="code-comment"><span class="code-comment">// 开始输出报告</span></span>\n\t\treporter.start(<span class="hljs-number"><span class="hljs-number">1</span></span>, TimeUnit.SECONDS);\n\t}\n\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">static</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span\n            class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">wait5Seconds</span></span></span><span\n            class="hljs-params"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span\n            class="hljs-function"> </span></span>{\n\t\t<span class="code-keyword"><span class="code-keyword">try</span></span> {\n\t\t\tThread.sleep(<span class="hljs-number"><span class="hljs-number">300</span></span> * <span\n            class="hljs-number"><span class="hljs-number">1000</span></span>);\n\t\t} <span class="code-keyword"><span class="code-keyword">catch</span></span> (InterruptedException e) {\n\t\t}\n\t}\n}</code></pre>\n<p>MetricDemoRun类中还有2个静态方法，一个用来输出报告数据。一个用来将主线程睡眠一段的时间。运行main以后，会在控制台重复输出下列内容：</p>\n<blockquote>\n    <p>16-7-7 16:50:35 ================================================================</p>\n    <p>-- Gauges ----------------------------------------------------------------------<br>\n        com.oakss.demo.metrics.app.QueueWarp.jobss.size<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value = 2\n    </p>\n    <p>-- Counters --------------------------------------------------------------------<br>\n        com.oakss.demo.metrics.app.QueueWarp.jobss.count<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count = 2\n    </p>\n    <p>-- Histograms ------------------------------------------------------------------<br>\n        com.oakss.demo.metrics.app.QueueWarp.size-rate<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count = 2<br>\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min = 0<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp;max = 1<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mean = 0.52<br> &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp; &nbsp; stddev = 0.50<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; median = 1.00<br> &nbsp; &nbsp;\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 75% &lt;= 1.00<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 95% &lt;=\n        1.00<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 98% &lt;= 1.00<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp; 99% &lt;= 1.00<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 99.9% &lt;= 1.00</p>\n    <p>-- Meters ----------------------------------------------------------------------<br> requests<br> &nbsp; &nbsp;\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count = 1<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mean rate = 1.00 events/second<br>\n        &nbsp; &nbsp; &nbsp;1-minute rate = 0.00 events/second<br> &nbsp; &nbsp; &nbsp;5-minute rate = 0.00\n        events/second<br> &nbsp; &nbsp; 15-minute rate = 0.00 events/second</p>\n    <p>-- Timers ----------------------------------------------------------------------<br>\n        com.oakss.demo.metrics.app.QueueWarp.opt-timer<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;count = 2<br>\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mean rate = 0.33 calls/second<br> &nbsp; &nbsp; &nbsp;1-minute rate = 0.20\n        calls/second<br> &nbsp; &nbsp; &nbsp;5-minute rate = 0.20 calls/second<br> &nbsp; &nbsp; 15-minute rate = 0.20\n        calls/second<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;min = 0.07 milliseconds<br> &nbsp;\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;max = 2.75 milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp; mean = 1.35 milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stddev = 1.34\n        milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; median = 0.07 milliseconds<br> &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp; &nbsp; &nbsp; 75% &lt;= 2.75 milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 95%\n        &lt;= 2.75 milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 98% &lt;= 2.75 milliseconds<br>\n        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 99% &lt;= 2.75 milliseconds<br> &nbsp; &nbsp; &nbsp; &nbsp;\n        &nbsp; &nbsp; 99.9% &lt;= 2.75 milliseconds<br> &nbsp;</p>\n</blockquote>\n<p>看完上面的例子。并没有感受什么特别牛逼的地方，无非是在代码中嵌入一些统计点。&nbsp;看来看去都像一个增强版的日志工具。</p>\n\n<h2 id="h2-2">Vert.x指标统计&nbsp; &nbsp;&nbsp;</h2>\n\n<h3 id="h3-1">嵌入Metrics</h3>\n<p>说完基本的dropwizard&nbsp;metrics功能我们再看看如何整合Vert.x和dropwizard&nbsp;metrics用来统计各种有效的指标。</p>\n<p>\n    Vert.x通过MetricsService的SPI接口提供了接入指标统计工具的入口。在创建Vertx实例时使用DropwizardMetricsOptions来告诉Vertx使用对应的实现类。首先需要加入Vert.x的Dropwizard包：</p>\n<pre class="xml"><code class="xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">dependency</span></span></span><span\n        class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">groupId</span></span></span><span class="code-tag">&gt;</span></span>io.vertx<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">groupId</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">artifactId</span></span></span><span class="code-tag">&gt;</span></span>vertx-dropwizard-metrics<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">artifactId</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">version</span></span></span><span class="code-tag">&gt;</span></span>3.3.0<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">version</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">dependency</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>然后下列代码展示了创建一个具有Metrics功能的<em>Vertx</em>实例以及从中读取指标数据。</p>\n<pre class="cs"><code class="cs"><span class="code-keyword"><span class="code-keyword">public</span></span> <span\n        class="code-keyword"><span class="code-keyword">class</span></span> <span class="code-title"><span\n        class="code-title">VertxMetricDemo</span></span> {\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span\n            class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span\n            class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span\n            class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span\n            class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">String[] args</span></span></span><span class="hljs-function">) </span></span>{\n\t\t<span class="code-comment"><span class="code-comment">// 使用DropwizardMetricsOptions配置创建单机Vertx实例</span></span>\n\t\tVertx vertx = Vertx.vertx(\n\t\t\t\t<span class="code-keyword"><span class="code-keyword">new</span></span> VertxOptions().setMetricsOptions(\n\t\t\t\t\t\t<span class="code-keyword"><span class="code-keyword">new</span></span> DropwizardMetricsOptions().setEnabled(<span\n            class="hljs-literal"><span class="hljs-literal">true</span></span>)\n\t\t\t\t));\n\n\t\t<span class="code-comment"><span class="code-comment">// 创建指标服务</span></span>\n\t\tMetricsService metricsService = MetricsService.create(vertx);\n\n\t\t<span class="code-comment"><span class="code-comment">// 获取当前的指标服务</span></span>\n\t\tJsonObject json = metricsService.getMetricsSnapshot(vertx);\n\n\t\t<span class="code-comment"><span class="code-comment">// 输出</span></span>\n\t\tSystem.<span class="code-keyword"><span class="code-keyword">out</span></span>.println(json);\n\t}\n}</code></pre>\n<p>Vert.x实现指标功能的原理是接口继承Measured，这些接口包括HttpServer、NetServer、EventBus、Vertx等。通过Measured可以注入对各种组件的指标统计。</p>\n<p><a title="MetricsService" href="http://vertx.io/docs/apidocs/io/vertx/ext/dropwizard/MetricsService.html"\n      rel="nofollow">MetricsService</a>提供了丰富的功能接口来获取各种指标数据，每一项指标数据都有自己特定的命名规则。我们可以过全称获取某一项指标，例如获取eventBus上的handler相关指标，可以使用以下方法：\n</p>\n<pre class="lua"><code class="lua">JsonObject metrics = metricsService.getMetricsSnapshot(vertx);\nmetrics.getJsonObject(<span class="code-string"><span\n            class="code-string">"vertx.eventbus.handlers"</span></span>);</code></pre>\n<p>或者直接从指定的eventBus获取数据：</p>\n<pre class="lua"><code class="lua">EventBus eventBus = vertx.eventBus();\nJsonObject metrics = metricsService.getMetricsSnapshot(eventBus);\nmetrics.getJsonObject(<span class="code-string"><span class="code-string">"handlers"</span></span>);</code></pre>\n<p>两种方式获得同样的数据，只要接口继承了Measured就可以用MetricsService::create来获取指标。</p>\n\n<h3 id="h3-2">指标格式和指标数据</h3>\n<p>Metric提供了丰富的数据格式。目前有：Gauge（测量值）、Counter（计数器）、Histogram（柱状图）、Meter（仪表）、ThroughputMeter（吞吐量统计）、Timer（计时器）和Throughput\n    Timer（吞吐量计时器）。</p>\n<p>Vert.x提供了丰富的指标数据内容，下面将一一列举说明。</p>\n\n<h4 id="h4-1">Vert.x指标</h4>\n<blockquote>\n    <ul>\n        <li><p><code>vertx.event-loop-size</code>&nbsp;- 类型：Gauge（测量值）含义：event loop线程池的线程数量。</p></li>\n        <li><p><code>vertx.worker-pool-size</code>&nbsp;- 类型：Gauge（测量值）含义：worker线程池的线程数量。</p></li>\n        <li><p><code>vertx.cluster-host</code>&nbsp;- 类型：Gauge（测量值）含义：集群主机的设置值。</p></li>\n        <li><p><code>vertx.cluster-port</code>&nbsp;- 类型：Gauge（测量值）含义：集群接口的设置值。</p></li>\n        <li><p><code>vertx.verticles</code>&nbsp;- 类型：Counter（计数器）含义：当前已部署的verticles数量。</p></li>\n        <li><p><code>vertx.verticles.&lt;verticle-name&gt;</code>&nbsp;- 类型：Counter（计数器）含义：&lt;verticle-name&gt;指定名称的verticle部署数量。\n        </p></li>\n    </ul>\n</blockquote>\n\n<h4 id="h4-2">Event bus 指标</h4>\n<p>基础名称:&nbsp;<code>vertx.eventbus</code></p>\n<blockquote>\n    <ul>\n        <li><p><code>handlers</code>&nbsp;- 类型：Counter（计数器）含义： event bus中已注册handler的数量。</p></li>\n        <li><p><code>handlers.myaddress</code>&nbsp;- 类型：Timer（计时器）含义：名为<em>myaddress</em>的handler出个单个messages的速率。</p>\n        </li>\n        <li><p><code>messages.bytes-read</code>&nbsp;- 类型：Meter（仪表）含义：获取远程信息的字节数总量。</p></li>\n        <li><p><code>messages.bytes-written</code>&nbsp;- 类型：Meter（仪表）含义：发送到远程地址的信息数据总量。</p></li>\n        <li><p><code>messages.pending</code>&nbsp;- 类型：Counter（计数器）含义：已经被eventbus接受，但是还未被handler处理的信息数。</p></li>\n        <li><p><code>messages.pending-local</code>&nbsp;- 类型：Counter（计数器）含义：由本地发送的已经被eventbus接受，但是还未被handler处理的信息数。</p>\n        </li>\n        <li><p><code>messages.pending-remote</code>&nbsp;- 类型：Counter（计数器）含义：由远程发送的已经被eventbus接受，但是还未被handler处理的信息数。</p>\n        </li>\n        <li><p><code>messages.received</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示接受消息条目数的速率。</p></li>\n        <li><p><code>messages.received-local</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示接受本地消息条目数的速率。</p></li>\n        <li><p><code>messages.received-remote</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示接受远程消息条目数的速率。</p></li>\n        <li><p><code>messages.delivered</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示消息被传递到一个处理程序的速率。</p></li>\n        <li><p><code>messages.delivered-local</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示本地消息被传递到一个handler的速率。</p></li>\n        <li><p><code>messages.delivered-remote</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示远程消息被传递到一个handler的速率。</p>\n        </li>\n        <li><p><code>messages.sent</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示消息被发送的速率。</p></li>\n        <li><p><code>messages.sent-local</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示消息被发送到本地的速率。</p></li>\n        <li><p><code>messages.sent-remote</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示消息被发送到远程服务的速率。</p></li>\n        <li><p><code>messages.published</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示发布消息的速率。</p></li>\n        <li><p><code>messages.published-local</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示发布本地消息的速率。</p></li>\n        <li><p><code>messages.published-remote</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：表示发布远程消息的速率。</p></li>\n        <li><p><code>messages.reply-failures</code>&nbsp;- 类型：Meter含义：表示回复失败的频率。</p></li>\n    </ul>\n</blockquote>\n\n<h4 id="h4-3">Http 服务指标</h4>\n<p>基础名称:&nbsp;<code>vertx.http.servers.&lt;host&gt;:&lt;port&gt;</code></p>\n<p>Http 服务的数据包括&nbsp;<strong><em>Net服务的指标&nbsp;</em></strong>加上以下指标：</p>\n<blockquote>\n    <ul>\n        <li><p><code>requests</code>&nbsp;- 类型：Throughput Timer（吞吐量计时器）含义：单个请求及其出现的频率。</p></li>\n        <li><p><code>&lt;http-method&gt;-requests</code>&nbsp;- 类型：Throughput Timer（吞吐量计时器）含义：指定由&lt;http-method&gt;（PUT、GET、POST等）表示方法获取的请求及其频率。\n        </p>\n            <ul>\n                <li><p>例如:&nbsp;<code>get-requests</code>,&nbsp;<code>post-requests</code></p></li>\n            </ul>\n        </li>\n        <li><p><code>&lt;http-method&gt;-requests./&lt;uri&gt;</code>&nbsp;- A&nbsp;Throughput Timer（吞吐量计时器）含义：指定由&lt;http-method&gt;表示的方法和/&lt;uri&gt;表示的路径的请求内容及其频率。\n        </p>\n            <ul>\n                <li><p>例如:&nbsp;<code>get-requests./some/uri</code>,&nbsp;<code>post-requests./some/uri?foo=bar</code>\n                </p></li>\n            </ul>\n        </li>\n        <li><p><code>responses-1xx</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：1xx响应的频次。</p></li>\n        <li><p><code>responses-2xx</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：2xx响应的频次。</p></li>\n        <li><p><code>responses-3xx</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：3xx响应的频次。</p></li>\n        <li><p><code>responses-4xx</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：4xx响应的频次。</p></li>\n        <li><p><code>responses-5xx</code>&nbsp;- 类型：ThroughputMeter（吞吐量统计）含义：5xx响应的频次。</p></li>\n        <li><p><code>open-websockets</code>&nbsp;- 类型：Counter（计数器）含义：打开网络套接字的连接个数。</p></li>\n        <li><p><code>open-websockets.&lt;remote-host&gt;</code>&nbsp;- 类型：Counter（计数器）含义：连接到&lt;remote-host&gt;指定的地址打开网络套接字的连接个数。\n        </p></li>\n    </ul>\n</blockquote>\n\n<h4 id="h4-4">Net 服务指标</h4>\n<p>基础名称:&nbsp;<code>vertx.net.servers.&lt;host&gt;:&lt;port&gt;</code></p>\n<blockquote>\n    <ul>\n        <li><p><code>open-netsockets</code>&nbsp;- 类型：Counter（计数器）含义：打开net socket的连接数。</p></li>\n        <li><p><code>open-netsockets.&lt;remote-host&gt;</code>&nbsp;- 类型：Counter（计数器）含义：连接到指定的远程主机所打开的net socket连接数。\n        </p></li>\n        <li><p><code>connections</code>&nbsp;- 类型：Timer（计时器）含义：创建连接的频率。</p></li>\n        <li><p><code>exceptions</code>&nbsp;- 类型：Counter（计数器）含义：出现异常的次数。</p></li>\n        <li><p><code>bytes-read</code>&nbsp;- 类型：Histogram（柱状图）含义：读取的字节数。</p></li>\n        <li><p><code>bytes-written</code>&nbsp;- 类型：Histogram（柱状图）含义：写入的字节数。</p></li>\n    </ul>\n</blockquote>\n\n<h4 id="h4-5">池指标（Pool metrics）</h4>\n<p>基础名称:&nbsp;<code>vertx.pool.&lt;type&gt;.&lt;name&gt;</code>。这里的<code>type</code>表示池类型(例如&nbsp;<em>worker</em>、<em>datasource</em>)，&nbsp;<code>name</code>表示池的名称(例如&nbsp;<code>vert.x-worker-thread</code>)。\n</p>\n<p>类型为<em>worker</em>的线程池是用于阻塞运行的工作线程池，Vert.x将其用于<em>vert.x-worker-thread</em>线程或<em>vert.x-internal-blocking</em>线程。\n    名为worker的执行线程都使用<code><a title="WorkerExecutor"\n                             href="http://vertx.io/docs/apidocs/io/vertx/core/WorkerExecutor.html" rel="nofollow">WorkerExecutor</a></code>来创建。\n</p>\n<p>数据源（Datasource）使用Vert.x的JDBC客户端创建，名为<em>datasource</em>.</p>\n<blockquote>\n    <ul>\n        <li><p><code>queue-delay</code>&nbsp;- 类型：Timer（计时器）含义：测量获取某个资源的等待时间，例如在队列中的等待时间。</p></li>\n        <li><p><code>queue-size</code>&nbsp;- 类型：Counter（计数器）含义：在队列中等待的资源数。</p></li>\n        <li><p><code>usage</code>&nbsp;- 类型：Timer（计时器）含义：测量某个资源被持续使用的时间。</p></li>\n        <li><p><code>in-use</code>&nbsp;- 类型：Counter（计数器）含义：使用资源的实际数量。</p></li>\n        <li><p><code>pool-ratio</code>&nbsp;- 类型：Gauge（测量值）含义：已使用的资源和池规模的比率。</p></li>\n        <li><p><code>max-pool-size</code>&nbsp;- 类型：Gauge（测量值）含义：池的最大规模。</p></li>\n    </ul>\n</blockquote>\n<p>当池的最大规模没有声明时，<code>pool-ratio</code>和<code>max_pool_size</code>将没有任何数据。</p>\n<p>除了以上服务器端的指标之外，Vertx还包括一些客户端指标，有需要可以去官网查看。</p>\n\n<h2 id="h2-3">图形化展示指标数据</h2>\n<p>在收集到各种指标数据之后，如果只能输出到console看各字符串就太没意思了。在互联网时代，必须有牛逼闪闪的图形统计工具啊，下面将介绍使用开源项目呈现数据报表。</p>\n<p>官网介绍了2个开源工具来实现呈现报表的功能——Jolokia和Hawtio。</p>\n\n<h3 id="h3-3">Jolokia代理</h3>\n<p><a title="Jolokia" href="https://jolokia.org/" rel="nofollow">Jolokia </a>是按照JSR-160的要求实现JMX-HTTP桥接的工具。按照官网的说法，有非常多的平台使用了Jolokia，并且Jolokia在处理远程连接时提供了更安全的支持。（另外一篇博文介绍了Jolokia，想了解点这里：<a\n        href="http://my.oschina.net/chkui/blog/708639" rel="nofollow">http://my.oschina.net/chkui/blog/708639</a>）</p>\n<p>首先，需要像下面这样创建一个Vertx实例：</p>\n<pre class="actionscript"><code class="language-java">Vertx vertx = Vertx.vertx(<span class="code-keyword"><span\n        class="code-keyword">new</span></span> VertxOptions().setMetricsOptions(\n    <span class="code-keyword"><span class="code-keyword">new</span></span> DropwizardMetricsOptions()\n        .setEnabled(<span class="code-keyword"><span class="hljs-literal">true</span></span>)\n        .setJmxEnabled(<span class="code-keyword"><span class="hljs-literal">true</span></span>)\n        .setJmxDomain(<span class="code-string"><span class="code-string">"vertx-metrics"</span></span>)));</code></pre>\n<p><em>Domain&nbsp;</em>参数是可以修改的，这个参数会影响Hawtio的服务的浏览名称，下文会有说明。完成这个配并启用统计功能后，vertx-dropwizard-metric会暴露本地的的Mbean服务接口，Jolokia可以通过这个接口获取指标数据。（<span\n        style="color:#FFA07A">以上配置也可以用于Vert.x的集群环境。</span>）</p>\n<p>然后，我们插入Jolokia来做桥接功能。</p>\n<p>首先到官网去下载最新的代理包&lt;<a title="Jolokia代理包"\n                        href="http://search.maven.org/remotecontent?filepath=org/jolokia/jolokia-jvm/1.3.3/jolokia-jvm-1.3.3-agent.jar"\n                        rel="nofollow">点我下载</a>&gt;。下载完成后，需要嵌入到我们自己的应用中，像下面这样在java启动命令中增加以下参数来植入Jolokia代理：</p>\n<pre class="xml"><code class="xml">-javaagent:%jolokia_home%/jolokia-jvm-<span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">version</span></span></span><span\n        class="code-tag">&gt;</span></span>-agent.jar=port=7777,host=localhost</code></pre>\n<p>下面是完整的例子：</p>\n<pre class="groovy"><code class="groovy">java -<span class="code-string"><span\n        class="code-string">javaagent:</span></span><span class="code-string"><span class="code-string">D:</span></span><span\n        class="hljs-regexp"><span class="hljs-regexp">/soft/</span></span>jolokia/jolokia-jvm<span\n        class="hljs-number"><span class="hljs-number">-1.3</span></span><span class="hljs-number"><span\n        class="hljs-number">.3</span></span>-agent.jar=port=<span class="hljs-number"><span\n        class="hljs-number">7777</span></span>,host=localhost com.a.b.c.runApp</code></pre>\n<p>在eclipse下，右键-&gt;[Debug|Run] As-&gt;[Debug|Run] Config。弹出的选项卡中，选择Arguments。然后在VM arguments中增加代理参数，如下图：</p>\n<p><img alt="Vert.x Dropwizard指标数据监控" height="535"\n        src="http://static.oschina.net/uploads/space/2016/0712/165407_jrTG_2649413.png" width="900"></p>\n<p>然后点击右下角的Debug启动。如果启动成功，会在控制台输出。</p>\n<blockquote>\n    <p>I&gt; No access restrictor found, access to any MBean is allowed<br> Jolokia: Agent started with URL\n        http://127.0.0.1:7777/jolokia/</p>\n</blockquote>\n<p>至此。我们的Vertx实例成功启动，启动的同时开启了：</p>\n<ol>\n    <li>Dropwizard Metrics用于指标收集；</li>\n    <li>Jmx暴露桥接接口；</li>\n    <li>Jolokia提供指标数据Rest接口；</li>\n</ol>\n<p>随后，我们需要添加一个Hawtio来获取Jolokia暴露的接口数据。</p>\n\n<h3 id="h3-4">Hawtio展示指标数据</h3>\n<p>Hawtio看做一个web服务即可，他按照servlet规范开发，是个标准的web服务。他功能就是从暴露的Jolokia接口中读取指标数据，然后以图像化的方式呈现给用户。下面说明如何搭建好Hawtio服务。</p>\n<p>首先下载Hawtio的war包&lt;<a title="Hawtio运行包"\n                         href="https://oss.sonatype.org/content/repositories/public/io/hawt/hawtio-default/1.4.65/hawtio-default-1.4.65.war"\n                         rel="nofollow">点我下载</a>&gt;。</p>\n<p>然后将war包放置到web容器中。Hawtio支持多种servlet规范的web容器，如中国javaer最喜欢的tomcat和jetty，还有Karaf\n    、Wildfly(Jboss)等。每种容器的配置都有些许不同，我们这里只说明如何配置Tomcat，其他容器的配置方法见<a title="Hawtio的配置说明"\n                                                                  href="http://hawt.io/configuration/index.html"\n                                                                  rel="nofollow">Hawtio的配置说明</a>。</p>\n<p>使用的tomcat并没有多少配置，如果不需要管理用户权限的话，把download的war包直接丢到webapps里启动tomcat就可以看到以下页面了：</p>\n<p><img alt="Vert.x Dropwizard指标数据监控" height="337"\n        src="https://file.mahoooo.com/res/file/vertx_metrics_using_dropwizard_2018_5_7_1.png" width="600"></p>\n<p>然后点击Connect栏,可以看到以下内容：</p>\n<p><img alt="Vert.x Dropwizard指标数据监控" height="319"\n        src="https://file.mahoooo.com/res/file/vertx_metrics_using_dropwizard_2018_5_7_2.png" width="600"></p>\n<p>\n    在表单中填写连接内容：Name随便取一个即可、Scheme选择默认的http、Host填写主机地址（本例是在本地运行，使用127.0.0.1或者localhost）、端口使用前面启动Jolokia使用的端口、Path选择Jolokia。然后点击Connect\n    to remote server。</p>\n<p>连接成功后点击左上角导航栏里的JMX（其他菜单可以看到cpu、内存、线程的使用情况等）。下图就是Hawtio图形化的指标数据，提供多种图标（Chart）。这里的文件夹名称“vertx-metrics”就是在上面代码 <span\n        style="color:#0000FF"><em>setJmxDomain("vertx-metrics")&nbsp;</em></span>中命名的domian名称。</p>\n<p><img alt="Vert.x Dropwizard指标数据监控" height="392"\n        src="https://file.mahoooo.com/res/file/vertx_metrics_using_dropwizard_2018_5_7_3.png" width="800">&nbsp;&nbsp;&nbsp;\n</p>\n<p>Hawtio除了展示Vertx相关的所有数据外，还可以看到Jvm相关的其他数据，例如Cpu、堆、栈、线程池等。如果需要的话，还可以把自己定义更多的监控数据传递到Hawtio显示。</p>\n\n<h3 id="h3-5">Hawtio权限管理</h3>\n<p>上面例子说明了如何使用Hawtio展示指标数据。但是任何使用者都可以查看到相关数据。Hawtio提供了开箱即用的用户权限控制功能。需要针对不同的容器环境进行配置。这里以tomcat为例。</p>\n<p>在tomcat的启动脚本中添加下面的参数：</p>\n<p>linux：</p>\n<pre class="bash"><code class="bash"><span class="code-built_in"><span class="code-built_in">export</span></span> CATALINA_OPTS=<span\n        class="code-string"><span class="code-string">\'-Dhawtio.authenticationEnabled=true -Dhawtio.role=manager\'</span></span></code></pre>\n<p>windows：</p>\n<pre class="bash"><code class="bash"><span class="code-built_in"><span class="code-built_in">set</span></span> JAVA_OPTS=-Dhawtio.authenticationEnabled=<span\n        class="hljs-literal"><span class="hljs-literal">true</span></span>\n</code></pre>\n<p>然后Hawtio会使用tomcat的用户权限来控制自身的用户权限。也就是说，如果在 %TOMCAT_HOME%/conf/tomcat-users.xml中配置了以下内容：</p>\n<pre class="xml"><code class="xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">user</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">username</span></span></span><span\n        class="code-tag">=</span><span class="code-string"><span class="code-tag"><span\n        class="code-string">"user"</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n        class="code-tag"><span class="hljs-attr">password</span></span></span><span class="code-tag">=</span><span\n        class="code-string"><span class="code-tag"><span class="code-string">"passwd"</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span\n        class="hljs-attr">roles</span></span></span><span class="code-tag">=</span><span class="code-string"><span\n        class="code-tag"><span class="code-string">"tomcat"</span></span></span><span\n        class="code-tag">/&gt;</span></span></code></pre>\n<p>则可以使用user/passwd作为账号密码登录Hawtio。</p>\n<p>配置生效后输入Hawtio的地址会跳转到下面这个页面。</p>\n<p><img alt="Vert.x Dropwizard指标数据监控" height="243"\n        src="https://file.mahoooo.com/res/file/vertx_metrics_using_dropwizard_2018_5_7_4.png" width="400"></p>\n<p>只有登录成功才能继续访问其他资源。</p>\n<p>现在，你的Vert.x已经有了一个牛逼闪闪的图像化监控工具。当然，本文提到的工具不仅仅只能用于监控Vert.x，只要稍加改动，可以监控JVM的方方面面。</p>'}});