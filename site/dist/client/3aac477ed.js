webpackJsonp([3],{376:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p><a href="https://www.chkui.com/article/spring/spring_core_bean_post_processors" title="Spring核心——IOC处理器扩展">上一篇文章</a>介绍了非侵入式的框架的概念以及IOC的功能扩展点之一——BeanPostProcessor，我们接下来的内容继续说明IoC更多的扩展方法。\n</p>\n\n<h2 id="h2-1">BeanFactoryPostProcessor</h2>\n<p>BeanFactoryPostProcessor是针对整个容器的后置处理器。他的使用也非常简单，只要向容器中添加一个继承BeanFactoryPostProcessor的Bean即可。</p>\n\n<h3 id="h3-1">如何使用</h3>\n<p>继承了BeanFactoryPostProcessor接口的类PostProcessors：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.xml.beanfactorypostprocessor;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">PostProcessors</span> <span class="code-keyword">implements</span> <span\n            class="code-title">BeanFactoryPostProcessor</span></span>{\n<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span\n            class="code-keyword">throws</span> BeansException </span>{\n         <span class="code-comment">//DO</span>\n    }\n}</code></pre>\n<p>然后再向容器中添加这个Bean就增加了一个BeanFactoryPostProcessor。</p>\n<pre><code class="xml"><span class="php"><span class="code-meta">&lt;?</span>xml version=<span\n        class="code-string">"1.0"</span> encoding=<span class="code-string">"UTF-8"</span><span\n        class="code-meta">?&gt;</span></span>\n<span class="code-comment">&lt;!-- xml.beanfactorypostprocessor --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.PostProcessors"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>BeanFactoryPostProcessor主要用于处理容器相关的内容，他被触发时机是在IoC容器加载完各种配置后，还没执行Bean的初始化之前。这个时候除了PostProcessors这个Bean，其他任何Bean都没有被创建。&nbsp;所以在BeanFactoryPostProcessor处理Bean是不合适的，Bean应该要到BeanPostProcessor中去处理，2者的区别就是前者面向容器，后者面向Bean。接下来将通过一个详细例子来说明BeanFactoryPostProcessor和BeanPostProcessor的区别以及使用方式。期间还会介绍BeanDefinitio相关的内容。</p>\n\n<h3 id="h3-2">BeanFactoryPostProcessor与BeanPostProcessor使用</h3>\n<p><span style="color:#e74c3c">（文中仅仅是示例代码，无法运行，源码在</span><a href="https://gitee.com/chkui-com/spring-core-sample"\n                                                            rel="nofollow"><span style="color:#e74c3c">https://gitee.com/chkui-com/spring-core-sample</span></a><span\n        style="color:#e74c3c">，如需下载请自行clone）</span></p>\n\n<h4 id="h4-1"><span style="color:null">建造者模式</span></h4>\n<p>下面将会通过一个例子介绍2者的使用方式和使用场景。例子使用建造者模式模拟组装一台个人电脑，分为一下3步：</p>\n<ol>\n    <li>&nbsp;容器启动之后，会将电脑的所有“配件”（Cpu、Graphics、Ram）都添加到容器中。</li>\n    <li>&nbsp;在PostProcessorS实现BeanFactoryPostProcessor接口，它的功能是向容器添加一个Pc对象。</li>\n    <li>&nbsp;在PostProcessor实现BeanPostProcessor接口。他的工作是组装电脑——每一个Bean都会检查域上的@Autowired注解，并注入对应的部件，部件也会标记自己所属的电脑。</li>\n</ol>\n<p>下面是XML配置文件，它负责将Cpu、显卡、内存等电脑常用品牌的部件放置到容器中等待组装。此外它还添加了PostProcessorS和PostProcessor两个后置处理器用于装载电脑。</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.bean.Cpu"</span>&gt;</span>\n     \t<span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n                class="code-string">"brand"</span> <span class="hljs-attr">value</span>=<span\n                class="code-string">"Amd"</span>/&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n    \n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.bean.Graphics"</span>&gt;</span>\n     \t<span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n                class="code-string">"brand"</span> <span class="hljs-attr">value</span>=<span class="code-string">"Nvdia"</span>/&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n    \n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.bean.Ram"</span>&gt;</span>\n     \t<span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n                class="code-string">"brand"</span> <span class="hljs-attr">value</span>=<span class="code-string">"Kingston"</span>/&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n    \n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.PostProcessor"</span> /&gt;</span>\n    \n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"chkui.springcore.example.xml.beanfactorypostprocessor.PostProcessors"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>下面是一个Cpu对象的结构，他标记了品牌和所属电脑。Graphics和Ram的结构和它一模一样。</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.xml.beanfactorypostprocessor.bean;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">Cpu</span> </span>{\n\t<span class="code-keyword">private</span> String brand;\n\t\n\t<span class="code-meta">@Autowired</span>\n\t<span class="code-keyword">private</span> Pc belong;\n}</code></pre>\n<p>注意这里的@Autowired注解，我们的配置文件并没有开启Spring的自动装配功能，我们将在PostProcessor实现自动装配。</p>\n<p>PostProcessorS的作用是向容器动态添加一个之前未定义的Bean——Pc。</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.xml.beanfactorypostprocessor;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">PostProcessors</span> <span class="code-keyword">implements</span> <span\n            class="code-title">BeanFactoryPostProcessor</span></span>{\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span\n            class="code-keyword">throws</span> BeansException </span>{\n\t\t<span class="code-comment">//获取容器的注册接口</span>\n\t\tBeanDefinitionRegistry registry = (BeanDefinitionRegistry)beanFactory;\n\t\t<span class="code-comment">//新建一个BeanDefinition用于动态装配Bean</span>\n\t\tGenericBeanDefinition defininition = <span class="code-keyword">new</span> GenericBeanDefinition();\n\t\t<span class="code-comment">//设置要添加的类</span>\n\t\tdefininition.setBeanClass(Pc.class);\n\t\t<span class="code-comment">//注册BeanDefinition</span>\n\t\tregistry.registerBeanDefinition(<span class="code-string">"postBean"</span>, defininition);\n\t}\n}</code></pre>\n<p>如果看过 <a href="https://www.chkui.com/article/spring/spring_core_context_and_ioc" title="Spring核心——上下文与IoC">Ioc结构介绍的这篇文章</a>，你就会知道BeanFactory经过层层派生，实际上大部分接口都在一个类实现——DefaultListableBeanFactory，它除了实现ConfigurableListableBeanFactory接口，还实现了BeanDefinitionRegistry接口。BeanDefinitionRegistry提供了BeanDefinition的管理功能。\n</p>\n\n<h4 id="h4-2">BeanDefinition与适配器模式</h4>\n<p>\n    在上面的代码中出现了BeanDefinition接口，这里就顺道说一说这个有趣的小玩意。关于他如何使用Spring的官网并没有太详细的介绍（至少我没找到），网上倒是有各路大神的博客在解读他的源码，不过代码只是表象，要理解他的整套设计思路才能提升。</p>\n<p>关于BeanDefinition的使用模式，官网将其称呼为<em>configuration metadata</em>，直译过来叫“配置元数据”。&nbsp;他的作用有点类似于<a\n        href="https://www.chkui.com/article/spring/spring_core_context_and_ioc" title="Spring核心——上下文与IoC">Context分层应用的效果（见Spring核心——上下文与IoC&nbsp;关于\n    ApplicationContext的说明）</a>，目的就是将Bean的配置和初始化工作分成2个互不干扰的部分。</p>\n<p>我们知道 Spring现在支持各种各样的方式来添加Bean，比如在XML配置文件中使用&lt;bean&gt;标签、使用@Component以及他的派生类注解、可以在@Configuration类中生成、甚至还可以通过RMI实现远程配置等等。如果所有的这些配置来源直接和IoC容器产生关系生成Bean，那么耦合度、代码复杂度会越来越高，而且以后指不定什么时候又会加入什么新的配置方式。</p>\n<p>\n    为了解决这个问题Spring的大神们引入了适配器模式——IoC容器只接受BeanDefinition接口，IoC如何初始化一个Bean是仅仅是看BeanDefinition里的信息。而各种配置方式都有自己的适配器，所有的适配器都会根据他所需要处理的内容来生成一个BeanDefinition的实现类。这样，如果新增一个新的配置方式，增加一个适配器就可以搞定。</p>\n<p><img align="left" alt="Spring核心——IOC功能扩展点" height="381"\n        src="https://static.oschina.net/uploads/img/201807/11171429_ggwk.png" width="600"></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>所以，我们也可以利用BeanDefinitionRegistry接口向容器添加一个BeanDefinition，进而在随后的执行过程中IoC容器会根据 这个BeanDefinition创建一个对应的Bean。</p>\n\n<h4 id="h4-3">BeanPostProcessor</h4>\n<p>\n    前面已经提到，BeanFactoryPostProcessor用于处理容器级别的问题，而BeanPostProcessor用来处理每一个Bean。我们前面已经用BeanFactoryPostProcessor向容器添加了一个Pc对象的Bean，接下来我们在BeanPostProcessor中处理每一个Bean的自动注入注解。</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.xml.beanfactorypostprocessor;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">PostProcessor</span> <span class="code-keyword">implements</span> <span\n            class="code-title">BeanPostProcessor</span>, <span class="code-title">BeanFactoryAware</span> </span>{\n\t<span class="code-keyword">private</span> ConfigurableListableBeanFactory beanFactory;\n\t<span class="hljs-function"><span class="code-keyword">public</span> Object <span class="code-title">postProcessBeforeInitialization</span><span\n            class="hljs-params">(Object bean, String beanName)</span> </span>{\n        <span class="code-keyword">return</span> autowiredImplement(bean);\n    }\n\t<span class="hljs-function"><span class="code-keyword">public</span> Object <span class="code-title">postProcessAfterInitialization</span><span\n            class="hljs-params">(Object bean, String beanName)</span> </span>{\n        <span class="code-keyword">return</span> bean;\n    }\n\t\n\t<span class="code-comment">//自定义实现autowired功能</span>\n\t<span class="hljs-function"><span class="code-keyword">private</span> Object <span class="code-title">autowiredImplement</span><span\n            class="hljs-params">(<span class="code-keyword">final</span> Object bean)</span> </span>{\n\t\t<span class="code-keyword">for</span>(Field field : bean.getClass().getDeclaredFields()) {\n\t\t\tAutowired value = field.getAnnotation(Autowired.class);\n\t\t\t<span class="code-keyword">if</span>(<span class="code-keyword">null</span> != value) {\n\t\t\t\tObject obj = beanFactory.getBean(field.getType());\n\t\t\t\tfield.setAccessible(<span class="code-keyword">true</span>);\n\t\t\t\tfield.set(bean, obj);\n\t\t\t}\n\t\t}\n\t\t<span class="code-keyword">return</span> bean;\n\t}\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span\n            class="code-keyword">throws</span> BeansException </span>{\n\t\t<span class="code-keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory)beanFactory;\n\t}\n}</code></pre>\n<p>这里的PostProcessor实现BeanFactoryAware接口来获取&nbsp;BeanFactory。自动注入的处理逻辑都在autowiredImplement方法中，它会扫描Bean的每一个域检查是否有@Autowired注解，如果有则根据这个域的Class类型到BeanFactory去获取对应的Bean，然后反射注入。</p>\n<p>最后我们创建一个ApplicationContext来运行他们：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">SampleApp</span> </span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n    \tApplicationContext context = <span class="code-keyword">new</span> ClassPathXmlApplicationContext(<span\n            class="code-string">"xml/beanfactorypostprocessor/config.xml"</span>);\n    \tPc pc = context.getBean(Pc.class);\n        <span class="code-comment">/**\n        Pc Info: Graphics=Nvdia, Cpu=Amd, Ram=Kingston]\n        */</span>\n        System.out.println(pc);\n    }\n}</code></pre>\n<p>本文介绍了BeanFactoryPostProcessor和BeanPostProcessor的使用方式，以及IoC容易是如何通过BeanDefinition装载各种配置的。后续还会持续介绍Spring\n    IoC容器的各种功能扩展点。</p>'},379:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">JSR-175与元编程</h2>\n<p>要说明JSR-250先要解释清楚JSR-175，要解释清楚JSR就的先了解JCP是什么。网上资料很多，就不细说了，简单的说JCP（Java Community\n    Process）是管理Java生态（包括J2SE、J2EE等等）发展的合作组织。JSR（Java Specification\n    Request）就是组织内的成员针对Java的发展提出的一些需求，通过审核之后即会融入到新版本的Java功能中成为Java的一项特性或功能，不同的发行版本和虚拟机都会遵守这些约定。</p>\n<p>JSR-175的全文标题是<strong><span style="color:null">&nbsp;A Metadata Facility for the Java&nbsp;Programming Language （为Java语言提供元数据设施）</span></strong>。它明确提出了在Java平台引入“元编程”（Meta\n    Programming）的思想，要求提供对“元数据”（Meta Data）的支持。这就是我们现在大量使用的“@”注解（Annotation）功能的最早来源。JSR-175之后的JSR-181（Web服务支持）、JSR-250、<a\n            href="https://www.chkui.com/article/java/java_jsr330" title="JSR-330">JSR-330</a>都是基于“元数据”功能提出的一些更细节的实现。</p>\n<p>至于“元编程”、“元数据”是什么这里就不详细展开说明了，它的理论很早就提出了，据说最早是在Lisp这一类函数式编程语言上开始使用的。网上有很多相关的资料，简单的说它就是“对源码进行编码”，比如下面这样：</p>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MyClass</span> </span>{\n\t<span class="code-meta">@Autowired</span>\n\t<span class="code-keyword">private</span> Interface support;\n}</code></pre>\n<p>通过@Autowired这个注解来对support这个域进行编码就可以很轻松的扩展原先类的功能。</p>\n\n<h2 id="h2-2">JSR-250的Spring实现</h2>\n<p>JSR-250主要是围绕着“资源”的使用预定义了一些注解（Annotation）,这里的“资源”可以理解为一个Class类的实例、一个JavaBean、或者一个Spring中的Bean。</p>\n<p>JSR-250相关的注解全部在 <em>javax.annotation</em> 和 <em>javax.annotation.security </em>包中，分成2个部分——资源定义和权限控制。它并没有提供具体的实现方式，仅仅是提供了指导性的文档和几个注解，由具体的框架去实现。\n</p>\n<p><em>javax.annotation</em> 中包含一下几个注解：</p>\n<ul>\n    <li>@Generated：生成资源的注解，通过该项标记产生的实例是一个资源。类似于Spring中的@Bean注解，用于生成一向资源。</li>\n    <li>@PostConstruct&nbsp;创造资源之后的回调处理，Spring已经实现了这个注解，见<a\n            href="https://www.chkui.com/article/spring/spring_core_bean_lifecycle_callback"\n            title="Bean的定义与控制">Bean的定义与控制</a> 一文的介绍。\n    </li>\n    <li>@PreDestroy&nbsp;销毁资源之前的回调处理，Spring同样实现了这个注解，见<a\n            href="https://www.chkui.com/article/spring/spring_core_bean_lifecycle_callback"\n            title="Bean的定义与控制">Bean的定义与控制</a>。\n    </li>\n    <li>@Resource&nbsp;标记使用资源的位置，Spring同样实现了这个注解的功能（后文会详细介绍）。功能上有些类似于@Autowired、@Inject，但是两者有不少的差别。</li>\n    <li>@Resources&nbsp;标记使用多项资源的位置，类似于使用@Autowired向一个列表装载数据。</li>\n</ul>\n<p>仔细看JSR-250定义的这些注解就会发现，他们都是关于“资源”的构建、销毁、使用的。Spring实现了@PostConstruct、@PreDestroy和@Resource。</p>\n<p>javax.annotation.security&nbsp;包中有以下内容：</p>\n<ul>\n    <li>@DeclareRoles&nbsp;声明角色</li>\n    <li>@DenyAll&nbsp; 拒绝所有角色</li>\n    <li>@PermitAll&nbsp; 授权所有惧色</li>\n    <li>@RolesAllowed&nbsp; 角色授权</li>\n    <li>@RunAs 运行模式</li>\n</ul>\n<p>security中的内容是在资源创建之后对<strong><em>资源的使用进行管理</em></strong>。和常规的权限控制模型一样——定义角色（@DeclareRoles&nbsp;）、确定角色对资源的控制权限（@DenyAll、@PermitAll\n    、@RolesAllowed&nbsp;）。Spring并没有实现这里的任何一个注解，在这里就不深入介绍了。这一块内容在J2EE的构建中有不少的应用。</p>\n\n<h2 id="h2-3">Spring中的@Resource</h2>\n<p>\n    在没有仔细看Spring的官方文档和JSR-250之前，我一直以为@Resource这个注解和@Autowired是2个不同的功能，更早的时候还以为是管理什么Properties资源的，很多网上的内容也写得比较模糊。虽然@Resource的实现是在\n    <em>CommonAnnotationBeanPostProcessor</em>&nbsp;而@Autowired 是在\n    AutowiredAnnotationBeanPostProcessor，但是实际上两者的功能是重叠的，或者说@Resource的提供的功能是@Autowired的子集。</p>\n<p>在Spring中使用@Resource注解时，把Bean理解为一项资源就很好理解了。下面通过一些简单的例子来介绍@Resource的使用。</p>\n<p>@Resource的功能是告诉IoC容器标记的位置需要什么样的“资源”，如下：</p>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">Abc</span> </span>{}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Xyz</span> </span>{}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Implement</span> </span>{\n\t<span class="code-meta">@Resource</span>\n\t<span class="code-keyword">private</span> Abc abc;\n\t\n\t<span class="code-keyword">private</span> Xyz xyz;\n\n    <span class="code-meta">@Resource</span>\n    <span class="code-keyword">private</span> ApplicationContext context;\n\n\t<span class="code-meta">@Resource</span>(name=<span class="code-string">"b_instance"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">setInject</span><span class="hljs-params">(Xyz xyz)</span> </span>{\n\t\t<span class="code-keyword">this</span>.xyz = xyz;\n\t}\n}</code></pre>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">context:annotation-config</span>/&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n            class="code-string">"abc"</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"x.y.Abc"</span> /&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n            class="code-string">"xyz_instance"</span> <span class="hljs-attr">name</span>=<span class="code-string">"inject"</span> <span\n            class="hljs-attr">class</span>=<span class="code-string">"x.y.Xyz"</span> /&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n            class="code-string">"x.y.Implement"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>\n    运行后，IoC会向标记了@Resource的位置注入Bean——是不是感觉和@Autowired一模一样？但是需要注意的是虽然两者最后都是注入一个Bean，但是@Resource和@Autowired的处理过程是不一样的。@Autowired如果没有提供任何参数，那么他优先按照类型注入，如果要对细节进行控制可以配合Primary和Qualifiers功能，详见<a\n        href="https://www.chkui.com/article/spring/spring_core_auto_inject_of_annotation" title="注解自动装载">注解自动装载</a>的介绍。@Resource是按照命名来注入资源的，以上面的代码为例子：\n</p>\n<ol>\n    <li>例如在setter方法上定义了name="xyz_instance"参数，那么会去IoC容器中寻找id、name等于"xyz_instance"的Bean来注入。</li>\n    <li>例如在abc这个域（成员变量）上没有定义name参数，那么会使用域的名称（这里是"abc"）去IoC中按id、name寻找Bean来注入。</li>\n    <li>如果@Resource定义在方法上，并且没有指定name参数，那么他会使用setter的名称（例子中方法名为setInject，名称就是"inject"）来寻找并注入数据。</li>\n    <li>最后，如果名称匹配不上，容器会根据标记位置的类型来注入数据，例如例如中的ApplicationContext。</li>\n</ol>\n<p>所以@Resource的装载资源过程是：1)匹配name参数；2)没有name参数时会根据setter或域的名称来匹配Bean的名称；3)还是匹配不上就根据标记位置的类型来注入数据。</p>\n<p>与@Autowired相比主要有以下几点区别：</p>\n<ol>\n    <li>控制粒度没有@Autowired细，某些参数Spring并没有实现功能。但是使用他更符合整个Java生态的规范。</li>\n    <li>如果是使用类型依赖注入数据，应优先使用@Autowired，效率会好一些。</li>\n    <li>@Resource通过名称注入与@Autowired相比省去了@Qualifiers等内容。</li>\n    <li>@Resource只能用在域和Setter方法上。</li>\n</ol>\n<p>总的来说如果是按照类型注入依赖对象，那么最终得到的结果并没有任何差异，只是执行过程上有差别。如果按Bean的名称使用，@Resource比@Autowired便捷一些，但是功能少很多。</p>\n<p>个人建议如果开发的是一个面向终端用户的应用，比如Web应用、网站什么的，直接用@Autowired就好了。如果制作的是一个给别的开发人员使用的工具，可以考虑@Resourec，他能得到更多框架的支持。</p>\n\n<h2 id="h2-4">@PostConstruct 与@PreDestroy</h2>\n<p>@PostConstruct 与@PreDestroy也是JSR-250中定义的注解，Spring都实现了他们的功能，使用方法可以查看<a\n        href="https://www.chkui.com/article/spring/spring_core_bean_lifecycle_callback" title="Bean的定义与控制">Bean的定义与控制</a>&nbsp;相关的说明和介绍。\n</p>'},383:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">抽象环境的概念</h2>\n<p>在介绍Spring核心模块为运行环境管理提供的功能之前，咱们先得解释清楚“运行环境”是什么。</p>\n<p>\n    码砖早年，对上下文（Context）、环境（Environment）一直都是傻傻分不清楚，感觉2者都是放了一堆参数在里面，貌似并没有多大区别。后来才慢慢摸清楚这2个词的套路。上下文（Context）是用来处理分层传递的，不清楚的可以看看<a\n        href="https://www.chkui.com/article/spring/spring_core_context_and_ioc" title="上下文与IoC">上下文与IoC</a>一文关于ApplicationContext的介绍。\n</p>\n<p>\n    而环境（Environment）是指当前运行程序之外的各种“全局变量”，这些变量反映了当前软件运行的各种外部情况。例如我们执行System.getenv()方法，就会获取到当前包括操作系统、全局路径配置、磁盘、jdk版本等等信息。这些信息实际上与当前运行的程序是无关的——无论你是否启动JVM，这些环境变量都是客观存在的。</p>\n<p>既然环境的作用是体现当前运行的各种外部情况，那么除了JVM启动时提供的固定参数，也可以指定我们需要的环境变量。例如我们最常见的环境——开发环境、测试环境、集成QA环境、仿真环境、生产环境等。</p>\n\n<h2 id="h2-2">Profile特性</h2>\n<p>对于软件开发而言经常要控制的就是当前程序是在开发环境运行还是在生产环境运行。除了后面要介绍的Spring Profile功能，还有各种各样的方法来进行控制，比如Maven的profile标签。Spring&nbsp;Profile只是一种环境控制的参考手段，他的好处是可以在代码级别去控制，具体使用什么根据项目的需要去考量。</p>\n<p>Spring的Profile特性使用起来并不复杂，而且同时支持Java注解和XML配置。我们通过几段代码来说明如何使用Profile。</p>\n\n<h3 id="h3-1">纯Java常规使用</h3>\n<p>（以下案例的可执行代码请到<a href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">gitee</a>下载，）</p>\n<p>定义一个servuce接口和三个service的实现类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.profile.service;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n            class="code-title">Blizzard</span> </span>{\n\t<span class="hljs-function">String <span class="code-title">getName</span><span class="hljs-params">()</span></span>;\n}</code></pre>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.profile.service.blizzard;\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Warcraft</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Blizzard</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">getName</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"Warcraft"</span>;\n\t}\n\n}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">WorldOfWarcraft</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Blizzard</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">getName</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"World of Warcraft"</span>;\n\t}\n\n}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Overwatch</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Blizzard</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">getName</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"Overwatch"</span>;\n\t}\n}</code></pre>\n<p>然后我们通过纯Java配置讲接口的每个实现添加到容器中：</p>\n<pre><code class="java"><span class="code-meta">@Configuration</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">EnvironmentApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\t<span class="code-comment">//在启动容器之前，先指定环境中的profiles参数</span>\n\t\tSystem.setProperty(<span class="code-string">"spring.profiles.active"</span>, <span\n            class="code-string">"wow"</span>);\n\t\tApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(EnvironmentApp.class);\n        <span class="code-comment">//当前的profile值是wow，所以获取的实现类是worldOfWarcraft</span>\n\t\tBlizzard blizzard = ctx.getBean(Blizzard.class);\n\t}\n\t\n\t<span class="code-meta">@Bean</span>\n\t<span class="code-meta">@Profile</span>(<span class="code-string">"war"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> Blizzard <span\n            class="code-title">warcraft</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> Warcraft();\n\t}\n\t\n\t<span class="code-meta">@Bean</span>\n\t<span class="code-meta">@Profile</span>(<span class="code-string">"wow"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> Blizzard <span class="code-title">worldOfWarcraft</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> WorldOfWarcraft();\n\t}\n\t\n\t<span class="code-meta">@Bean</span>\n\t<span class="code-meta">@Profile</span>(<span class="code-string">"default"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> Blizzard <span\n            class="code-title">overwatch</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> Overwatch();\n\t}\n}</code></pre>\n<p>@Configuration类中每一个@Bean注解之后都有一个@Profile注解。@Profile中的字符串就标记了当前适配的环境变量，他配合<em>System.setProperty("spring.profiles.active",\n    "wow");</em>这一行一起使用。当设定环境参数为wow时，标记了@Profile("wow")的方法会被启用，对应的Bean会添加到容器中。而其他标记的Bean不会被添加，当没有适配到任何Profile值时，@Profile("default")标记的Bean会被启用。\n</p>\n<p>Spring Profile的功能就是根据在环境中指定参数的方法来控制@Bean的创建。</p>\n\n<h2 id="h2-3">在@Configuration上配置Profile</h2>\n<p>@Profile注解除了在@Bean方法上使用，也可以用于@Configuration类上。这样使用可以一次性控制多个Bean的加载。例如下面的例子：</p>\n<pre><code class="java"><span class="code-meta">@Configuration</span>\n<span class="code-meta">@Profile</span>(<span class="code-string">"cast"</span>)\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">CastConfig</span> </span>{\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> Castlevania <span class="code-title">castlevania</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> Castlevania();\n\t}\n}\n\n<span class="code-meta">@Configuration</span>\n<span class="code-meta">@Profile</span>(<span class="code-string">"pes"</span>)\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">PESConfig</span> </span>{\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> ProEvolutionSoccer <span class="code-title">proEvolutionSoccer</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> ProEvolutionSoccer();\n\t}\n}</code></pre>\n<p>\n    这样可以控制整个@Configuration类中的Bean是否加载。这个时候如果在@Configuration类上还标注了@Import注解，那么被@Import引入的类中的@Bean也不会添加到IoC容器中，那么这对统一配置环境是很有好处的。</p>\n<p>需要注意的是，如果这个时候又在@Bean之上添加了@Profile注解，那么Spring最终会根据@Bean之上的标签来执行。例如：</p>\n<pre><code class="java"><span class="code-meta">@Configuration</span>\n<span class="code-meta">@Profile</span>(<span class="code-string">"cast"</span>)\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">CastConfig</span> </span>{\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> Castlevania <span class="code-title">castlevania</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> Castlevania();\n\t}\n\t<span class="code-meta">@Bean</span>\n    <span class="code-meta">@Profile</span>(<span class="code-string">"pes"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> ProEvolutionSoccer <span class="code-title">proEvolutionSoccer</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> ProEvolutionSoccer();\n\t}\n}</code></pre>\n<p>当环境中的profile值包含"pes"时候，@Profile("pes")标注的这个Bean就会添加到IoC容器中。</p>\n\n<h2 id="h2-4">Profile的XML配置</h2>\n<p>Profile特性也可以在XML配置。不过只能在&lt;beans&gt;标签上进行：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span> <span\n        class="hljs-attr">...</span> &gt;</span>\n\t<span class="code-tag">&lt;<span class="code-name">beans</span> <span class="hljs-attr">profile</span>=<span\n            class="code-string">"ff"</span>&gt;</span>\n\t\t<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                class="code-string">"chkui.springcore.example.hybrid.profile.service.squareenix.FinalFantasy"</span> /&gt;</span>\n\t<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span>\n\t<span class="code-tag">&lt;<span class="code-name">beans</span> <span class="hljs-attr">profile</span>=<span\n            class="code-string">"dog"</span>&gt;</span>\n\t\t<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                class="code-string">"chkui.springcore.example.hybrid.profile.service.squareenix.SleepingDogs"</span> /&gt;</span>\n\t<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>配置之后，&lt;beans&gt;中的多个&lt;bean&gt;都会被Profile控制。</p>\n\n<h2 id="h2-5">环境变量的设置</h2>\n<p>Profile的环境变量可以包含多个值。例如：</p>\n<pre><code class="java">System.setProperty(<span class="code-string">"spring.profiles.active"</span>, <span\n        class="code-string">"wow,pes"</span>);</code></pre>\n<p>这样环境中就包含了2个Profile的值。对用的@Profile或profile配置就会被启用。</p>\n<p>除了例子中给出的System::setProperty方法，Spring还提供了多种方法来设置Profile的环境变量。</p>\n\n<h4 id="h4-1"><strong>直接在Jvm启动参数中设置</strong></h4>\n<pre><code class="bash">-Dspring.profiles.active=<span class="code-string">"wow,pes"</span></code></pre>\n\n<h4 id="h4-2">使用EnvironmentCapable接口来设置</h4>\n<p>\n    ConfigurableApplicationContext继承了ConfigurableEnvironment接口我们可以通过ConfigurableEnvironment::getEnvironment方法获取到当前Spring中的环境对象——org.springframework.core.env.Environment，然后使用他来设置环境变量：</p>\n<pre><code class="java">ConfigurableApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(EnvironmentApp.class);\nConfigurableEnvironment env = ctx.getEnvironment();\n<span class="code-comment">//通过setActiveProfiles来设置。</span>\nenv.setActiveProfiles(<span class="code-string">"wow"</span>,<span class="code-string">"pes"</span>,<span\n            class="code-string">"ff"</span>);\n<span class="code-comment">//必须重建容器</span>\nctx.refresh();</code></pre>\n<p>\n    需要注意的是，在继承关系中ConfigurableApplicationContext之后才实现ConfigurableEnvironment，如果这里使用ApplicationContext::getEnvironment方法得到的是Environment，它不提供set相关的方法。所以上面的例子使用了ConfigurableApplicationContext。由于ApplicationContext的所有实现类都实现了Configurable的功能，我们也可以像下面这样进行转型：</p>\n<pre><code class="java">ApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(EnvironmentApp.class);\nEnvironment _e =ctx.getEnvironment();\nConfigurableEnvironment env = ConfigurableEnvironment.class.cast(_e);</code></pre>\n\n<h2 id="h2-6">@Profile的实现</h2>\n<p>Profile特性的实现也不复杂，其实就是实现了Conditional功能（Conditional功能见<a\n        href="https://www.chkui.com/article/spring/spring_core_configuration_annotation_and_xml" title="@Configuration与混合使用">@Configuration与混合使用</a>一文中关于Conditionally的介绍）。\n</p>\n<p>首先@Profile注解继承实现了@Conditional：</p>\n<pre><code class="java"><span class="code-meta">@Target</span>({ElementType.TYPE, ElementType.METHOD})\n<span class="code-meta">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class="code-meta">@Documented</span>\n<span class="code-meta">@Conditional</span>(ProfileCondition.class)\n<span class="code-keyword">public</span> <span class="code-meta">@interface</span> Profile {}</code></pre>\n<p>然后他的处理类实现了Condition接口：</p>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">ProfileCondition</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Condition</span> </span>{\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">boolean</span> <span\n            class="code-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>{\n\t\tMultiValueMap&lt;String, Object&gt; attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());\n\t\t<span class="code-keyword">if</span> (attrs != <span class="code-keyword">null</span>) {\n\t\t\t<span class="code-keyword">for</span> (Object value : attrs.get(<span class="code-string">"value"</span>)) {\n\t\t\t\t<span class="code-keyword">if</span> (context.getEnvironment().acceptsProfiles((String[]) value)) {\n\t\t\t\t\t<span class="code-keyword">return</span> <span class="code-keyword">true</span>;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class="code-keyword">return</span> <span class="code-keyword">false</span>;\n\t\t}\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">true</span>;\n\t}\n\n}</code></pre>\n<p>处理过程也很简单，实际上就检查@Profile注解中的值，如果和环境中的一致则添加。</p>'},393:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">一切从配置开始</h2>\n<p>在<a href="https://www.chkui.com/article/vertx/micro_service_index">微服务架构概念索引</a>一文中介绍了整个云源生应用的搭建体系，后续的内容将会从Spring\n    Cloud从技术架构，到基础设置再到团队协作方式一点一滴的记录搭建整个云服务的过程。现在从最基本的中心化配置开始介绍。</p>\n<p>Spring基金会项目繁多、种类各异，但是他们都脱离不了一个基本的要求——基于<a\n        href="https://www.chkui.com/article/spring/spring_annotation_of_xml_configuration">Spring Ioc的配置</a>。Spring的基础在于IoC容器，各种各样的项目都在IoC容器的基础之上扩展而来。在<a\n        href="https://www.chkui.com/article/spring/spring_core_design_pattern_and_ioc">设计模式与IoC</a>中已经介绍了IoCs的目的就是解决数据与Bean的关系、以及Bean与Bean之间的关系。\n</p>\n<h2 id="h2-2">Spring Cloud 中心化配置</h2>\n<p>在单Jvm的Spring应用中各种配置文件都是通过<a\n        href="https://www.chkui.com/article/spring/spring_core_environment_management_of_profile">Profile</a>结合<a\n        href="https://www.chkui.com/article/spring/spring_core_properties_management">PropertySource</a>进行管理，而到了<a\n        href="https://www.chkui.com/article/spring/spring_features_configuration">Spring Boot</a>则提供了大量的默认配置简化了这个过程。而在Spring\n    Cloud中需要管理大量的节点，中心化配置的需求随之而产生。</p>\n<p>Spring\n    Cloud的中心化配置并没有什么特别神奇的地方，实际上就是把本该放到本地的配置文件（例如application.yml）统一放置到一个仓库中。然后用一个Web服务来管理仓库，其他微服务节点从这个Web服务获取配置文件。所以就算没有Spring\n    Cloud Config提供这个功能，我们也可以自己编码在ApplicationContext的启动装载IoC之前先处理好配置。</p>\n<p>在假设有别的Spring Cloud知识之前，本文介绍不使用Netflix和Eureka注册服务的来管理中心化配置的方法。</p>\n<p><img src="http://file.mahoooo.com/res/file/2019-04-10-spring-cloud-config-struts.png" alt="Spring云源生应用-中心化配置"\n        title="配置服务结构" class="zoom-in-cursor"></p>\n<p>上图是Spring Cloud Config的基本结构。左侧是一系列的微服务节点，右侧是他们对应的配置文件。例如Node-1服务对应的是<em>node-1-config.yml</em>文件，在单一的应用中本来<em>node-1-config.yml</em>文件应该是放置在Node-1工程的classpath下的，现在的区别是将他们分开，将配置文件统一放置到一个仓库中，然后用Config-Service来管理。\n</p>\n<p>中心化配置就是这么简单，除了把配置文件拆走其他的使用方式完全一样，可以通过<a\n        href="https://www.chkui.com/article/spring/spring_core_properties_management">PropertySources或@Value注解</a>来获取配置的参数。\n</p>\n<p>至于中心化配置有什么好处就不用一一细说了，除了在负载均衡中减少配置之外，也便于环境管理等等。</p>\n<h2 id="h2-3">启用中心化配置</h2>\n<p>清楚原理之后做事就简单了，案例代码一共包含三个工程（<a\n        href="https://github.com/chkui/spring-cloud-samples/tree/master/configuration">github源码</a>），分别是<em>configuration-server</em>、<em>configuration-node-1</em>和<em>configuration-node-2</em>。configuration-server就是图中的Config-Service，他为所有的微服务节点提供中心化配置服务，所有的配置都在独立的<a\n        href="https://github.com/chkui/spring-cloud-repo">git仓库中</a>，在某个微服务节点请求配置数据的时候，<em>configuration-server</em>会去仓库中获取对应的配置并传输给微服务节点。\n</p>\n<h3 id="h3-1">Config Service</h3>\n<p>Spring Cloud的中心化配置服务通过Http请求提供配置管理服务，所以他自身也是一个Web。要启用的配置服务就2步：1.写一个配置文件指定服务端口和配置文件仓库，2.启动Spring Web服务。</p>\n<p>下面<code>application.yml</code>指定了中心化服务的端口（8888），然后指定了配置文件的Git仓库。配置文件的仓库可以是本地文件夹、可以是git仓库或者其他任何形式，这里以Git作为例子。</p>\n<pre><code class="yaml makefile"><span class="code-comment"># application.yml</span>\n<span class="code-section">server:</span>\n  port: 8888\n\n<span class="code-section">spring:</span>\n  cloud:\n    config:\n      server:\n        git:\n          uri:  https://github.com/chkui/spring-cloud-repo\n</code></pre>\n<p>配置好之后启动Web服务：</p>\n<pre><code class="java"><span class="code-comment">// chkui.spring.cloud.config.ConfigServiceApplication</span>\n\n<span class="code-meta">@EnableConfigServer</span> <span class="code-comment">//表示这是一个Configuration 服务</span>\n<span class="code-meta">@SpringBootApplication</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">ConfigServiceApplication</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(ConfigServiceApplication.class, args);\n\t}\n}\n</code></pre>\n<p>启动web并没有任何特别之处，像个普通的Spring Boot工程启动即可。</p>\n<h3 id="h3-2">Client Node</h3>\n<p>有了中心化服务之后自然是要使用它。也仅仅需要2步：1.配置微服务，2.启动微服务。配置内容如下：</p>\n<pre><code class="yaml shell"><span class="code-meta">#</span><span class="bash"> bootstrap.yml</span>\nspring:\n  application:\n    name: node-config-1\n  cloud:\n    config:\n      uri: http://localhost:8888\n</code></pre>\n<p>访问中心化配置的参数主要就2个：1.指定配置文件名称、2.指定中心化服务器的地址与端口。</p>\n<p>\n    <strong>切记使用中心化配置时，像上面这个与服务器相关的配置要写到<code>bootstrap.yml</code>中，这样才能在访问远程配置之前先获取远程服务器的参数。写到<code>application.yml</code>里会导致永远都使用默认参数</strong>。\n</p>\n<p>配置文件的名称要与<a href="https://github.com/chkui/spring-cloud-repo">配置仓库</a>中的文件名对应。下面是<em>configuration-node-1</em>对应的配置文件的内容：\n</p>\n<pre><code class="yaml makefile"><span class="code-comment"># https://github.com/chkui/spring-cloud-repo/blob/master/node-config-1.yml</span>\n<span class="code-section">server:</span>\n  port: 9081 <span class="code-comment">#配置node-1端口</span>\n<span class="code-section">message: Response Node Client1 With WebFlux(Netty)! #配置message参数。</span>\n</code></pre>\n<p>下面是<em>configuration-node-1</em>中的主要代码：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.spring.cloud.config;\n<span class="code-comment">//import 省略</span>\n\n<span class="code-meta">@SpringBootApplication</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">ConfigClientApplication1</span> </span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n        SpringApplication.run(ConfigClientApplication1.class, args);\n    }\n}\n\n<span class="code-meta">@RestController</span>\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MessageRestController</span> </span>{\n\n    <span class="code-comment">//通过@Value注解获取中心化配置的参数</span>\n    <span class="code-meta">@Value</span>(<span\n            class="code-string">"${message:Configuration Server Error(Node-1)}"</span>)\n    <span class="code-keyword">private</span> String message;\n\n    <span class="code-meta">@RequestMapping</span>(<span class="code-string">"/message"</span>)\n    <span class="hljs-function">Mono&lt;String&gt; <span class="code-title">getMessage</span><span class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> Mono.just(<span class="code-keyword">this</span>.message);\n    }\n}\n</code></pre>\n<p><em>configuration-node-1</em>用spring-boot启动了一个WebFlux，这个时候访问 <a href="http://localhost:9081/message">http://localhost:9081/message</a>\n    会返回配置文件中的信息：<em>Response Node Client1 With WebFlux(Netty)!</em>。</p>\n<h2 id="h2-4">动态刷新</h2>\n<p>可以在不重启微服务节点的情况下更新配置参数，这在某些场景下非常意义。刷新配置参数主要是使用了<code>ConfigurableApplicationContext</code>的<code>refresh</code>接口，不过Spring\n    Cloud整合了Actuator功能直接外部调用接口即可。</p>\n<p><em>configuration-node-2</em>中的代码演示了这个过程：</p>\n<p>首先需要引入<code>spring-boot-starter-actuator</code>:</p>\n<pre><code class="groovy javascript">dependencies {\n\tcompile(<span class="code-string">\'org.springframework.cloud:spring-cloud-starter-config\'</span>)\n\tcompile(<span class="code-string">\'org.springframework.boot:spring-boot-starter-actuator\'</span>) <span\n            class="code-comment">//引入actuator</span>\n\tcompile(<span class="code-string">\'org.springframework.boot:spring-boot-starter-web\'</span>)\n}\n</code></pre>\n<p>然后在Controller层增加*@RefreshScope*注解：</p>\n<pre><code class="java"><span class="code-meta">@SpringBootApplication</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">ConfigClientApplication2</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tSpringApplication.run(ConfigClientApplication2.class, args);\n    }\n}\n\n<span class="code-meta">@RefreshScope</span>\n<span class="code-meta">@RestController</span>\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MessageRestController</span> </span>{\n    <span class="code-meta">@Value</span>(<span\n            class="code-string">"${message:Configuration Server Error(Node-2)}"</span>)\n    <span class="code-keyword">private</span> String message;\n\n    <span class="code-meta">@RequestMapping</span>(<span class="code-string">"/message"</span>)\n    <span class="hljs-function">String <span class="code-title">getMessage</span><span\n            class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> <span class="code-keyword">this</span>.message;\n    }\n}\n</code></pre>\n<p>最后在本地配置参数中暴露Actuator的接口：</p>\n<pre><code class="yaml php"><span class="code-comment">#</span>\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        <span class="code-keyword">include</span>: <span class="code-string">\'*\'</span>\n</code></pre>\n<p>现在就可以通过Actuator暴露的接口来更新配置参数——Post访问 <code>localhost:9082/actuator/refresh</code>：</p>\n<pre><code class="bash">curl localhost:9082/actuator/refresh -d {} -H <span class="code-string">"Content-Type: application/json"</span>\n</code></pre>\n<p>到了Spring Boot 2.×之后Actuator默认关闭所有Web服务接口。这里仅仅是说明有这个功能，通常不会使用Web暴露接口的方式来操作。如下图，Spring Boot和Spring\n    Cloud已经暴露了大量的MBean，通常会使用JMX来管理和监控服务状态。\n    <img src="http://file.mahoooo.com/res/file/2019-04-11-spring-cloud-config-mbeans.png" alt="Spring云源生应用-中心化配置"\n         title="Spring Cloud MBeans" class="zoom-in-cursor"></p>\n<p>所以如果要使用 配置刷新 等功能建议使用<code>Spirng Boot Admin</code>或者其他基于JMX的管理工具来操作。</p>\n<h2 id="h2-5">配置说明</h2>\n<h3 id="h3-3">服务端</h3>\n<p>启用必要配置：</p>\n<ol>\n    <li>引入<code>spring-cloud-config-server</code>。</li>\n    <li>设置服务端口：<code>server.port</code></li>\n    <li>设置仓库地址：<code>spring.cloud.config.server.git.uri</code>，仓库类型可以有很多种。</li>\n</ol>\n<p>更多配置：</p>\n<ol>\n    <li><code>spring.cloud.config.server.git.timeout</code><a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_setting_http_connection_timeout"\n            title="可以设置访问仓库的超时时间（秒）">可以设置访问仓库的超时时间（秒）</a>。\n    </li>\n    <li><code>spring.cloud.config.server.git.uri</code><a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_placeholders_in_git_uri"\n            title="可以使用`{application}`、`{profile}`等占位符">可以使用<code>{application}</code>、<code>{profile}</code>等占位符</a>。用于复杂的仓库管理。\n    </li>\n    <li>占位符可以配合使用通配符和正则表达式来解决更复杂的配置问题：<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_pattern_matching_and_multiple_repositories"\n            title="参考资料">详细</a>。\n    </li>\n    <li>通常git仓库都涉及到权限认证，可以用<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_authentication" title="HTTPS">HTTPS</a>或者<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_git_ssh_configuration_using_properties"\n            title="ssh-key">SSH-KEY</a>的方式解决。\n    </li>\n    <li><a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_force_pull_in_git_repositories"\n           title="`force-pull`参数可以强制更新本地仓库中的配置文件"><code>force-pull</code>参数可以强制更新本地仓库中的配置文件</a>。\n    </li>\n    <li><code>spring.cloud.config.server.git.repos</code>参数可以用于多项配置，用子目录来区分配置。</li>\n    <li><code>spring.cloud.config.server.git.refreshRate</code>可以控制服务器到仓库的更新频率。默认为0，表示只要有微服务请求了数据就会去远程仓库获取文件。</li>\n    <li><code>spring.cloud.config.server.git.basedir</code>用于配置远程文件下载本地的临时文件夹，默认使用操作系统的<code>/tmp</code>。</li>\n    <li>除了使用本文介绍的使用git作为配置文件仓库，还支持<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_file_system_backend"\n            title="本地文件系统">本地文件系统</a>、<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#vault-backend" title="Vault">Vault</a>、<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_jdbc_backend"\n            title="数据库">数据库</a>、<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_redis_backend" title="Redis">Redis</a>、<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_credhub_backend"\n            title="CredHub">CredHub</a>等方式管理配置仓库。\n    </li>\n    <li>[可以同时使用git、svn等仓库](Composite Environment Repositories "可以同时使用git、svn等仓库")。</li>\n    <li><a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_property_overrides"\n           title="`spring.cloud.config.server.overrides`"><code>spring.cloud.config.server.overrides</code></a>用于配置通用属性，通过这个配置可以让所有的节点都获取这个属性。\n    </li>\n    <li><a href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_security" title="安全管理">安全管理</a>用于在一些非独立的环境做中心化配置，比如配置服务器直接放置在外网。\n    </li>\n    <li>通常情况下会将Config Server作为一个独立的Web服务，但是也可以使用<code>spring.cloud.config.server.bootstrap</code>和``<a\n            href="https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_embedding_the_config_server"\n            title="但是也可以把他嵌入别的系统中去">嵌入别的系统中去</a>。\n    </li>\n</ol>\n<h3 id="h3-4">客户端</h3>\n<ol>\n    <li>引入<code>spring-cloud-starter-config</code>。</li>\n    <li>在<code>bootstrap.yml</code>设置中心化配置服务地址：<code>spring.cloud.config.uri</code>。</li>\n    <li>在<code>bootstrap.yml</code>设置文件名：<code>spring.application.name</code>。</li>\n    <li>可以在<code>bootstrap.yml</code>设置profiles：<code>spring.profiles.active</code>。非必要</li>\n</ol>\n<h3 id="h3-5">配置仓库</h3>\n<ol>\n    <li>中心化配置文件同样支持<code>profile</code>特性，所以在仓库中具备以下命名规则：</li>\n</ol>\n<pre><code class="coffeescript"><span class="hljs-regexp">/{application}/</span>{profile}[/{label}]\n/{application}-{profile}.yml\n<span class="hljs-regexp">/{label}/</span>{application}-{profile}.yml\n/{application}-{profile}.properties\n<span class="hljs-regexp">/{label}/</span>{application}-{profile}.properties\n</code></pre>'},403:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>本文将解释如何在Windows下安装TensorFlow。</p>\n\n<h2 id="h2-1">确定安装哪类TensorFlow</h2>\n<p>需要先确定哪种类型的TensorFlow：</p>\n<ul>\n    <li><strong>仅支持CUP运算版本：</strong>如果电脑的系统没有&nbsp;NVIDIA®的GPU，那么必须安装这个版本。这个版本的TensorFlow安装非常简单（安装仅需一个命令，5到10分钟），所以即使系统中有满足要求的NVIDIA®\n        GPU官方还是建议在学习阶段安装这个版本。\n    </li>\n    <li><strong>支持GPU运算的版本：</strong>TensorFlow程序在GPU下运行比在CPU下运行明显快很多。如果系统中包含&nbsp;NVIDIA®的GPU满足下一个小节所示的条件并且程序对性能要求很高，建议安装此版本。\n    </li>\n</ul>\n\n<h2 id="h2-2">运行TensorFlow所需要的GPU配置</h2>\n<p>如果在系统中安装使用GPU运行的TensorFlow，需要确保下面介绍的NVIDIA软件已经安装到系统中。</p>\n<ul>\n    <li>CUDA® Toolkit 8.0。请看 <a\n            href="http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/#axzz4eDEVDKkM" rel="nofollow">NVIDIA安装cuda</a>\n        的文档，根据文档中的描述确保已经将CUDA相关的路径增加到&nbsp;<code>%PATH%</code>&nbsp;环境变量中。\n    </li>\n    <li>NVIDIA的驱动关联&nbsp;CUDA Toolkit 8.0。</li>\n    <li>cuDNN v5.1。请查看 <a href="https://developer.nvidia.com/cudnn" rel="nofollow">NVIDIA&nbsp;cudnn</a>\n        文档。需要注意的是cuDNN通常安装在与其他CUDA动态链接库（dll）不同的位置。确保已经将cuDNN的 动态链接库（dll）的地址添加到系统的&nbsp;&nbsp;<code>%PATH%</code>&nbsp;环境变量中。\n    </li>\n    <li>GPU显卡必须拥有3.0以上版本的CUDA计算能力，查看 <a href="https://developer.nvidia.com/cuda-gpus" rel="nofollow">NVIDIA显卡支持列表</a>\n        了解支持情况。\n    </li>\n</ul>\n<p>如果系统中已经安装了以前的相关包，请更新到所指定的版本。</p>\n\n<h2 id="h2-3">如何安装TensorFlow</h2>\n<p>在安装TensorFlow之前必须选定一个安装机制。目前提供2种机制：</p>\n<ul>\n    <li>"native"app</li>\n    <li>Anaconda</li>\n</ul>\n<p>\n    Native的安装（以下简称本地安装）方式会将TensorFlow直接安装在当前的系统中，不会在系统和TensorFlow之间搭建任何的虚拟环境，所以本地安装不会额外安装一个独立的容器。需要注意的是本地安装可能会干扰系统中其他基于python安装的程序。如果事先已经安装配置了满足需要的python环境，本地安装通常只需要一个命令就可以完成。使用本地安装，用户可以在系统中任何位置运行TensorFlow。</p>\n<p>在Anaconda模式下，需要使用conda创建一个虚拟环境。官方优先推荐使用&nbsp;<code>pip install</code>&nbsp;命令来安装TensorFlow，其次再考虑anaconda的&nbsp;<code>conda\n    install</code>&nbsp;命令。conda包是第三方社区提供的（非TensorFlow官方），TensorFlow团队从始至终都不会去测试在conda中运行的情况，在使用时需考虑这个风险。</p>\n\n<h3 id="h3-1">本地安装</h3>\n<p>首先，需要安装以下版本的python：</p>\n<ul>\n    <li><a href="https://www.python.org/downloads/release/python-352/" rel="nofollow">Python 3.5.x from python.org</a>\n    </li>\n</ul>\n<p>TensorFlow在windows操作系统中仅仅支持3.5.x版本的python。Python 3.5.x附带pip3软件包管理器，这是用于安装TensorFlow的程序。</p>\n<p>安装TensorFlow需要启动一个终端（terminal），然后在该终端中输入对应的pip3 install命令。安装仅支持CPU版本的TensorFlow，输入以下命令：</p>\n<pre class="lua"><code class="language-bash">C:\\&gt; pip3 install <span class="code-comment">--upgrade tensorflow</span></code></pre>\n<p>安装GPU版本的TensorFlow，使用以下命令：</p>\n<pre class="lua"><code class="language-bash">C:\\&gt; pip3 install <span\n        class="code-comment">--upgrade tensorflow-gpu</span></code></pre>\n<p>Anaconda模式安装</p>\n<p><span style="color:#FF0000">再次强调，Anaconda安装是有第三方社区提供的，非官方。</span></p>\n<p>在Anaconda环境中安装TensorFlow分为以下几个步骤：</p>\n<ol>\n    <li>按照&nbsp;<a href="https://www.continuum.io/downloads" rel="nofollow">Anaconda download site</a>&nbsp;的说明进行下载和安装操作。\n    </li>\n    <li>调用以下命令来创建一个名为tensorflow的conda环境：\n        <pre class="groovy"><code class="language-bash"><span class="code-string">C:</span>&gt; conda create -n tensorflow </code></pre>\n        <p></p></li>\n    <li><p>键入以下命令来启用conda环境：</p>\n        <pre class="yaml"><code class="language-bash"><span class="hljs-attr">C:</span>&gt; activate tensorflow\n (tensorflow)C:&gt;  <span class="code-comment"><span\n                    class="code-comment"># Your prompt should change </span></span></code></pre>\n        <p></p></li>\n    <li><p>键入以下命令在conda环境中安装TensorFlow。这里 安装CPU版本的命令：</p>\n        <pre class="groovy"><code class="language-bash">(tensorflow)<span class="code-string">C:</span>&gt; pip install --ignore-installed --upgrade <span\n                class="code-string">https:</span><span class="code-comment">//storage.googleapis.com/tensorflow/windows/cpu/tensorflow-1.0.1-cp35-cp35m-win_amd64.whl </span>\n</code></pre>\n        <p>这是GPU版本的命令：</p>\n        <pre class="groovy"><code class="language-bash">(tensorflow)<span class="code-string">C:</span>&gt; pip install --ignore-installed --upgrade <span\n                class="code-string">https:</span><span class="code-comment">//storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-1.0.1-cp35-cp35m-win_amd64.whl </span></code></pre>\n        <p></p></li>\n</ol>\n\n<h3 id="h3-2">验证安装&nbsp;</h3>\n<ol>\n    <li>通过以下步骤来验证TensorFlow是否安装成功：</li>\n    <li>启动一个终端（比如CMD）</li>\n    <li>如果通过Anaconda安装，先启动Anaconda环境。</li>\n    <li>在终端运行python</li>\n    <li>\n        <pre class="groovy"><code class="language-bash"><span class="code-string">C:</span>&gt; python </code></pre>\n    </li>\n    <li>在python的交互环境中输入以下脚本代码：</li>\n    <li> <pre class="python"><code class="python"><span class="code-meta"><span\n            class="code-meta">&gt;&gt;&gt; </span></span><span class="code-keyword"><span\n            class="code-keyword">import</span></span> tensorflow <span class="code-keyword"><span class="code-keyword">as</span></span> tf\n\n\n\n\nhello = tf.constant(<span class="code-string"><span class="code-string">\'Hello, TensorFlow!\'</span></span>)\nsess = tf.Session()\nprint(sess.run(hello))\n </code></pre>\n        <p>如果python输出以下内容，则表明TensorFlow已经安装成功然后就可以写TensorFlow的程序了：</p></li>\n    <li>\n        <pre class=""><code class="language-bash">Hello, TensorFlow!</code></pre>\n        <p>如果收到了一些异常信息，请继续向下看。</p></li>\n</ol>\n\n<h3 id="h3-3">常见的安装问题</h3>\n<p>TensorFlow通过Stack Overflow网站来记录错误信息以及处理方法。下面的列表包含一些跳转的到&nbsp;Stack Overflow的连接。如果在安装过程中遇到的问题没有在下面中，请到Stack\n    Overflow去搜索相关的关键字。若还是搜索不到，请直接提出新问题并标记&nbsp;<code>tensorflow</code>&nbsp;的标签。</p>\n<table>\n    <tbody>\n    <tr>\n        <th>Stack Overflow Link</th>\n        <th>Error Message</th>\n    </tr>\n    <tr>\n        <td><a href="https://stackoverflow.com/q/41007279" rel="nofollow">41007279</a></td>\n        <td>\n            [...\\stream_executor\\dso_loader.cc] Couldn\'t open CUDA library nvcuda.dll\n        </td>\n    </tr>\n    <tr>\n        <td><a href="https://stackoverflow.com/q/41007279" rel="nofollow">41007279</a></td>\n        <td>\n            [...\\stream_executor\\cuda\\cuda_dnn.cc] Unable to load cuDNN DSO\n        </td>\n    </tr>\n    <tr>\n        <td><a href="http://stackoverflow.com/q/42006320" rel="nofollow">42006320</a></td>\n        <td>\n            ImportError: Traceback (most recent call last): File "...\\tensorflow\\core\\framework\\graph_pb2.py", line 6,\n            in from google.protobuf import descriptor as _descriptor ImportError: cannot import name \'descriptor\'\n        </td>\n    </tr>\n    <tr>\n        <td><a href="https://stackoverflow.com/q/42011070" rel="nofollow">42011070</a></td>\n        <td>\n            No module named "pywrap_tensorflow"\n        </td>\n    </tr>\n    </tbody>\n</table>'}});