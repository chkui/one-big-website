webpackJsonp([5],{360:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p><a href="https://www.chkui.com/" title="@随风溜达的向日葵">@随风溜达的向日葵</a></p>\n<h2 id="h2-1">Nextjs</h2>\n<p><a href="https://nextjs.org/"><em>Nextjs</em></a>是<a href="https://reactjs.org/"><em>React</em></a>生态中非常受欢迎的SSR（server\n    side render——服务端渲染）框架，只需要几个步骤就可以搭建一个支持SSR的工程（_Nextjs_的快速搭建见<a\n            href="https://www.chkui.com/article/react/nextjs_getting_starting"><em>Next.js入门</em></a>）。 本文的案例代码来自于<a\n            href="https://github.com/palmg/website-standard-with-next">前端标准模板项目</a>。</p>\n<h2 id="h2-2">服务端组织数据</h2>\n<p><em>Nextjs</em>提供了便捷强大的服务端渲染功能——<strong>getInitialProps()</strong>，通过这个方法可以简单为服务端和前端同时处理异步请求数据：</p>\n<pre><code class="javascript"><span class="code-keyword">const</span> load = <span class="code-keyword">async</span> () =&gt;{\n    <span class="code-keyword">return</span> <span class="code-keyword">new</span> <span\n            class="code-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">res, rej</span>)=&gt;</span>{\n        res(<span class="code-string">\'Success\'</span>)\n    })\n}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Simple</span> <span\n        class="code-keyword">extends</span> <span class="code-title">React</span>.<span\n        class="code-title">Component</span></span>{\n    <span class="code-keyword">static</span> <span class="code-keyword">async</span> getInitialProps({req, query}) {\n        <span class="code-keyword">const</span> data = <span class="code-keyword">await</span> load();\n        <span class="code-keyword">return</span> {data}\n    }\n    render() {\n        <span class="code-keyword">return</span>(<span class="xml"><span class="code-tag">&lt;<span\n            class="code-name">p</span>&gt;</span>{this.props.data}<span class="code-tag">&lt;/<span\n            class="code-name">p</span>&gt;</span></span>)\n    }\n}\n</code></pre>\n<p>Next的强大之一体现在就这么几行代码就解决了SSR中最麻烦的前后端异步数据组装功能。再复杂的异步数据组装过程都可以放置到代码中的Promise对象中。</p>\n<h2 id="h2-3">页面与内页</h2>\n<p>在继续述说本文内容之前还需要强化两个概念——<strong>内页</strong>与<strong>页面</strong>。</p>\n<p>通过浏览器输入一个地址获取到的内容称之为<strong>页面</strong>。</p>\n<p>而在单页面应用中也会有通过导航栏或菜单控制的内容切换效果，我们将这些切换的内容称之为<strong>内页</strong>。单页面应用中一般会先打开一个页面，然后通过Dom的增删改模拟页面切换的效果。</p>\n<h2 id="h2-4">Nextjs中SSR渲染的局限性</h2>\n<p>\n    <code>getInitialProps()</code>方法虽然强大好用，但是现在还存在一个问题——<strong>只能在“内页”中使用</strong>。<em>Nextjs_规定了所有放置到<code>./pages</code>中的文件（通常是*.js_文件，也可以引入</em>.ts*文件）都视为一个内页，这些文件中被导出的React组件可以直接输入地址上访问。例如现在有<a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/pages/about.js"><em>./pages/about.js</em></a>文件，运行\n    <em>Nextjs</em> 后在浏览输入<code>http://localhost:3000/about</code>就可以看到这个组件，而<a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/pages/async/simple.js"><em>./pages/async/simple.js</em></a>对用的路径是<code>http://localhost:3000/async/simple</code>。\n</p>\n<p>但是在其他路径（比如<code>./component</code>）的组件是无法使用<code>getInitialProps()</code>方法的。乍一看这样似乎没多大问题，但是某些应用又需要这些组件不能放置到<code>./pages</code>中暴露到_url_中，又需要异步加载数据。看下面的例子。\n</p>\n<h3 id="h3-1">按需加载菜单的例子</h3>\n<p><img src="https://oscimg.oschina.net/oscnet/fd51a66e0f097658f7db8e37fb621c76857.jpg" alt="Nextjs+React非页面组件SSR渲染"\n        title="应用菜单" class="zoom-in-cursor"></p>\n<p>如上图。在企业级应用中（例如OA系统）通常不太需要实现SSR，这个时候可以根据角色权限在组件的<code>componentDidMount()</code>方法中异步加载菜单，但是在某些时候（例如一个可配置菜单的内容网站，或者对企业级应用进行服务端缓存）也会有菜单异步加载并且实现SSR的需要，这个时候需要在_Nextjs_框架的基础上扩展。\n</p>\n<p>看到这里可能你会想可以把菜单的组装像下面放到每个内页的<code>getInitialProps()</code>方法中去：</p>\n<pre><code class="javascript"><span class="code-keyword">const</span> Comp = <span class="hljs-function"><span\n        class="hljs-params">props</span> =&gt;</span>(<span class="xml"><span class="code-tag">&lt;<span\n        class="code-name">div</span>&gt;</span><span class="code-tag">&lt;<span class="code-name">Menus</span> <span\n        class="hljs-attr">menus</span>=<span class="code-string">{props.menus}/</span>&gt;</span><span class="code-tag">&lt;<span\n        class="code-name">div</span>&gt;</span>{props.pageData}<span class="code-tag">&lt;/<span\n        class="code-name">div</span>&gt;</span><span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span>);\nComp.getInitialProps = async ({req})=&gt;{\n    //load Menu Promise\n    const menus = await getMenus();\n    //load Page Data Promise\n    const pageData = await getPageData();\n    return {menus, pageData}\n}\n</span></code></pre>\n<p>这样做在实现上没问题，但是在架构设计上是颇为糟糕的。以下三个原因：</p>\n<ol>\n    <li>\n        对于React有各种各样的描述，比如单向数据流、组件化等等。但是他的核心思想其实是<strong>分而治之</strong>。在Jquery“统治”的年代可以使用_selector_(比如<code>$(\'#id\')</code>)轻易获取到页面上的任何元素。一个项目如果没有很好的规范化管理（长久的人工规范化管理是需要投入不少成本的），久而久之会发现各个板块之间耦合性越来越强、坑越来越多(代码腐烂)。而React的单向数据流让组件与组件之间没有直接的沟通方式，规范化从技术层面就被强化，进而才会产生了_Redux_、_Flux_这一类按照“分-总-分”的模式（实际上就是一个消息总线模式）去控制模块间沟通的。所以将业务逻辑相关性并不强的页面和菜单放置在一个地方处理并不合理。\n    </li>\n    <li>绝大多数项目都不是一个人开发的，一个架构设计者要考虑到未来参与项目的开发者水平参差不齐。如果让框架级的结构直接暴露到业务开发者的面前，保不准某个负责业务开发的小伙伴忽略或修改了什么代码导致框架级的坑出现。</li>\n    <li>按照上面的代码，实际上要求每个内页都保留<code>const menus = await getMenus();</code>、<code>&lt;Menus menus={props.menus}/&gt;</code>这一类的代码（每个内页都复制粘贴）。在架构上这叫“样板式代码”，架构设计者应当尽量将这些代码通过“分层”的方式放到一个地方去处理。\n    </li>\n</ol>\n<p>所以有理由为_Nextjs_的<code>./pages</code>之外的组件实现ssr数据异步加载。</p>\n<h2 id="h2-5">组件ssr异步数据实现</h2>\n<p>为了实现本文的需求——让所有组件实现类似于<code>getInitialProps()</code>的方法，我们先要理清_Nextjs_前后端渲染的过程。</p>\n<h3 id="h3-2">渲染过程</h3>\n<p>_Nextjs_为使用者提供了<a href="https://github.com/palmg/website-standard-with-next/blob/master/pages/_app.js"><code>./pages/_app.js</code></a>和<a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/pages/_document.js"><code>./pages/_document.js</code></a>在内页处理之前执行某些任务,后者用于构建整个HTML的结构。并且<a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/pages/_document.js"><code>./pages/_document.js</code></a>只会在服务端执行。本文将开发者自行实现的内页称为_page,现在对于_Nextjs_就有三个类型的构建——_<em>document</em>、_<em>app_和_component</em>,每个构建都可以包含<code>static\n    getInitialProps()</code>、<code>constructor()</code>和<code>render()</code>方法，他们的执行过程如下。</p>\n<h4 id="h4-1">服务端执行过程</h4>\n<ol>\n    <li>_document getInitialProps()</li>\n    <li>_app getInitialProps()</li>\n    <li>_page getInitialProps()</li>\n    <li>_app constructor()</li>\n    <li>_app render()</li>\n    <li>_page constructor()</li>\n    <li>_page render()</li>\n    <li>_document constructor()</li>\n    <li>_document render()</li>\n</ol>\n<p>以上的过程分解如下：</p>\n<ol>\n    <li>\n        <p><strong>组装异步数据（1~3）</strong>：服务端会先开始执行<code>_document.getInitialProps()</code>这个静态方法，方法中会执行<code>_app.getInitialProps()</code>再遍历所有的<code>_page.getInitialProps()</code>执行到这里所有的异步数据完成组装。\n        </p>\n    </li>\n    <li>\n        <p><strong>渲染React组件（4~7）</strong>：有了数据之后开始渲染页面，会使用<a\n                href="https://reactjs.org/docs/react-dom-server.html"><code>ReactDOMServer</code></a>执行产生一个HTML格式的字符串。\n        </p>\n    </li>\n    <li>\n        <p><strong>构建静态HTML（8~9）</strong>：有了<a href="https://reactjs.org/docs/react-dom-server.html"><code>ReactDOMServer</code></a>产生的字符串剩下的工作就是将其组装为一个标准的HTML文档返回给客户端。\n        </p>\n    </li>\n</ol>\n<h4 id="h4-2">客户端执行过程</h4>\n<p><strong>初始化页面时（首次打开页面）：</strong></p>\n<ol>\n    <li>_app constructor()</li>\n    <li>_app render()</li>\n    <li>_page constructor()</li>\n    <li>_page render()</li>\n</ol>\n<p>\n    客户端在首次打开页面时（或刷新页面）服务端已经提供了完整的HTML文档可以立即显示。此时React的组件依然执行一次虚拟Dom渲染，所以所有的组件都会执行。然后_Nextjs_利用类似于_React_服务端渲染的_checksum_的机制防止虚拟Dom对真实Dom进行渲染，关于_React_服务端渲染的_checksum_机制可以到<a\n        href="https://www.chkui.com/article/react/react_server_render_with_checksum">React 前后端同构防止重复渲染</a>一文了解。</p>\n<p><strong>内页跳转时（通过<code>next/link</code>跳转）：</strong></p>\n<ol>\n    <li>_app getInitialProps()</li>\n    <li>_page getInitialProps()</li>\n    <li>_app render()</li>\n    <li>_page constructor()</li>\n    <li>_page render()</li>\n</ol>\n<p>客户端跳转到一个新的内页和服务端渲染就没有什么关系了。__app和_page_的<code>getInitialProps()</code>先组装数据，然后通过<code>props</code>将组装好的数据传递给组件去渲染。需要注意的是_app的构造方法在内页跳转的时候并不会执行，因为它只在整个页面渲染的时候实例化一次。\n</p>\n<h3 id="h3-3">实现</h3>\n<p>在了解_Nextjs_解执行过程之后实现需求就很简单了——先通过_document或_app的<code>getInitialProps()</code>方法完成数据组装，然后将数据传递给对应的组件即可。当然按照分而治之的思想不能直接在框架去完成业务的事，需要为组件提供一个注册接口然后由_document或_app使用注册的方法去构建业务数据。\n</p>\n<p><strong>数据加载方法注册</strong></p>\n<p>首先需要为我们组件提供一个注册异步加载数据的接口，组件可以利用这个接口注册异步加载数据的方法让框架统一去<code>getInitialProps()</code>执行。 <a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/util/serverInitProps.js"><code>./util/serverInitProps.js</code></a>提供了这个功能:\n</p>\n<pre><code class="javascript"><span class="code-keyword">const</span> FooDict = {};\n<span class="code-comment">//注册方法</span>\n<span class="code-keyword">export</span> <span class="code-keyword">const</span> registerAsyncFoo = <span\n            class="hljs-function">(<span class="hljs-params">key, foo, params = {}</span>) =&gt;</span> {\n    FooDict[key] = {foo, params};\n};\n\n<span class="code-comment">//获取方法</span>\n<span class="code-keyword">export</span> <span class="code-keyword">const</span> executeAsyncFoo = <span\n            class="code-keyword">async</span> () =&gt; {\n    <span class="code-keyword">const</span> valueDict = {};\n    <span class="code-keyword">const</span> keys = <span class="code-built_in">Object</span>.keys(FooDict);\n    <span class="code-keyword">for</span> (<span class="code-keyword">let</span> key <span\n            class="code-keyword">of</span> keys) {\n        <span class="code-keyword">const</span> dict = FooDict[key];\n        valueDict[key] = <span class="code-keyword">await</span> dict.foo(dict.params);\n    }\n    <span class="code-keyword">return</span> valueDict;\n};\n\n\n</code></pre>\n<p>然后我们在<a\n        href="https://github.com/palmg/website-standard-with-next/blob/master/components/app/application/menu.js"><code>menu</code></a>组件中注册异步获取数据的方法：\n</p>\n<pre><code class="javascript">registerAsyncFoo(<span class="code-string">\'menus\'</span>, getMenus);\n</code></pre>\n<p><code>getMenus</code>模拟异步获取数据的过程:</p>\n<pre><code class="javascript"><span class="code-keyword">import</span> {Menus} <span\n        class="code-keyword">from</span> <span class="code-string">"../../../../data/menuData"</span>;\n<span class="code-keyword">export</span> <span class="code-keyword">const</span> getMenus = <span class="hljs-function"><span\n            class="hljs-params">()</span> =&gt;</span> {\n    <span class="code-comment">//可以将这个promise修改为一个net方法实现异步动态装菜菜单</span>\n    <span class="code-keyword">return</span> <span class="code-keyword">new</span> <span\n            class="code-built_in">Promise</span>(<span class="hljs-function">(<span\n            class="hljs-params">resolve, reject</span>) =&gt;</span> {\n        resolve(Menus)\n    })\n};\n</code></pre>\n<p>注册完成后再<code>_app</code>中执行异步加载：</p>\n<pre><code class="javascript"><span class="code-keyword">import</span> {executeAsyncFoo} <span\n        class="code-keyword">from</span> <span class="code-string">"../util/serverInitProps"</span>;\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">ExpressApp</span> <span\n        class="code-keyword">extends</span> <span class="code-title">App</span> </span>{\n    <span class="code-keyword">static</span> <span class="code-keyword">async</span> getInitialProps({Component, router, ctx}) {\n        info(<span class="code-string">\'Execute _App getInitialProps()!\'</span>, <span class="code-string">\'executeReport\'</span>);\n        <span class="code-comment">/**\n         * app的getInitialProps会在服务端被调用一次，在前端每次切换页面时被调用。\n         */</span>\n        <span class="code-keyword">let</span> pageProps = {}, appProps = {};\n        <span class="code-keyword">if</span> (Component.getInitialProps) {\n            pageProps = <span class="code-keyword">await</span> Component.getInitialProps(ctx);\n        }\n        <span class="code-keyword">if</span> (ctx &amp;&amp; !ctx.req) {<span class="code-comment">//客户端执行</span>\n            appProps = <span class="code-built_in">window</span>.__NEXT_DATA__.props.appProps;\n        } <span class="code-keyword">else</span> {<span class="code-comment">//服务端执行</span>\n            appProps = <span class="code-keyword">await</span> executeAsyncFoo();\n        }\n        <span class="code-keyword">return</span> {pageProps, appProps}\n    }\n    <span class="code-comment">//other function</span>\n}\n</code></pre>\n<p>在服务端获取到数据之后会返回给<code>_ducoment</code>，_Nextjs_会将这些数据写到HTML的<code>window.__NEXT_DATA__</code>对象上而后在客户端可以从这个对象获取到已经在服务端加载的数据。\n    最后用React的Context特性传递数据，有需要用到这些数据的组件可以从<a\n            href="https://github.com/palmg/website-standard-with-next/blob/master/components/app/applicationContext.js"><code>ApplicationContext</code></a>中获取这些数据:\n</p>\n<pre><code class="javascript"><span class="code-comment">//_app</span>\n<span class="code-keyword">import</span> ApplicationContext <span class="code-keyword">from</span> <span\n            class="code-string">\'../components/app/applicationContext\'</span>\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">ExpressApp</span> <span\n        class="code-keyword">extends</span> <span class="code-title">App</span> </span>{\n     <span class="code-comment">//other function</span>\n     render() {\n        info(<span class="code-string">\'Execute _App render()!\'</span>, <span class="code-string">\'executeReport\'</span>);\n        <span class="code-keyword">const</span> {Component, pageProps, appProps} = <span\n            class="code-keyword">this</span>.props;\n        <span class="code-keyword">return</span> (\n            &lt;ApplicationContext.Provider value={appProps}&gt;\n                &lt;Application&gt;\n                    &lt;Component {...pageProps} /&gt;\n                &lt;/Application&gt;\n            &lt;/ApplicationContext.Provider&gt;\n        )\n    }\n    //other function\n}\n</code></pre>\n<pre><code class="javascript"><span class="code-comment">//menu</span>\n<span class="code-keyword">import</span> ApplicationContext <span class="code-keyword">from</span> <span\n            class="code-string">\'../applicationContext\'</span>\n<span class="code-keyword">const</span> Menu = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> {\n    <span class="code-keyword">return</span> (\n        <span class="xml"><span class="code-tag">&lt;<span\n                class="code-name">ApplicationContext.Consumer</span>&gt;</span>\n            {appProps =&gt; {\n                const {menus} = appProps;\n                return menus.map(menu =&gt; (\n                    <span class="code-tag">&lt;<span class="code-name">Link</span> <span\n                            class="hljs-attr">href</span>=<span class="code-string">{menu.href}</span>&gt;</span>\n                        <span class="code-tag">&lt;<span class="code-name">a</span>&gt;</span>{menu.name}<span\n                    class="code-tag">&lt;/<span class="code-name">a</span>&gt;</span>\n                    <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n                ))\n            }}\n        <span class="code-tag">&lt;/<span class="code-name">ApplicationContext.Consumer</span>&gt;</span>\n    );\n};\n</span></code></pre>\n<p><a href="https://github.com/palmg/website-standard-with-next/blob/master/util/serverInitProps.js"><code>./util/serverInitProps.js</code></a>可以在任何组件中使用，<code>_app</code>会逐一执行方法获取数据按照kev-value的方式设置到<code>ApplicationContext</code>中，而任意组件要做的仅仅是从<code>ApplicationContext</code>拿到目标数据。\n</p>\n<p>当然传递数据的方式不仅仅局限于React的Context特性，换成Redux或全局管理数据的方法都是可行的。</p>\n<p><a href="https://www.chkui.com/" title="@随风溜达的向日葵">@随风溜达的向日葵</a></p>'},374:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>在<a href="https://www.chkui.com/article/spring/spring_core_auto_inject_of_annotation" title="注解自动装载">注解自动装载</a>中介绍了通过注解（Annotation）自动向Bean中注入其他Bean的方法，本篇将介绍通过注解（Annotation）向容器添加Bean的方法。\n</p>\n<p>\n    Spring的核心容器提供了@Component和@Bean注解来标记如何向IoC容器添加Bean。在核心包中@Component又派生了@Service、@Controller和@Repository这三个注解（在其他的Spring工程或包中还有更多的派生），本文主要介绍@Component及其派生注解的使用。</p>\n\n<h2 id="h2-1">一个简单的使用例子</h2>\n<p>\n    要想使用@Component等注解来向容器添加Bean，需要向IoC容器指明什么类有这个注解，所以Spring提供了一个扫描机制让使用者指定要检查的路径。配置非常简单，只要使用上下文的component-scan标签即可。我们通过下面的例子来简单说明如何配置。</p>\n<p>例子中的代码仅用于说明问题，并不能运行。源码请到<a href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">https://gitee.com/chkui-com/spring-core-sample</a>自行clone，例子在<em>chkui.springcore.example.hybrid.component</em>包中。\n</p>\n<p>有一个接口和一个实现类作为要添加到IoC容器的Bean：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.component.bean;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n            class="code-title">NameService</span> </span>{\n\t<span class="hljs-function">String <span class="code-title">getName</span><span class="hljs-params">()</span></span>;\n}</code></pre>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.component.bean;\n\n<span class="code-meta">@Component</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">NameServiceImpl</span> <span class="code-keyword">implements</span> <span\n            class="code-title">NameService</span></span>{\n\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">getName</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"This is My Component"</span>;\n\t}\n}</code></pre>\n<p>在实现类NameServiceImpl上使用了@Component注解。</p>\n<p>然后XML（/spring-core-sample/src/main/resources/hybrid/component）配置为：</p>\n<pre><code class="xml"><span class="php"><span class="code-meta">&lt;?</span>xml version=<span\n        class="code-string">"1.0"</span> encoding=<span class="code-string">"UTF-8"</span><span\n        class="code-meta">?&gt;</span></span>\n<span class="code-tag">&lt;<span class="code-name">beans</span> <span class="hljs-attr">xmlns</span>=<span\n        class="code-string">"http://www.springframework.org/schema/beans"</span>\n    <span class="hljs-attr">xmlns:xsi</span>=<span\n            class="code-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n    <span class="hljs-attr">xmlns:context</span>=<span class="code-string">"http://www.springframework.org/schema/context"</span>\n    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="code-string">"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\n    \n    <span class="code-tag">&lt;<span class="code-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span\n            class="code-string">"chkui.springcore.example.hybrid.component.bean"</span>/&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>XML配置文件中没有任何&lt;bean&gt;的声明，仅仅是通过component-scan启用了路径扫描功能，base-package指定了扫描的包路径。</p>\n<p>然后我们加载这个XML运行Spring IoC容器：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.component;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">SimpleScanApp</span> </span>{\n\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tprint(<span class="code-keyword">new</span> ClassPathXmlApplicationContext(<span class="code-string">"hybrid/component/scanConfig.xml"</span>));\n\t}\n\t\n\t<span class="hljs-function"><span class="code-keyword">private</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">print</span><span class="hljs-params">(ApplicationContext context)</span> </span>{\n    \tNameService service = context.getBean(NameService.class);\n    \tSystem.out.println(service.getName());\n\t}\n}</code></pre>\n<p>运行之后NameServiceImpl就会作为一个Bean添加到IoC容器中。</p>\n<p>在<a href="https://www.chkui.com/article/spring/spring_core_ioc_extension_points" title="IOC功能扩展点">IOC功能扩展点</a>&nbsp;一文中已经介绍通过XML、@Component、@Bean任何一种方式去声明一个Bean都会转化为一个&nbsp;<a\n        href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinition.html"\n        rel="nofollow">BeanDefinition</a>的实现类交给BeanFactory来创建实例，所以实际上通过@Component注解和在XML文件中编写一个&lt;bean&gt;标签在结果上并没有什么区别——都是向容器添加了一个Bean实例。但是Spring偏偏提供了@Bean和@Component（以及他的派生注解）2个注解来声名Bean，这当中肯定是有一些差异的。\n</p>\n<p>@Bean在后续的文章会介绍，它就等价与在XML编写一个&lt;bean&gt;标签。而@Component以及他的派生注解除了是一个IoC容器中的Bean还有许多附加的含义。</p>\n\n<h2 id="h2-2">Stereotype与功能分层</h2>\n<p>观察@Bean和@Component两个注解的包，前者是在 <em>org.springframework.context.annotation</em> ，而后者是在&nbsp;<em>org.springframework.stereotype</em>\n    。不仅仅是@Component，他的派生注解@Service、@Controller和@Repository都在这个包中，实际上它就是在告诉使用者这些注解提供<em>stereotype</em>的特性（或者称为功能、作用）。\n</p>\n<p>那什么是<em>stereotype</em>特性呢？这很难通过Stereotype这个词的字面意思（这个词能翻译的意思很多，这里最接近的翻译应该是“旧规矩”或者“使固定”）来理解。</p>\n<p>\n    Stereotype特性最早出现在J2EE6中（忘记是哪个JSR提出的了），可以理解为围绕着“元数据”功能而发展出来的一种设计模式，虽然我很难说清楚他属于23个设计模式中的哪一个，但是这确实已经是一种约定俗成的做法，只要看到Stereotype就应该像看到“Factory——工厂模式”、“Adapter——适配器模式”、“Facade——外观模式”一样，一眼就知道他的作用。</p>\n<p>\n    Stereotype特性的目标就是为“组合模式的分层系统”按层标记一个类的功能。所谓的“组合模式的分层系统”实际上就是我们常用的Controller-Service-Dao这种分层模式，只不过有些系统可能会多几层（比如Controller和Service之间加个RPC框架什么的）。根据<a\n        href="https://docs.oracle.com/javaee/6/api/javax/enterprise/inject/Stereotype.html" rel="nofollow">Stereotype特性的Java官网原文</a>介绍，它是一个用来标记注解的注解（annotating\n    annotation）。一个注解如果被@Stereotype标记证明他提供Stereotype模式的功能，例如下面这样：</p>\n<pre><code class="java"><span class="code-meta">@Stereotype</span> \n<span class="code-meta">@Target</span>(TYPE) \n<span class="code-meta">@Retention</span>(RUNTIME) \n<span class="code-meta">@interface</span> controller {}\n\n<span class="code-meta">@Stereotype</span> \n<span class="code-meta">@Target</span>(TYPE) \n<span class="code-meta">@Retention</span>(RUNTIME) \n<span class="code-meta">@interface</span> service {}</code></pre>\n<p>然后我们在使用时可以为不同层的类打上这些标记，表示他们属于不同的分层：</p>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">interface</span> <span class="code-title">UserService</span></span>{}\n\n<span class="code-meta">@Service</span>\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">UserServiceImpl</span> <span\n        class="code-keyword">implements</span> <span class="code-title">UserService</span></span>{\n\t\n}\n\n<span class="code-meta">@Controller</span>\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">UseController</span></span>{\n\t<span class="code-meta">@Autowired</span>\n\tUserService userService;\n\t\n}</code></pre>\n<p>\n    一个类的实例可能会被用于0到多个分层中（比如Spring的一个Bean既可以是Controller也可以是Service，只要标记对应的注解即可），但是通常情况下一个类最多只会用在一个分层中使用。简单的说Stereotype特性就是用注解来告诉框架某个类是属于系统功能中的哪一层。</p>\n<p>\n    Java的文档上要求提供Stereotype特性的注解需要用@Stereotype来标记。但是Spring的开发大神并没有理会这个事，@Component并没有使用@Stereotype来标记，但是他确实提供了Stereotype的模式。</p>\n<p>\n    在Stereotype模式下，Spring核心工程为Controller-Service-Dao的分层模型分别提供了@Controller、@Service、@Repository注解。我们按照Stereotype的模式为对应的类标记3个注解，然后在引入MVC、ORM、JPA相关的框架之后这些注解会告诉框架对应的类扮演着什么样的功能角色，框架就能很清晰的根据注解提供相关的功能服务。</p>\n<p>\n    例如引入Spring-webmvc之后，一个类如果用@Controller注解标记了之后框架就知道他们都是处理前端请求的，MVC框架就会为他提供RequestMapping之类的功能。随后我们需要将框架调整为WebFlux，基本上直接更换依赖的Jar包就可以了，因为大家都是按照一个模式来开发的。</p>\n<p><span style="color:#e74c3c">所以，如果我们的某个类是用于指定的分层功能，那么最好使用<em>org.springframework.stereotype</em>包中的注解来标记他所属的分层。如果类没有明确的功能（例如用于存储配置数据的类，或者Helper类），使用@Bean等其他方式添加到容器中更合适（@Bean会在后续的文章中介绍）。</span>\n</p>\n<p>使用Stereotype特性来标记分层，还有一个好处是即使工程的结构再复杂多样，都可以很轻松的使用注解（Annotation）来实现拦截器或者AOP功能。因为我们能够很清晰的知道每个分层的作用，开发AOP的功能就非常便利。</p>\n\n<h2 id="h2-3">扫描配置</h2>\n<p>本文开篇使用了一个简单的例子说明使用&lt;context:component-scan&gt;扫描功能来自动添加被注解标记的Bean。除了使用base-package属性还有其他的标签来控制扫描的路径。</p>\n<p>&lt;context:include-filter&gt;和&lt;context:exclude-filter&gt;标签用来指定包含和排除的过滤规则。他们提供2个参数——type和expression，用来指定过滤类型和过滤参数，例如:</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span\n            class="code-string">"org.example"</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">context:include-filter</span> <span\n                class="hljs-attr">type</span>=<span class="code-string">"regex"</span>\n                <span class="hljs-attr">expression</span>=<span\n                    class="code-string">".*Stub.*Repository"</span>/&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">context:exclude-filter</span> <span\n                class="hljs-attr">type</span>=<span class="code-string">"annotation"</span>\n                <span class="hljs-attr">expression</span>=<span class="code-string">"org.springframework.stereotype.Repository"</span>/&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">context:component-scan</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>此外还可以使用use-default-filters属性来指定是否扫描默认注解（<code>@Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller、</code><code>@Configuration</code>），默认值为ture。如果设定成false，需要我们在include-filter中增加对应的annotation。\n</p>\n<p>除了使用XML配置，还可以使用@ComponentScan注解来指定扫描的路径，他提供和XML配置一样的功能。在后续的文章会介绍纯Java配置的功能。</p>\n<p>关于扫描的详细说明见<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-scanning-filters"\n        rel="nofollow">官网的过滤规则说明</a>。</p>\n\n<h2 id="h2-4">组件命名</h2>\n<p>和普通的Bean一样，我们也可以在@Component上添加注解来指定Bean在IoC容器的名称：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.component.bean;\n\n<span class="code-meta">@Service</span>(<span class="code-string">"implementNameService"</span>)\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">NameServiceImpl</span> <span class="code-keyword">implements</span> <span\n            class="code-title">NameService</span></span>{\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">getName</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"This is My Component"</span>;\n\t}\n}</code></pre>\n<p>这样在容器中这个Bean的名称被命名为"implementNameService"。除了直接在注解上添加内容，我们还可以实现&nbsp;BeanNameGenerator 接口来实现全局的命名方法。看下面这个例子。（源码请到<a\n        href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">https://gitee.com/chkui-com/spring-core-sample</a>自行clone，例子在<em>chkui.springcore.example.hybrid.component</em>包中。）\n</p>\n<p>首先在XML中使用 "name-generator"&nbsp;指定名称的生成器：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span> <span\n        class="hljs-attr">xmlns</span>=<span class="code-string">"http://www.springframework.org/schema/beans"</span>\n\t<span class="hljs-attr">xmlns:xsi</span>=<span\n            class="code-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\n\t<span class="hljs-attr">xmlns:context</span>=<span class="code-string">"http://www.springframework.org/schema/context"</span>\n\t<span class="hljs-attr">xsi:schemaLocation</span>=<span class="code-string">"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>\n\n\t<span class="code-tag">&lt;<span class="code-name">context:component-scan</span>\n\t\t<span class="hljs-attr">base-package</span>=<span class="code-string">"chkui.springcore.example.hybrid.component.bean"</span>\n\t\t<span class="hljs-attr">name-generator</span>=<span class="code-string">"chkui.springcore.example.hybrid.component.bean.NameGenerator"</span> /&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>然后编写我们的命名生成规则：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.component.bean;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">NameGenerator</span> <span class="code-keyword">implements</span> <span\n            class="code-title">BeanNameGenerator</span> </span>{\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">generateBeanName</span><span\n            class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>{\n\t\tAnnotatedBeanDefinition annotdef = AnnotatedBeanDefinition.class.cast(definition);\n\t\tAnnotationMetadata meta = annotdef.getMetadata();\n\t\t<span class="code-comment">//生成规则:如果已经命名不做任何调整，如果未命名则在类名车后面增加”_NoDefinedName“字符串</span>\n\t\t<span class="code-keyword">return</span> Optional.of(meta).map(met -&gt; met.getAnnotationTypes()).map(set -&gt; set.toArray(<span\n            class="code-keyword">new</span> String[] {}))\n\t\t\t\t.map(array -&gt; array[<span class="hljs-number">0</span>]).map(name -&gt; meta.getAnnotationAttributes(name)).map(entry -&gt; entry.get(<span\n            class="code-string">"value"</span>))\n\t\t\t\t.map(obj -&gt; <span class="code-string">""</span>.equals(obj) ? <span class="code-keyword">null</span> : obj).orElse(definition.getBeanClassName() + <span\n            class="code-string">"_NoDefinedName"</span>)\n\t\t\t\t.toString();\n\t}\n}</code></pre>\n\n<h2 id="h2-5">使用索引提升启动速度</h2>\n<p>\n    通常情况下，即使是对整个classpath进行扫描并不会占用太多的时间，但是某些应用对启动时间有极高的要求，对此Spring提供了索引功能。索引功能并不复杂，就是第一次扫描之后生成一个静态文件记录所有的组件，然后下一次扫描就直接读取文件中的内容，而不去执行扫描过程。</p>\n<p>首先引入spring-context-indexer包：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">dependencies</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">dependency</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">groupId</span>&gt;</span>org.springframework<span\n            class="code-tag">&lt;/<span class="code-name">groupId</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">artifactId</span>&gt;</span>spring-context-indexer<span\n            class="code-tag">&lt;/<span class="code-name">artifactId</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">version</span>&gt;</span>5.0.7.RELEASE<span class="code-tag">&lt;/<span\n            class="code-name">version</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">optional</span>&gt;</span>true<span\n            class="code-tag">&lt;/<span class="code-name">optional</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">dependency</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">dependencies</span>&gt;</span></code></pre>\n<pre><code class="json">dependencies {\n    compileOnly(<span class="hljs-attr">"org.springframework:spring-context-indexer:5.0.7.RELEASE"</span>)\n}</code></pre>\n<p>然后在运行后会生成一个&nbsp;META-INF/spring.components\n    的文件，之后只要运行工程发现这个文件都会直接使用他。可以通过环境变量或工程根目录的spring.properties中设置spring.index.ignore=ture来禁用这个功能。</p>\n<p>这个功能如果没有什么明确的需求，慎重使用，会提高工程的管理成本。</p>'},375:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">3.0新增容器启动方法</h2>\n<p>在3.0之前的Spring核心框架中，我们启动一个Spring容器必须使用一个XML文件。而到了3.X之后的版本Spring为创建容器新增了一个入口类——<strong><em>AnnotationConfigApplicationContext</em></strong>。\n</p>\n<p>\n    AnnotationConfigApplicationContext和过去的ClassPathXmlApplicationContext、FileSystemXmlApplicationContext等方法不同的是他不用再指定任何XML配置文件，而是可以通过指定类向容器添加Bean。我们通过几个简单的例子来说明他的使用。</p>\n<p>（以下例子只用于说明问题，源码<a href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">请到 gitee&nbsp;自行 clone</a>，本节的代码在&nbsp;chkui.springcore.example.javabase.simple\n    包中）。</p>\n\n<h3 id="h3-1">直接添加Bean</h3>\n<p>我们可以通过AnnotationConfigApplicationContext直接向容器添加指定的类作为Bean，先定义我们的class：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.simple.pureBean;\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">LolBean</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"I AM LOL!"</span>;\n\t}\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">WowBean</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"I AM WOW!"</span>;\n\t}\n}</code></pre>\n<p>然后向容器添加这些Bean：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.simple;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">WithoutAnnotation</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(WowBean.class, LolBean.class);\n\t\tSystem.out.println(ctx.getBean(WowBean.class));\n\t\tSystem.out.println(ctx.getBean(LolBean.class));\n\t}\n}</code></pre>\n<p>这样就启动了一个Spring的容器，并且容器中包含了WowBean和LolBean这两个类的单例。</p>\n\n<h3 id="h3-2">替代&lt;beans&gt;标签</h3>\n<p>@Configuration在之前介绍Spring核心容器的文章中出现过一两次，配合各种注解的使用@Configuration可以替代&lt;beans&gt;配置中的所有功能。基本上AnnotationConfigApplicationContext和@Configuration组合使用就可以实现Spring容器纯Java启动。请看下面的例子。</p>\n<p>我们在前面例子的基础上增加几个类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.simple.bean;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">DotaBean</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"I AM Dota!"</span>;\n\t}\n}\n\n<span class="code-meta">@Component</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">PseBean</span> </span>{\n\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"I AM PSE!"</span>;\n\t}\n}</code></pre>\n<p>注意DotaBean上是没有@Component注解的。然后添加@Configuration配置：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.simple.bean;\n\n<span class="code-meta">@Configuration</span>\n<span class="code-meta">@ComponentScan</span>(<span\n            class="code-string">"chkui.springcore.example.javabase.simple.bean"</span>)\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">Config</span> </span>{\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> DotaBean <span\n            class="code-title">dotaBean</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> DotaBean();\n\t}\n}</code></pre>\n<p>最后运行他们：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.simple;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">WithScan</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(Config.class, WowBean.class, LolBean.class);\n\t\tSystem.out.println(ctx.getBean(Config.class));\n\t\tSystem.out.println(ctx.getBean(PseBean.class));\n\t\tSystem.out.println(ctx.getBean(WowBean.class));\n\t\tSystem.out.println(ctx.getBean(LolBean.class));\n\t\tSystem.out.println(ctx.getBean(DotaBean.class));\n\t}\n}</code></pre>\n<p>@Component已经在&nbsp;<a href="https://www.chkui.com/article/spring/spring_core_stereotype_component_and_bean_scan"\n                         title="Stereotype组件与Bean扫描">Stereotype组件与Bean扫描</a>&nbsp;这篇文章介绍过，@ComponentScan的作用等价于&lt;context:component-scan/&gt;标签，属性参数都是一一对应的，只不过前者是驼峰命名规则（camelCase）——@ComponentScan(basePackages="...")，后者是短横线命名规则（kebab-case）——&lt;context:component-scan\n    base-package="..."/&gt;。实际上使用Annotation来替换XML配置中的内容，大部分都使用这种转换方式。</p>\n<p>@Configuration和@Bean标签会在后续的内容中详细介绍。@Bean主要用于方法标记，表明这个方法返回一个要添加到容器中的Bean。</p>\n\n<h3 id="h3-3">AnnotationConfigApplicationContext的其他使用方法</h3>\n<p>除了以上常规的使用方法，AnnotationConfigApplicationContext还有其他方式向容器添加Bean。</p>\n<p>可以使用AnnotationConfigApplicationContext::register方法来添加配置和Bean：</p>\n<pre><code class="java"><span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n        class="code-keyword">void</span> <span class="code-title">main</span><span\n        class="hljs-params">(String[] args)</span> </span>{\n    AnnotationConfigApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext();\n    <span class="code-comment">//动态添加配置文件</span>\n    ctx.register(Config1.class, Config2.class);\n    <span class="code-comment">//动态添加Bean</span>\n    ctx.register(Bean1.class);\n    <span class="code-comment">//刷新</span>\n    ctx.refresh();\n}</code></pre>\n<p>\n    注意最后的refresh方法，这个方法来源于ConfigurableApplicationContext接口，然后是在AbstractApplicationContext中实现的。他的过程相当于销毁之前已经创建的资源，然后再重新创建了一个新的容器。这里的代码会执行以下几步：</p>\n<ol>\n    <li><em>new AnnotationConfigApplicationContext()</em>：创建一个新的容器，容器中没有自定义的Bean。</li>\n    <li>AnnotationConfigApplicationContext::register：向容器添加<a\n            href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinition.html"\n            rel="nofollow">BeanDefinition</a>，但是这些<a\n            href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinition.html"\n            rel="nofollow">BeanDefinition</a>并没有转化为容器中的Bean。\n    </li>\n    <li>ConfigurableApplicationContext::refresh()：纳入新添加的<a\n            href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanDefinition.html"\n            rel="nofollow">BeanDefinition</a>重建容器。\n    </li>\n</ol>\n<p>还可以直接使用AnnotationConfigApplicationContext::scan方法扫描指定的路径：</p>\n<pre><code class="java"><span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n        class="code-keyword">void</span> <span class="code-title">main</span><span\n        class="hljs-params">(String[] args)</span> </span>{\n    AnnotationConfigApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext();\n    ctx.scan(<span class="code-string">"com.acme"</span>);\n    ctx.refresh();\n}</code></pre>\n<p>执行原理和上面介绍的一样。</p>\n<p>\n    按照以上介绍的内容。如果你的工程中需要使用AnnotationConfigApplicationContext::register、AnnotationConfigApplicationContext::scan等方法创建容器和其中Bean的依赖关系，最好是所有的Bean都在register或scan中添加。因为重建一批Bean会花费不少时间，尤其是Bean中还有销毁方法要回收资源时。</p>\n\n<h2 id="h2-2">@Bean注解</h2>\n<p>@Bean注解等价于配置文件中的&lt;bean&gt;标签，对应的参数也是将短横线命名切换为驼峰命名——&lt;bean init-method="..."&gt; =&gt;\n    @Bean(initMethod="...")。@Bean注解只能使用在方法上，方法必须是在@Configuration标记的类或者其他Bean中，两者存在的差异会在后续的文章中介绍。下面通过一个例子来说明Bean的使用。</p>\n<p>（以下例子只用于说明问题，源码<a href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">请到 gitee&nbsp;自行 clone</a>，本节的代码在&nbsp;chkui.springcore.example.javabase.beanAnnotation\n    包中）。</p>\n<p>定义两个要添加到容器中的Bean：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.beanAnnotation.bean;\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">FinalFantasy</span> </span>{\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"Final Fantasy 1~15"</span>;\n\t}\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">init</span><span class="hljs-params">()</span> </span>{\n\t\tSystem.out.println(<span class="code-string">"Final Fantasy init!"</span>);\n\t}\n\t\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">destroy</span><span class="hljs-params">()</span> </span>{\n\t\tSystem.out.println(<span class="code-string">"Final Fantasy destroy!"</span>);\n\t}\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">DragonQuest</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span class="code-title">toString</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-string">"Dragon Quest 1~11"</span>;\n\t}\n\t\n\t<span class="code-meta">@PostConstruct</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">init</span><span class="hljs-params">()</span> </span>{\n\t\tSystem.out.println(<span class="code-string">"Dragon Quest init!"</span>);\n\t}\n\t\n\t<span class="code-meta">@PreDestroy</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">destroy</span><span class="hljs-params">()</span> </span>{\n\t\tSystem.out.println(<span class="code-string">"Dragon Quest destroy!"</span>);\n\t}\n}\n</code></pre>\n<p>定义一个功能接口及其实现类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.beanAnnotation.bean;\n\n<span class="hljs-class"><span class="code-keyword">interface</span> <span class="code-title">Support</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">void</span> <span\n            class="code-title">setFinalFantasy</span><span class="hljs-params">(FinalFantasy ff)</span></span>;\n\t<span class="hljs-function">FinalFantasy <span class="code-title">getFinalFantasy</span><span\n            class="hljs-params">()</span></span>;\n}\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">SupportImpl</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Support</span> </span>{\n\t<span class="code-keyword">private</span> FinalFantasy ff; \n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">setFinalFantasy</span><span class="hljs-params">(FinalFantasy ff)</span> </span>{\n\t\t<span class="code-keyword">this</span>.ff = ff;\n\t}\n\t<span class="hljs-function"><span class="code-keyword">public</span> FinalFantasy <span class="code-title">getFinalFantasy</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> ff;\n\t}\n}</code></pre>\n<p>然后顶一个@Configuration类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.javabase.beanAnnotation.bean;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">BeanAnnotationConfig</span> </span>{\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> Support <span class="code-title">support</span><span\n            class="hljs-params">(FinalFantasy ff)</span> </span>{\n\t\tSupport support = <span class="code-keyword">new</span> SupportImpl();\n\t\tsupport.setFinalFantasy(ff);\n\t\t<span class="code-keyword">return</span> support;\n\t}\n\t\n\t<span class="code-meta">@Bean</span>(initMethod=<span class="code-string">"init"</span>, destroyMethod=<span\n            class="code-string">"destroy"</span>)\n\t<span class="code-meta">@Description</span>(<span class="code-string">"Final Fantasy"</span>)\n\t<span class="hljs-function"><span class="code-keyword">public</span> FinalFantasy <span class="code-title">finalFantasy</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> FinalFantasy();\n\t}\n\t\n\t<span class="code-meta">@Bean</span>(name= {<span class="code-string">"dragon-quest"</span>, <span\n            class="code-string">"DragonQuest"</span>})\n\t<span class="hljs-function"><span class="code-keyword">public</span> DragonQuest <span class="code-title">dragonQuest</span><span\n            class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> DragonQuest();\n\t}\n}</code></pre>\n<p>最后运行他们：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">BeanAnnotApp</span> </span>{\n\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> </span>{\n\t\tApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(BeanAnnotationConfig.class);\n\t\tSupport support = ctx.getBean(Support.class);\n\t\tSystem.out.println(support.getFinalFantasy());\n\t\tSystem.out.println(ctx.getBean(DragonQuest.class));\n\t}\n\n}</code></pre>\n<p>在配置类BeanAnnotationConfig中，我们配置了3个Bean。这里的写在方法上的@Bean注解和写在配置文件中的&lt;bean&gt;注解一个效果：</p>\n<ul>\n    <li>\n        <strong><em>@Bean</em></strong>中的<strong><em>initMethod</em></strong>和<strong><em>destroyMethod</em></strong>对应<strong><em>&lt;bean&gt;</em></strong>标签中的<strong><em>init-method</em></strong>和<strong><em>destroy-method</em></strong>属性。\n    </li>\n    <li><strong><em>@Bean</em></strong>中的<strong><em>name</em></strong>参数只有一个值时相当于id，有多个的时候相当于设置了多个别名</li>\n    <li><strong><em>Support support(FinalFantasy ff)</em></strong>：我们可以直接在方法中暴露参数来引入其他Bean，这就类似于配置中<strong><em>ref</em></strong>的功能。\n    </li>\n    <li>如果不指定<strong><em>initMethod</em></strong>和<strong><em>destroyMethod</em></strong>，使用JSR-330的生命周期注解（@PostConstruct、@PreDestroy）同样有效\n    </li>\n</ul>\n'},401:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>Vert.x可以使用Zookeeper和Ignite等框架来创建集群，但是首选框架还是Hazelcast。此外，码友们也可以通过<em>ClusterManager</em>接口实现或引入需要的集群管理工具。本文将说明Vert.x是如何利用Hazelcast来创建和管理集群的，同时你也会了解到Vertx如何创建单机实例。</p>\n<h2 id="h2-1"><strong>集群创建</strong></h2>\n<p>在创建Vert.x集调用群时，调用方法和创建单机实例是有差异的。集群需要调<em>Vertx.clusteredVertx</em>异步方法创建。集群可以完全新建和引入已有的Hazelcast实例二种方式来创建。如下：</p>\n<p>1.新建实例</p>\n<blockquote>\n    <p>ClusterManager mgr = new HazelcastClusterManager();</p>\n</blockquote>\n<p>2.引入Hazelcast实例</p>\n<blockquote>\n    <p>ClusterManager mgr = new HazelcastClusterManager(hazelcastInstance);</p>\n</blockquote>\n<p>详情可以参考官方手册<a title="Hazelcast" href="http://vertx.io/docs/vertx-hazelcast/java/" rel="nofollow">http://vertx.io/docs/vertx-hazelcast/java/</a>。</p>\n\n<h2 id="h2-2">新建集群过程</h2>\n<p>调用<em>Vertx.clusteredVertx</em>静态方法后，Vert.x会利用Vertx工厂方法创建Vertx实例。如下</p>\n<p>其中简单直白的使用 <em>new&nbsp;VertxImpl();</em>来创建Vertx实例。</p>\n<pre class="gradle"><code class="gradle">VertxFactoryImpl.clusteredVertx(VertxOptions <span class="code-keyword"><span class="code-keyword">options</span></span>, <span class="code-keyword"><span class="code-keyword">final</span></span> Handler&lt;AsyncResult&lt;Vertx&gt;&gt; resultHandler) {\n    <span class="code-keyword"><span class="code-keyword">options</span></span>.setClustered(<span class="code-keyword"><span class="code-keyword">true</span></span>);<span class="code-comment"><span class="code-comment">//设置参数，启用集群</span></span>\n    <span class="code-keyword"><span class="code-keyword">new</span></span> VertxImpl(<span class="code-keyword"><span class="code-keyword">options</span></span>, resultHandler);<span class="code-comment"><span class="code-comment">//创建Vertx实例</span></span>\n}</code></pre>\n<p style="text-align:center">图1启动集群</p>\n<p>在<em>VertxImpl</em>的构造方法中，若需要创建集群，则执行：</p>\n<pre class="gradle"><code class="gradle">VertxImpl(VertxOptions <span class="code-keyword"><span class="code-keyword">options</span></span>, Handler&lt;AsyncResult&lt;Vertx&gt;&gt; resultHandler) {\n    <span class="code-comment"><span class="code-comment">// some code</span></span>\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword"><span class="code-keyword">options</span></span>.isClustered()) {\n      <span class="code-keyword"><span class="code-keyword">this</span></span>.clusterManager = getClusterManager(<span class="code-keyword"><span class="code-keyword">options</span></span>);<span class="code-comment"><span class="code-comment">//1.获取集群管理对象</span></span>\n      <span class="code-keyword"><span class="code-keyword">this</span></span>.clusterManager.setVertx(<span class="code-keyword"><span class="code-keyword">this</span></span>);<span class="code-comment"><span class="code-comment">//2. 设置实例</span></span>\n      <span class="code-keyword"><span class="code-keyword">this</span></span>.clusterManager.<span class="code-keyword"><span class="code-keyword">join</span></span>(ar -&gt; {<span class="code-comment"><span class="code-comment">//3. 加入集群</span></span>\n        <span class="code-keyword"><span class="code-keyword">if</span></span> (ar.failed()) {\n          log.error(<span class="code-string"><span class="code-string">"Failed to join cluster"</span></span>, ar.cause());\n        } <span class="code-keyword"><span class="code-keyword">else</span></span> {\n          <span class="code-comment"><span class="code-comment">// Provide a memory barrier as we are setting from a different thread</span></span>\n          <span class="code-keyword"><span class="code-keyword">synchronized</span></span> (VertxImpl.<span class="code-keyword"><span class="code-keyword">this</span></span>) {\n            haManager = <span class="code-keyword"><span class="code-keyword">new</span></span> HAManager(<span class="code-keyword"><span class="code-keyword">this</span></span>, deploymentManager, clusterManager, <span class="code-keyword"><span class="code-keyword">options</span></span>.getQuorumSize(),\n                                      <span class="code-keyword"><span class="code-keyword">options</span></span>.getHAGroup(), haEnabled);\n            createAndStartEventBus(<span class="code-keyword"><span class="code-keyword">options</span></span>, resultHandler);\n          }\n        }\n      });\n    } <span class="code-keyword"><span class="code-keyword">else</span></span> {\n      <span class="code-keyword"><span class="code-keyword">this</span></span>.clusterManager = <span class="code-keyword"><span class="code-keyword">null</span></span>;\n      createAndStartEventBus(<span class="code-keyword"><span class="code-keyword">options</span></span>, resultHandler);\n    }\n    <span class="code-comment"><span class="code-comment">// some code</span></span>\n  }</code></pre>\n<p style="text-align:center">图2</p>\n<p>这里会分3部来创建集群，首先调用<em>getClusterManager</em>来获取集群的配置管理实例。如下：</p>\n<pre class="gradle"><code class="language-java">getClusterManager(VertxOptions <span class="code-keyword">options</span>) {\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword">options</span>.isClustered()) {\n      <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword">options</span>.getClusterManager() != <span class="code-keyword"><span class="code-keyword">null</span></span>) {<span class="code-comment"><span class="code-comment">//判断是否已经创建集群管理对方</span></span>\n        <span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword">options</span>.getClusterManager();<span class="code-comment"><span class="code-comment">//若已创建，直接使用这个对象。</span></span>\n      } <span class="code-keyword"><span class="code-keyword">else</span></span> {<span class="code-comment"><span class="code-comment">//若无创建，执行新建过程。</span></span>\n        ClusterManager mgr;\n        String clusterManagerClassName = System.getProperty(<span class="code-string"><span class="code-string">"vertx.cluster.managerClass"</span></span>);<span class="code-comment"><span class="code-comment">/*通过系统参数设置集群管理对象*/</span></span>\n        <span class="code-keyword"><span class="code-keyword">if</span></span> (clusterManagerClassName != <span class="code-keyword"><span class="code-keyword">null</span></span>) {<span class="code-comment"><span class="code-comment">//clusterManagerClassName变量指定的类名存在，开始加载</span></span>\n          <span class="code-comment"><span class="code-comment">// We allow specify a sys prop for the cluster manager factory which overrides ServiceLoader</span></span>\n          <span class="code-keyword"><span class="code-keyword">try</span></span> {\n            <span class="code-keyword">Class</span>&lt;?&gt; clazz = <span class="code-keyword">Class</span>.forName(clusterManagerClassName);\n            mgr = (ClusterManager)clazz.newInstance();\n          } <span class="code-keyword"><span class="code-keyword">catch</span></span> (Exception e) {\n            <span class="code-keyword"><span class="code-keyword">throw</span></span> <span class="code-keyword"><span class="code-keyword">new</span></span> IllegalStateException(<span class="code-string"><span class="code-string">"Failed to instantiate "</span></span> + clusterManagerClassName, e);\n          }\n        } <span class="code-keyword"><span class="code-keyword">else</span></span> {<span class="code-comment"><span class="code-comment">//clusterManagerClassName指定的变量null,使用默认加载器。</span></span>\n          ServiceLoader&lt;ClusterManager&gt; mgrs = ServiceLoader.load(ClusterManager.<span class="code-keyword">class</span>);\n          <span class="code-keyword"><span class="code-keyword">if</span></span> (!mgrs.iterator().hasNext()) {\n            <span class="code-keyword"><span class="code-keyword">throw</span></span> <span class="code-keyword"><span class="code-keyword">new</span></span> IllegalStateException(<span class="code-string"><span class="code-string">"No ClusterManagerFactory instances found on classpath"</span></span>);\n          }\n          mgr = mgrs.iterator().<span class="code-keyword">next</span>();\n        }\n        <span class="code-keyword"><span class="code-keyword">return</span></span> mgr;\n      }\n    } <span class="code-keyword"><span class="code-keyword">else</span></span> {\n      <span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword"><span class="code-keyword">null</span></span>;\n    }\n  }</code></pre>\n<p style="text-align:center">图3，获取集群管理类<br> 从源码看，<em><code>getClusterManager</code></em>并没有什么特殊的地方。首先检查用户在创建Vertx实例之前，是否创建了集群的管理对象<code><em>ClusterManager</em>。创建了，则使用这个管理对象，没有创建则自行新建一个。</code></p>\n<p>注意</p>\n<blockquote>\n    <p>String clusterManagerClassName = System.getProperty("vertx.cluster.managerClass");</p>\n</blockquote>\n<p>这行代码 ，这说明可以通过JVM环境参数（<em>-Dvertx.cluster.managerClass=[className]</em>）来指定Vertx加载集群管理对象类。这在官方手册中并没有任何一个地方说明。</p>\n<p>如果指定了managerClass，则会使用默认加载方式加载指定的类，并转换成<em>ClusterManager</em>接口。</p>\n<p>如果没有指定managerClass，则使用默认集群加载类启动集群。</p>\n<blockquote>\n    <p>ServiceLoader&lt;ClusterManager&gt; mgrs = ServiceLoader.load(ClusterManager.class);&nbsp;</p>\n</blockquote>\n<p>ServiceLoader是Java在1.6定义的聚群接口类，有点类似于spring的Ioc容器。其过程也是加载类。详细说明请查阅&nbsp;<a href="http://my.oschina.net/hanzhankang/blog/109794" rel="nofollow">通过ServiceLoader实现链式处理</a>&nbsp;一文，解释得很清楚。</p>\n<p>可以看到在<em>vertx-hazelcast-[vertsion].jar</em>包中，<em>META-INF/services/io.vertx.core.spi.cluster.ClusterManager</em>指定了<em>ClusterManager</em>要<em>ServiceLoader</em>加载<em>HazelcastClusterManager。</em></p>\n<blockquote>\n    <p>io.vertx.spi.cluster.hazelcast.HazelcastClusterManager</p>\n</blockquote>\n<p>回到图2，Vert.x接下来使用</p>\n<blockquote>\n    <p>clusterManager.setVertx(this)</p>\n</blockquote>\n<p>将vertx实例设置到集群管理类中。 随后调用</p>\n<blockquote>\n    <p>clusterManager.join</p>\n</blockquote>\n<p>来加入集群。 下面是<em>clusterManager.join</em>的源码</p>\n<pre class="less"><code class="less"><span class="code-selector-tag"><span class="code-selector-tag">synchronized</span></span> <span class="code-selector-tag"><span class="code-selector-tag">void</span></span> <span class="code-selector-tag"><span class="code-selector-tag">join</span></span>(Handler&lt;AsyncResult&lt;Void&gt;&gt; resultHandler) {\n    <span class="code-selector-tag"><span class="code-selector-tag">vertx</span></span><span class="code-selector-class"><span class="code-selector-class">.executeBlocking</span></span>(fut -&gt; {\n      <span class="code-selector-tag"><span class="code-selector-tag">if</span></span> (!active) {<span class="code-comment"><span class="code-comment">//确保只初始化一次</span></span>\n        active = true;\n        <span class="code-selector-tag"><span class="code-selector-tag">if</span></span> (customHazelcastCluster) {<span class="code-comment"><span class="code-comment">//当使用的是用户自己创建的Hazelcast实例时</span></span>\n          nodeID = hazelcast<span class="code-selector-class"><span class="code-selector-class">.getLocalEndpoint</span></span>()<span class="code-selector-class"><span class="code-selector-class">.getUuid</span></span>();<span class="code-comment"><span class="code-comment">//获取节点编号</span></span>\n          membershipListenerId = hazelcast<span class="code-selector-class"><span class="code-selector-class">.getCluster</span></span>()<span class="code-selector-class"><span class="code-selector-class">.addMembershipListener</span></span>(this);<span class="code-comment"><span class="code-comment">//获取当前节点监听成员变换的事件的ID</span></span>\n          fut<span class="code-selector-class"><span class="code-selector-class">.complete</span></span>();\n          return;\n        }\n        if (conf == null) {<span class="code-comment"><span class="code-comment">//获取Hazelcast的Config</span></span>\n          conf = loadConfigFromClasspath();\n          <span class="code-selector-tag"><span class="code-selector-tag">if</span></span> (conf == null) {\n            log<span class="code-selector-class"><span class="code-selector-class">.warn</span></span>(<span class="code-string"><span class="code-string">"Cannot find cluster configuration on classpath and none specified programmatically. Using default hazelcast configuration"</span></span>);\n          }\n        }\n        <span class="code-comment"><span class="code-comment">//新建hazelcast实例</span></span>\n        hazelcast = Hazelcast.newHazelcastInstance(conf);\n        nodeID = hazelcast.getLocalEndpoint().getUuid();\n        membershipListenerId = hazelcast.getCluster().addMembershipListener(this);\n        fut.complete();\n      }\n    }, resultHandler);\n  }</code></pre>\n<p style="text-align:center">图4，新建hazelcast实例</p>\n<p>如果用户自己创建并传入Hazelcast实例，<em>ClusterManager</em>只是简单的从中获取需要的参数。如果未创建实例，则<em>ClusterManager</em>会自行创建。</p>\n<p>首先，loadConfigFromClasspath会用来加载本地的配置文件。</p>\n<pre class="cs"><code class="language-java"><span class="hljs-function"><span class="hljs-function">Config </span><span class="code-title"><span class="hljs-function"><span class="code-title">loadConfigFromClasspath</span></span></span><span class="hljs-params"><span class="hljs-function">(<span class="hljs-params"></span>)</span></span><span class="hljs-function"> </span></span>{\n    Config cfg = <span class="code-keyword"><span class="hljs-literal">null</span></span>;\n    <span class="code-keyword"><span class="code-keyword">try</span></span> (InputStream <span class="code-keyword">is</span> = getConfigStream();\n         InputStream bis = <span class="code-keyword"><span class="code-keyword">new</span></span> BufferedInputStream(<span class="code-keyword">is</span>)) {\n      <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword">is</span> != <span class="code-keyword"><span class="hljs-literal">null</span></span>) {\n        cfg = <span class="code-keyword"><span class="code-keyword">new</span></span> XmlConfigBuilder(bis).build();<span class="code-comment"><span class="code-comment">//创建HazelcastConfig</span></span>\n      }\n    } <span class="code-keyword"><span class="code-keyword">catch</span></span> (IOException ex) {\n      log.error(<span class="code-string"><span class="code-string">"Failed to read config"</span></span>, ex);\n    }\n    <span class="code-keyword"><span class="code-keyword">return</span></span> cfg;\n  }</code></pre>\n<p style="text-align:center">图5，加载HazelcastConfig</p>\n<p>getConfigStream用来读取配置文件。</p>\n<pre class="kotlin"><code class="language-java"><span class="hljs-function">InputStream <span class="code-title">getConfigStream</span><span class="hljs-params">()</span> </span>{\n    ClassLoader ctxClsLoader = Thread.currentThread().getContextClassLoader();\n    InputStream <span class="code-keyword">is</span> = <span class="code-keyword"><span class="hljs-literal">null</span></span>;\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (ctxClsLoader != <span class="code-keyword"><span class="hljs-literal">null</span></span>) {\n      <span class="code-keyword">is</span> = ctxClsLoader.getResourceAsStream(CONFIG_FILE);\n    }\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword">is</span> == <span class="code-keyword"><span class="hljs-literal">null</span></span>) {\n      <span class="code-keyword">is</span> = getClass().getClassLoader().getResourceAsStream(CONFIG_FILE);\n      <span class="code-keyword"><span class="code-keyword">if</span></span> (<span class="code-keyword">is</span> == <span class="code-keyword"><span class="hljs-literal">null</span></span>) {\n        <span class="code-keyword">is</span> = getClass().getClassLoader().getResourceAsStream(DEFAULT_CONFIG_FILE);\n      }\n    }\n    <span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword">is</span>;\n  }</code></pre>\n<p style="text-align:center">图6，读取配置文件</p>\n<p>如图5、图6的源码。<em>getConfigStream</em>会先加载classpath下的<em>cluster.xml（CONFIG_FILE）</em>文件。如果不存在，则加载jar包内的<em>default-cluster.xml（DEFAULT_CONFIG_FILE）</em>文件。读取完毕后，<em>loadConfigFromClasspath</em>使用Hazelcast的<em>XmlConfigBuilder</em>来构建<em>HazelcastConfig</em>。而后会用这个Config初始化Hazelcast。</p>\n<p>集群创建成功后， 会初始化一个<em>HAManager</em>实例，用于做verticle迁移。后面在详细说明HA模式。</p>\n<p>最后，在VertxImpl中，会调用<em>createAndStartEventBus</em>方法在集群环境运行的EventBus。</p>'}});