webpackJsonp([13],{370:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">阅读之前</h2>\n<p>在了解<em>Next.js</em>之前，需要掌握<a href="https://www.chkui.com/category/react" title="React">React</a>的基本使用方法。</p>\n<p>参考代码：<a href="https://github.com/chkui/nextjs-getting-started">https://github.com/chkui/nextjs-getting-started</a> 。\n</p>\n<h2 id="h2-2">搭建</h2>\n<h3 id="h3-1">安装</h3>\n<pre><code class="bash"><span class="code-comment"># 创建项目目录</span>\nmkdir you_project\n<span class="code-comment"># 进入项目目录</span>\n<span class="code-built_in">cd</span> you_project\n<span class="code-comment"># 初始化package.json</span>\nnpm init -y\n<span class="code-comment"># 安装依赖包</span>\nnpm install --save react react-dom next\n<span class="code-comment"># 创建一个pages文件夹</span>\nmkdir pages\n</code></pre>\n<p>依次执行以上命令之后，<em>Next.js</em>运行所需的最基本的目录和依赖就创建好了。</p>\n<h3 id="h3-2">运行</h3>\n<p>将<em>package.json</em>里的“scripts"字段修改为：</p>\n<pre><code class="json">{\n  <span class="hljs-attr">"scripts"</span>: {\n    <span class="hljs-attr">"dev"</span>: <span class="code-string">"next"</span>,\n    <span class="hljs-attr">"build"</span>: <span class="code-string">"next build"</span>,\n    <span class="hljs-attr">"start"</span>: <span class="code-string">"next start"</span>\n  }\n}\n</code></pre>\n<p>运行以下命令启动<em>Next.js</em>：</p>\n<pre><code class="shell">npm run dev\n</code></pre>\n<p>在浏览器打开<a href="http://localhost:3000/">http://localhost:3000/</a> 看到输出"404 - This page could not be found"，表示<em>Next.js</em>安装成功。\n</p>\n<h3 id="h3-3">添加页面</h3>\n<p><em>./pages</em>是<em>Next.js</em>默认的网页路径，其中的<em>index.js</em>就代表整个网站的主页。创建一个*./pages/index.js*组件：</p>\n<pre><code class="JavaScript"><span class="code-keyword">const</span> Index = <span class="hljs-function"><span\n        class="hljs-params">()</span> =&gt;</span> (\n  <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Hello World!<span class="code-tag">&lt;/<span\n              class="code-name">p</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Index\n</code></pre>\n<p>添加*./pages/index.js*后网站会自动刷新，呈现"Hello World!"。</p>\n<h2 id="h2-3">页面与导航栏</h2>\n<h3 id="h3-4">页面</h3>\n<p>添加<a href="http://localhost:3000/about">http://localhost:3000/about</a> 路径下的页面。</p>\n<p>创建*./pages/about.js*文件，添加以下内容：</p>\n<pre><code class="JavaScript"><span class="code-keyword">export</span> <span class="code-keyword">default</span> () =&gt; (\n  <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>About page<span class="code-tag">&lt;/<span\n              class="code-name">p</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n</code></pre>\n<p>然后在浏览器输入<a href="http://localhost:3000/about">http://localhost:3000/about</a> 即可看到新增的About。</p>\n<h3 id="h3-5">导航栏</h3>\n<p>对*./pages/index.js*稍加修改引入导航栏功能：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Link <span class="code-keyword">from</span> <span\n        class="code-string">\'next/link\'</span>\n\n<span class="code-keyword">const</span> Index = <span class="hljs-function"><span\n            class="hljs-params">()</span> =&gt;</span> (\n  <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n            class="code-string">"/about"</span>&gt;</span>\n      <span class="code-tag">&lt;<span class="code-name">a</span> <span class="hljs-attr">style</span>=<span\n              class="code-string">{{fontSize:</span> <span class="hljs-attr">20</span>}}&gt;</span>About Page<span\n              class="code-tag">&lt;/<span class="code-name">a</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Hello Next.js<span class="code-tag">&lt;/<span\n              class="code-name">p</span>&gt;</span>\n  <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Index\n</code></pre>\n<p><strong>注意</strong>：使用了<em>Next.js</em>作为服务端渲染工具，切记仅使用<em>next/link</em>中的Link组件。</p>\n<p>除了<code>&lt;a&gt;</code>标签，<code>&lt;button&gt;</code>或自定义的组件都可以被<code>Link</code>包装，只要传递<em>Click事件</em>即可，将上面的代码稍作修改实验这个效果：\n</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Link <span class="code-keyword">from</span> <span\n        class="code-string">\'next/link\'</span>\n\n<span class="code-keyword">const</span> Index = <span class="hljs-function"><span\n            class="hljs-params">()</span> =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n                class="code-string">"/about"</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">button</span>&gt;</span>Click Me<span class="code-tag">&lt;/<span\n                class="code-name">button</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n                class="code-string">"/about"</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">A</span>/&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Hello Next.js<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Index\n\n<span class="code-keyword">const</span> A = <span class="hljs-function"><span\n            class="hljs-params">props</span> =&gt;</span> (<span class="xml"><span class="code-tag">&lt;<span\n            class="code-name">div</span> <span class="hljs-attr">onClick</span>=<span class="code-string">{e</span> =&gt;</span> {\n    props.onClick(e)\n}}&gt;Click Me<span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>)\n</code></pre>\n<p>关于<em>Next.js</em>路由管理相关的细节内容，<a href="https://github.com/zeit/next.js#routing" title="可以到这里查看">可以到这里查看</a></p>\n<h2 id="h2-4">页面、资源与组件</h2>\n<p><em>./pages</em>是一个保留路径，在*/pages*路径下任何js文件中导出的默认React组件都被视作一个页面。</p>\n<p>除了*./pages*，<em>Next.js</em>还有一个保留路径是*./static*，它用来存放图片等静态资源。</p>\n<p><em>Next.js</em>会对*./pages<em>中的React组件进行“包装"，所以</em>./pages*内外的React组件在呈现结果上有一些差异，看下面的例子。</p>\n<h3 id="h3-6">创建网站结构</h3>\n<p>在工程根目录创建*/components*文件夹，然后添加以下组件：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Link <span class="code-keyword">from</span> <span\n        class="code-string">\'next/link\'</span>\n\n<span class="code-keyword">const</span> linkStyle = {\n    <span class="hljs-attr">marginRight</span>: <span class="hljs-number">15</span>\n}\n\n<span class="code-keyword">const</span> Header = <span class="hljs-function"><span\n            class="hljs-params">()</span> =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n                class="code-string">"/"</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">a</span> <span class="hljs-attr">style</span>=<span\n                    class="code-string">{linkStyle}</span>&gt;</span>Home<span class="code-tag">&lt;/<span\n                class="code-name">a</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n                class="code-string">"/about"</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">a</span> <span class="hljs-attr">style</span>=<span\n                    class="code-string">{linkStyle}</span>&gt;</span>About<span class="code-tag">&lt;/<span\n                class="code-name">a</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Header\n</code></pre>\n<p>然后将<code>Header</code>整合到<code>about.js</code>和<code>index.js</code>中：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Header <span\n        class="code-keyword">from</span> <span class="code-string">\'../components/Header\'</span>\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> () =&gt; (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Header</span> /&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Hello Next.js<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n</code></pre>\n<p>再次进行页面操作，就会出现表头静止页面变换的效果。</p>\n<h3 id="h3-7">网站布局</h3>\n<p>通常情况下，开发一个网站先制定一个通用的布局（尤其是响应式布局的网站），然后再向布局中的添加各个部分的内容。使用<em>Next.js</em>可以通过组件的方式来设计一个布局，看下面的例子。\n    在*/components*中增加<code>Layout</code>和<code>Footer</code>组件:</p>\n<pre><code class="JavaScript"><span class="code-comment">// componments/layout.js</span>\n<span class="code-keyword">import</span> Header <span class="code-keyword">from</span> <span class="code-string">\'./header\'</span>\n<span class="code-keyword">import</span> Footer <span class="code-keyword">from</span> <span class="code-string">\'./footer\'</span>\n\n<span class="code-keyword">const</span> layoutStyle = {\n    <span class="hljs-attr">margin</span>: <span class="hljs-number">20</span>,\n    <span class="hljs-attr">padding</span>: <span class="hljs-number">20</span>,\n    <span class="hljs-attr">border</span>: <span class="code-string">\'1px solid #DDD\'</span>\n}\n\n<span class="code-keyword">const</span> Layout = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr">style</span>=<span\n            class="code-string">{layoutStyle}</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Header</span> /&gt;</span>\n        {props.children}\n        <span class="code-tag">&lt;<span class="code-name">Footer</span> /&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Layout\n</code></pre>\n<pre><code class="JavaScript"><span class="code-comment">// components/footer.js</span>\n<span class="code-keyword">const</span> Footer = <span class="hljs-function"><span\n            class="hljs-params">()</span> =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span> <span class="hljs-attr">style</span>=<span\n                class="code-string">{{color:</span>\'<span class="hljs-attr">blue</span>\'}}&gt;</span>Footer<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Footer\n</code></pre>\n<p>然后将*/pages/index.js*修改为：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Layout <span\n        class="code-keyword">from</span> <span class="code-string">\'../components/layout\'</span>\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> () =&gt; (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Hello Next.js<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span></span>\n)\n</code></pre>\n<p>这样，页面的内容和布局就完全隔离开了。</p>\n<h2 id="h2-5">页面跳转</h2>\n<h3 id="h3-8">传递参数</h3>\n<p>在实际应用中，经常需要在页面间传递参数，可以使用<a href="https://www.chkui.com/article/react/react_high_order_component"\n                              title="高阶组件">高阶组件</a><code>withRouter</code>来实现。\n    下面的代码对*/pages/index.js<em>进行了一些修改，使其在跳转时携带</em>query*参数：</p>\n<pre><code class="JavaScript"><span class="code-keyword">const</span> SubLink = <span class="hljs-function"><span\n        class="hljs-params">props</span> =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">li</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">href</span>=<span\n                class="code-string">{</span>`/<span class="hljs-attr">post</span>?<span\n                class="hljs-attr">title</span>=<span class="code-string">${props.title}</span>`}&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">a</span>&gt;</span>{props.title}<span class="code-tag">&lt;/<span\n                class="code-name">a</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">li</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> () =&gt; (\n    &lt;Layout&gt;\n        &lt;h2&gt;Information&lt;/h2&gt;\n        &lt;SubLink title="First Post"/&gt;\n        &lt;SubLink title="Second Post"/&gt;\n        &lt;SubLink title="Third Post"/&gt;\n    &lt;/Layout&gt;\n)\n</code></pre>\n<p>点击<em>First Post</em>之后浏览器的URL会出现这样的路径：“<a href="http://localhost:3000/post?title=First%20Post”">http://localhost:3000/post?title=First%20Post”</a>\n    。接下来利用<code>withRouter</code>来获取这个参数。创建*./pages/post.js*的文件：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> {withRouter} <span\n        class="code-keyword">from</span> <span class="code-string">\'next/router\'</span>\n<span class="code-keyword">import</span> Layout <span class="code-keyword">from</span> <span class="code-string">\'../components/layout\'</span>\n\n<span class="code-keyword">const</span> Page = withRouter(<span class="hljs-function">(<span\n            class="hljs-params">props</span>) =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">h3</span>&gt;</span>Post Page<span\n                class="code-tag">&lt;/<span class="code-name">h3</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Info:{props.router.query.title}<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span></span>\n))\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Page\n</code></pre>\n<p>现在点击<em>First Post</em>链接之后，跳转的页面会显示<em>First Post</em>。</p>\n<h3 id="h3-9">路径隐藏</h3>\n<p>\n    <em>Next.js</em>提供了一个让URL更加清晰干净的特性功能——URL隐藏（官网直译的话应该叫“URL遮挡”），他的作用是可以隐藏原来比较复杂的URL，让网站路径更加清晰，有利于SEO等。实现这个特性非常简单，在使用<code>Link</code>组件时传递一个<em>as</em>参数。下面将继续修改*./pages/index.js*中的内容以实现这个特性：\n</p>\n<pre><code class="JavaScript"><span class="code-keyword">const</span> SubLink = <span class="hljs-function"><span\n        class="hljs-params">props</span> =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">li</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">Link</span> <span class="hljs-attr">as</span>=<span\n                class="code-string">{</span>`<span class="hljs-attr">p</span>/${<span class="hljs-attr">props.as</span>}`} <span\n                class="hljs-attr">href</span>=<span class="code-string">{</span>`/<span\n                class="hljs-attr">post</span>?<span class="hljs-attr">title</span>=<span class="code-string">${props.title}</span>`}&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">a</span>&gt;</span>{props.title}<span class="code-tag">&lt;/<span\n                class="code-name">a</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">li</span>&gt;</span></span>\n)\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> () =&gt; (\n    &lt;Layout&gt;\n        &lt;h2&gt;Information&lt;/h2&gt;\n        &lt;SubLink as="first-post" title="First Post"/&gt;\n        &lt;SubLink as="first-post" title="Second Post"/&gt;\n        &lt;SubLink as="first-post" title="Third Post"/&gt;\n    &lt;/Layout&gt;\n)\n</code></pre>\n<p>注意观察<code>SubLink</code>组件中的修改，为<code>Link</code>增加了一个as参数，这个参数传递的内容将会在浏览器的地址栏显示。例如点击<em>FIrst\n    Post</em>后，浏览器的地址栏会显示<a href="http://localhost:3000/p/first-post">http://localhost:3000/p/first-post</a>\n    ，但是我们通过<code>withRouter</code>组件获取的URL还是<em>href</em>传递的路径。</p>\n<h2 id="h2-6">服务端渲染</h2>\n<p>只要运行了<em>Next.js</em>，他时时刻刻都在执行服务端渲染，可以通过刷新页面看到效果。如果没有太多需求，不进行任何调整<em>Next.js</em>能为我们完成静态页面的服务端渲染，但是通常情况下，还需要处理异步请求等等情况。\n</p>\n<h3 id="h3-10">二次服务端渲染</h3>\n<p>前面介绍了在<code>Link</code>组件上使用<em>as</em>参数可以设置浏览器路径栏上显示的内容。但是这个时候仅仅支持客户端跳转，如果进行页面刷新会出现404页面。导致这个问题出现的原因是在服务端并不知道*/p/first-post<em>对应</em>/pages*文件夹中的哪个文件。为了解决这个问题，需要在服务端进行二次渲染。\n</p>\n<p>首先需要添加<em>Express</em>服务：</p>\n<pre><code class="bash">npm install --save express\n</code></pre>\n<p>安装完成之后在根目录添加一个<em>server.js</em>文件，其内容如下：</p>\n<pre><code class="JavaScript"><span class="code-keyword">const</span> express = <span\n        class="code-built_in">require</span>(<span class="code-string">\'express\'</span>)\n<span class="code-keyword">const</span> next = <span class="code-built_in">require</span>(<span class="code-string">\'next\'</span>)\n\n<span class="code-comment">// 不等于\'production\'则表示运行的是开发环境</span>\n<span class="code-keyword">const</span> dev = process.env.NODE_ENV !== <span class="code-string">\'production\'</span>\n<span class="code-comment">// 创建一个服务端运行的Next app</span>\n<span class="code-keyword">const</span> app = next({dev})\n<span class="code-comment">// 请求处理器</span>\n<span class="code-keyword">const</span> handle = app.getRequestHandler()\n\napp.prepare()\n    .then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        <span class="code-keyword">const</span> server = express()\n\n        server.get(<span class="code-string">\'/p/:id\'</span>, (req, res) =&gt; {\n            <span class="code-comment">//将/p/:id的路径切换成/post?title=req.params.id的路径</span>\n            app.render(req, res, <span class="code-string">\'/post\'</span>, {<span class="hljs-attr">title</span>: req.params.id})\n        })\n\n        server.get(<span class="code-string">\'*\'</span>, (req, res) =&gt; {\n            <span class="code-keyword">return</span> handle(req, res)\n        })\n\n        server.listen(<span class="hljs-number">3000</span>, (err) =&gt; {\n            <span class="code-keyword">if</span> (err) <span class="code-keyword">throw</span> err\n            <span class="code-built_in">console</span>.log(<span class="code-string">\'&gt; Ready on http://localhost:3000\'</span>)\n        })\n    })\n    .catch(<span class="hljs-function">(<span class="hljs-params">ex</span>) =&gt;</span> {\n        <span class="code-built_in">console</span>.error(ex.stack)\n        process.exit(<span class="hljs-number">1</span>)\n    })\n</code></pre>\n<p>然后修改<em>package.json</em>的“scripts"字段，将启动方式方式指向<em>server.js</em>：</p>\n<pre><code class="json"><span class="code-string">"scripts"</span>: {\n    <span class="hljs-attr">"dev"</span>: <span class="code-string">"node server.js"</span>,\n    <span class="hljs-attr">"build"</span>: <span class="code-string">"next build"</span>,\n    <span class="hljs-attr">"start"</span>: <span class="code-string">"NODE_ENV=production node server.js"</span>\n  }\n</code></pre>\n<p>完成这2步网站服务端也可以正常跳转，实现功能的位置是这段代码：</p>\n<pre><code class="JavaScript">server.get(<span class="code-string">\'/p/:id\'</span>, (req, res) =&gt; {\n\tapp.render(req, res, <span class="code-string">\'/post\'</span>, {<span class="hljs-attr">title</span>: req.params.id})\n})\n</code></pre>\n<p>他将原来的请求“/p/:id”转换为请求"/post?title=id"。</p>\n<p>更多的<a href="https://github.com/zeit/next.js#custom-server-and-routing" title="服务端渲染的配置">服务端渲染的配置说明请看这里</a>。</p>\n<h3 id="h3-11">数据异步请求</h3>\n<p>对于一个前后端分离的系统来说，异步数据请求是几乎每个页面都需要的。<em>Next.js</em>通过<code>getInitialProps</code>来实现。\n    下面的示例数据来自<a href="https://www.tvmaze.com/api">https://www.tvmaze.com/api</a> 。创建*./pages/tvshows.js*的文件：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Layout <span\n        class="code-keyword">from</span> <span class="code-string">\'../components/layout.js\'</span>\n<span class="code-keyword">import</span> Link <span class="code-keyword">from</span> <span class="code-string">\'next/link\'</span>\n<span class="code-keyword">import</span> fetch <span class="code-keyword">from</span> <span class="code-string">\'isomorphic-unfetch\'</span>\n\n<span class="code-keyword">const</span> TvShow = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">h1</span>&gt;</span>Batman TV Shows<span class="code-tag">&lt;/<span\n                class="code-name">h1</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">ul</span>&gt;</span>\n            {props.shows.map(({show}) =&gt; (\n                <span class="code-tag">&lt;<span class="code-name">li</span> <span class="hljs-attr">key</span>=<span\n                        class="code-string">{show.id}</span>&gt;</span>\n                    <span class="code-tag">&lt;<span class="code-name">Link</span> <span\n                            class="hljs-attr">href</span>=<span class="code-string">{</span>`/<span\n                            class="hljs-attr">tv</span>?<span class="hljs-attr">id</span>=<span class="code-string">${show.id}</span>`}&gt;</span>\n                        <span class="code-tag">&lt;<span class="code-name">a</span>&gt;</span>{show.name}<span\n                class="code-tag">&lt;/<span class="code-name">a</span>&gt;</span>\n                    <span class="code-tag">&lt;/<span class="code-name">Link</span>&gt;</span>\n                <span class="code-tag">&lt;/<span class="code-name">li</span>&gt;</span>\n            ))}\n        <span class="code-tag">&lt;/<span class="code-name">ul</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span></span>\n)\n\nTvShow.getInitialProps = <span class="code-keyword">async</span> <span class="hljs-function"><span class="code-keyword">function</span>(<span\n            class="hljs-params"></span>) </span>{\n    <span class="code-comment">//contxt是衔接Next.js包装组件和自定义主键的上下文，包含的参数有asPath、pathname、query</span>\n\n    <span class="code-comment">// 发送异步请求</span>\n    <span class="code-keyword">const</span> res = <span class="code-keyword">await</span> fetch(<span\n            class="code-string">\'https://api.tvmaze.com/search/shows?q=batman\'</span>)\n\n    <span class="code-comment">// 从response中异步读取数据流</span>\n    <span class="code-keyword">const</span> data = <span class="code-keyword">await</span> res.json()\n\n    <span class="code-built_in">console</span>.log(<span class="code-string">`Show data fetched. Count: <span\n            class="hljs-subst">${data.length}</span>`</span>)\n\n    <span class="code-comment">// 返回已获取的数据</span>\n    <span class="code-keyword">return</span> {\n        <span class="hljs-attr">shows</span>: data\n    }\n}\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> TvShow\n</code></pre>\n<p><code>TvShow</code>组件的作用是异步请求数据并组装成列表展示。</p>\n<p>然后再创建一个查看详情的页面——<em>./pages/tv.js</em>，实现过程和上面一样：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> Layout <span\n        class="code-keyword">from</span> <span class="code-string">\'../components/layout\'</span>\n<span class="code-keyword">import</span> fetch <span class="code-keyword">from</span> <span class="code-string">\'isomorphic-unfetch\'</span>\n\n<span class="code-keyword">const</span> Tv =  <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">h1</span>&gt;</span>{props.show.name}<span class="code-tag">&lt;/<span\n                class="code-name">h1</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>{props.show.summary.replace(/<span\n                class="code-tag">&lt;<span class="code-name">[</span>/]?<span class="hljs-attr">p</span>&gt;</span>/g, \'\')}<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">img</span> <span class="hljs-attr">src</span>=<span\n                class="code-string">{props.show.image.medium}/</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span>\n)\n\nTv.getInitialProps = async function (context) {\n    const { id } = context.query\n    const res = await fetch(`https://api.tvmaze.com/shows/${id}`)\n    const show = await res.json()\n\n    console.log(`Fetched show: ${show.name}`)\n\n    return { show }\n}\nexport default Tv\n</span></code></pre>\n<p>按照这个套路可以解决绝大部分数据异步请求的问题。不过如果数据组装过慢，会出页面现卡顿的问题，可以通过服务端缓存或异步页面加载实现，后续的篇幅会介绍。</p>\n<h2 id="h2-7">样式</h2>\n<h3 id="h3-12">源生添加样式</h3>\n<p>一个页面永远离不开样式，在<em>Next.js</em>中推荐一种简介高效的方法——<code>&lt;style jsx&gt;</code>。</p>\n<p>为的主页添加一些样式：</p>\n<pre><code class="JavaScript">(\n    &lt;Layout&gt;\n        &lt;h2&gt;Information&lt;/h2&gt;\n        &lt;SubLink as="first-post" title="First Post"/&gt;\n        &lt;SubLink as="first-post" title="Second Post"/&gt;\n        &lt;SubLink as="first-post" title="Third Post"/&gt;\n        &lt;style jsx&gt;{`\n            h2{\n                font-family: "Arial";\n            }\n        `}&lt;/style&gt;\n        &lt;style jsx global&gt;{`\n            .list{\n                list-style: none;\n                margin: 5px 0;\n            }\n        `}&lt;/style&gt;\n    &lt;/Layout&gt;\n)\n</code></pre>\n<p><code>&lt;style jsx&gt;</code>的作用就是为当前组件声明样式，需要注意的是在这个标签内声明的样式只能覆盖当前组件，子组件是不会出现层叠效果的。而<code>&lt;style jsx\n    global&gt;</code>标签的效果则是和标准的css层叠效果一致，在这个标签中声明的样式会影响到子组件。</p>\n<h3 id="h3-13">Loader添加载样式</h3>\n<p><em>Next.js</em>可以加载各种样式文件，下面以<em>Sass/Scss</em>为例。</p>\n<p>首先添加相关依赖：</p>\n<pre><code class="bash">npm install --save @zeit/next-sass node-sass\n</code></pre>\n<p>在项目根目录添加<em>next.config.js</em>文件，用于指示<em>Next</em>加载对用的功能：</p>\n<pre><code class="bash">const withSass = require(<span class="code-string">\'@zeit/next-sass\'</span>)\nmodule.exports = withSass()\n</code></pre>\n<p>现在就可以加载*.scss<em>文件了，添加一个</em>/pages/post.scss*文件：</p>\n<pre><code class="css">$<span class="code-selector-tag">font-size</span>: 50<span class="code-selector-tag">px</span>;\n<span class="code-selector-class">.header</span>{\n  <span class="code-attribute">font-size</span>: $font-size;\n  <span class="code-attribute">color</span>:red;\n}\n</code></pre>\n<p>修改*/pages/post.js*加载样式：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> {withRouter} <span\n        class="code-keyword">from</span> <span class="code-string">\'next/router\'</span>\n<span class="code-keyword">import</span> Layout <span class="code-keyword">from</span> <span class="code-string">\'../components/layout\'</span>\n<span class="code-comment">//加载样式</span>\n<span class="code-keyword">import</span> <span class="code-string">\'./post.scss\'</span>\n\n<span class="code-keyword">const</span> Page = withRouter(<span class="hljs-function">(<span\n            class="hljs-params">props</span>) =&gt;</span> (\n    <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">h3</span> <span class="hljs-attr">className</span>=<span\n                class="code-string">"header"</span>&gt;</span>Post Page<span class="code-tag">&lt;/<span\n                class="code-name">h3</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Info:{props.router.query.title}<span\n                class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span></span>\n))\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> Page\n</code></pre>\n<p>由于是使用的<em>webpack</em>的<em>Loader</em>，可以根据需要在<em>next.config.js</em>文件中进行一些相关的设置：</p>\n<pre><code class="JavaScript"><span class="code-built_in">module</span>.exports = withSass({\n  <span class="hljs-attr">cssModules</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">cssLoaderOptions</span>: {\n    <span class="hljs-attr">importLoaders</span>: <span class="hljs-number">1</span>,\n    <span class="hljs-attr">localIdentName</span>: <span class="code-string">"[local]___[hash:base64:5]"</span>,\n  }\n})\n</code></pre>\n<p>然后在组件中直接以对象的方式使用：</p>\n<pre><code class="JavaScript"><span class="code-keyword">import</span> style <span\n        class="code-keyword">from</span> <span class="code-string">\'./post.scss\'</span>\n<span class="code-keyword">const</span> Page = withRouter(<span class="hljs-function">(<span\n            class="hljs-params">props</span>) =&gt;</span> {\n    <span class="code-built_in">console</span>.log(style)\n    <span class="code-keyword">return</span> (\n        <span class="xml"><span class="code-tag">&lt;<span class="code-name">Layout</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">h3</span> <span class="hljs-attr">className</span>=<span\n                    class="code-string">{style.header}</span>&gt;</span>Post Page<span class="code-tag">&lt;/<span\n                    class="code-name">h3</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">p</span>&gt;</span>Info:{props.router.query.title}<span\n                    class="code-tag">&lt;/<span class="code-name">p</span>&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">Layout</span>&gt;</span></span>\n    )\n})\n</code></pre>\n<p>更多关于cssLoaderOptions的参数说明可以查看<a href="https://github.com/webpack-contrib/css-loader#options"\n                                   title="webpack里css-loader的options说明">webpack里css-loader的options说明</a>。除了scss,<a\n        href="https://github.com/zeit/next.js#css-in-js" title="*Next.js*还支持css、less、post css的Loader"><em>Next.js</em>还支持css、less、post\n    css的Loader</a>。</p>\n<h2 id="h2-8">发布</h2>\n<p>在了解以上内容之后，已经可以开发一个网站了，接下来介绍如何发布生产包。</p>\n<p><em>package.json</em>中的“scripts"字段可以设置打包和生产运行方式：</p>\n<pre><code class="json">  <span class="code-string">"scripts"</span>: {\n    <span class="hljs-attr">"dev"</span>: <span class="code-string">"node server.js"</span>,\n    <span class="hljs-attr">"build"</span>: <span class="code-string">"next build"</span>,\n    <span class="hljs-attr">"start"</span>: <span class="code-string">"NODE_ENV=production node server.js"</span>\n  }\n</code></pre>\n<p>首先进行打包：</p>\n<pre><code class="bash">npm run build\n</code></pre>\n<p>打包完毕之后可以启动生产环境：</p>\n<pre><code class="bash">npm start\n</code></pre>\n<p>现在用浏览器打开<a href="http://localhost:3000/">http://localhost:3000/</a> 地址可以发现运行的是生产环境（可以使用React工具查看，也可以打开开发人员模式）。\n    由于之前了在<em>server.js</em>中引入了Express，所以现在启动的是一个Express服务器。打包之后的文件都在*./.next*\n    路径下，可以仅仅拷贝<strong>依赖包（node_module）</strong>、<strong>package.json</strong>、<strong>server.js</strong>以及**./.next**来运行生产环境。\n</p>\n<p>除了使用<em>Express</em>这一类第三方nodejs服务器，<a href="https://zeit.co/now" title="*Next.js*还提供了许多其他方式来部署和方法"><em>Next.js</em>还提供了许多其他方式来部署和方法</a>\n</p>'},396:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<p>在<a href="https://www.chkui.com/article/spring/spring_core_string_to_entity" title="字符串到实体转换">字符串到实体转换</a>一文中介绍了Spring核心框架中使用PropertyEditor将任何字符串转换为数字、实体的方法。除了字符串到实体，Spring还提供了更加通用的功能在对象和对象之间进行数据转换。\n</p>\n\n<h2 id="h2-1">Converter&lt;S, T&gt;</h2>\n<p>Spring的类型转换的基础是Converter&lt;S, T&gt;（以下简称转换器）接口：</p>\n<pre><code class="java"><span class="code-keyword">package</span> org.springframework.core.convert.converter;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n            class="code-title">Converter</span>&lt;<span class="code-title">S</span>, <span class="code-title">T</span>&gt; </span>{\n    <span class="hljs-function">T <span class="code-title">convert</span><span\n            class="hljs-params">(S source)</span></span>;\n}</code></pre>\n<p>\n    光是看他的结构就很清晰的明白这个接口是要做什么。S表示Source（来源）、T表示Target（目标），所以这个接口的2个范型参数就是数据从S转换为T，Converter::convert方法正是输入一个“S”类型的实例，返回一个“T”类型的实例。</p>\n<p>可以通过这个接口实现规范化、可复用的类型转换功能。下面通过转换器实现字符串到PC实体类相互转换的过程。</p>\n<p>Pc实体：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">PC</span> <span class="code-keyword">extends</span> <span\n        class="code-title">Device</span> </span>{\n\tString cpu;\n\tString graphic;\n\tString ram;\n    <span class="code-comment">//Getter &amp; Setter ...</span>\n}</code></pre>\n<p>在基类Device中通过反射实现字符串到实体类的转换：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span\n        class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Device</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">pares</span><span class="hljs-params">(String text)</span></span>{ <span\n            class="code-comment">//字符串转换为实体</span>\n\t\tField[] fields = <span class="code-keyword">this</span>.getClass().getDeclaredFields();\n\t\t<span class="code-keyword">for</span> (Field field : fields) {\n\t\t\t<span class="code-keyword">int</span> begIndex = text.indexOf(field.getName());\n\t\t\t<span class="code-keyword">int</span> endIndex = text.indexOf(<span class="code-string">";"</span>, begIndex);\n\t\t\tString sub = text.substring(begIndex, endIndex), value = sub.split(<span\n            class="code-string">"="</span>)[<span class="hljs-number">1</span>];\n\t\t\tfield.setAccessible(<span class="code-keyword">true</span>);\n\t\t    field.set(<span class="code-keyword">this</span>, value);\n\t\t}\n\t};\n\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">value</span><span class="hljs-params">()</span></span>{ <span class="code-comment">//实体转换为字符串</span>\n\t\tField[] fields = <span class="code-keyword">this</span>.getClass().getDeclaredFields();\n\t\tStringBuilder sb = <span class="code-keyword">new</span> StringBuilder();\n\t\t<span class="code-keyword">for</span> (Field field : fields) {\n\t\t\tsb.append(field.getName());\n\t\t\tsb.append(<span class="code-string">"="</span>);\n\t\t\tsb.append(field.get(<span class="code-keyword">this</span>).toString());\n\t\t\tsb.append(<span class="code-string">";"</span>);\n\t\t}\n\t\t<span class="code-keyword">return</span> sb.toString();\n\t}\n}</code></pre>\n<p>然后声明两个转换器的实现类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">String2PcConverter</span> <span class="code-keyword">implements</span> <span\n        class="code-title">Converter</span>&lt;<span class="code-title">String</span>, <span\n        class="code-title">PC</span>&gt; </span>{\n    <span class="code-comment">//字符串转换为PC对象</span>\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> PC <span class="code-title">convert</span><span\n            class="hljs-params">(String source)</span> </span>{\n\t\tPC pc = <span class="code-keyword">new</span> PC();\n\t\tpc.pares(source);\n\t\t<span class="code-keyword">return</span> pc;\n\t}\n}</code></pre>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">PC2StringConverter</span> <span class="code-keyword">implements</span> <span\n        class="code-title">Converter</span>&lt;<span class="code-title">PC</span>, <span\n        class="code-title">String</span>&gt;  </span>{\n    <span class="code-comment">//PC对象转换为字符串</span>\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">convert</span><span class="hljs-params">(PC source)</span> </span>{\n\t\t<span class="code-keyword">return</span> source.value();\n\t}\n}</code></pre>\n<p>最后使用这两个转换器：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">void</span> <span\n            class="code-title">singletonConversion</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">final</span> String text = <span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>;\n\t\tConverter&lt;String, PC&gt; string2Pc = <span class="code-keyword">new</span> String2PcConverter();\n\t\tPC pc = string2Pc.convert(text);\n\t\tConverter&lt;PC, String&gt; pc2String = <span class="code-keyword">new</span> PC2StringConverter();\n\t\tString string = pc2String.convert(pc);\n\t}\n}</code></pre>\n<p>以上就是Spring最基本的类型转换功能——围绕着转换器（<em>Converter&lt;S, T&gt;）</em>接口实现数据类型转换。看到这里可能有些码友就要问了：这到底有什么用？直接用使用Device::pares和Device::value方法不就完事了？为什么还要引入转换器兜一圈？？！\n</p>\n<p>\n    如果系统仅仅只有1个或几个类型转换确实没必要引入转换器。但是业务总是繁杂多样的，模块与模块之前也会存在数据结构的差异，因此我们需要适配器（Adapter）、外观（Facade）等模式来应对变化多端的外部输入而无需改动业务逻辑。实际上从更高的层次看，Converter接口就是Spring为类型转换提供的一个适配器。后面会看到Spring已经为程序的顺利运行提供了大量的转换器，即使在阅读本文内容之前不知道这些转换器的存在，但Spring框架时时刻刻都在使用他们。</p>\n\n<h2 id="h2-2">ConverterFactory&lt;S, R&gt;</h2>\n<p>转换器只能对单一类型进行转换，如果有大量相同类别的数据需要转换可以使用ConverterFactory（一下简称转换工厂）：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n        class="code-title">ConverterFactory</span>&lt;<span class="code-title">S</span>, <span\n        class="code-title">R</span>&gt; </span>{\n\n    &lt;T extends R&gt; <span class="hljs-function">Converter&lt;S, T&gt; <span\n            class="code-title">getConverter</span><span class="hljs-params">(Class&lt;T&gt; targetType)</span></span>;\n}</code></pre>\n<p>ConverterFactory::getConverter是返回一个转换器，这里范型标记“T”是“R”的子类。看下面转换工厂的例子，他可以将字符串转换成Device的子类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">String2DeviceConverterFactory</span> <span class="code-keyword">implements</span> <span\n        class="code-title">ConverterFactory</span>&lt;<span class="code-title">String</span>, <span class="code-title">Device</span>&gt; </span>{\n\t<span class="code-keyword">public</span> &lt;T extends Device&gt; <span class="hljs-function">Converter&lt;String, T&gt; <span\n            class="code-title">getConverter</span><span class="hljs-params">(Class&lt;T&gt; targetType)</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> String2DeviceConverter(targetType);\n\t}\n\n    <span class="code-comment">// Device的通用转换器</span>\n\t<span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">String2DeviceConverter</span>&lt;<span class="code-title">T</span> <span\n            class="code-keyword">extends</span> <span class="code-title">Device</span>&gt; <span class="code-keyword">implements</span> <span\n            class="code-title">Converter</span>&lt;<span class="code-title">String</span>, <span class="code-title">Device</span>&gt; </span>{\n\t\t<span class="code-keyword">private</span> Class&lt;? extends Device&gt; klass;\n\t\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-title">String2DeviceConverter</span><span\n                class="hljs-params">(Class&lt;? extends Device&gt; klass)</span> </span>{\n\t\t\t<span class="code-keyword">this</span>.klass = klass;\n\t\t}\n\n\t\t<span class="hljs-function"><span class="code-keyword">public</span> T <span\n                class="code-title">convert</span><span class="hljs-params">(String source)</span> </span>{\n\t\t\tDevice device = <span class="code-keyword">null</span>;\n\t\t\tdevice = klass.newInstance();\n\t\t\tdevice.pares(source);\n\t\t\t<span class="code-keyword">return</span> (T) device;\n\t\t}\n\t}\n}</code></pre>\n<p>然后可以使用这个转换工厂按照目标类型进行转换：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">void</span> <span class="code-title">factoryConversion</span><span\n            class="hljs-params">()</span> </span>{\n\t\tString2DeviceConverterFactory factory = <span class="code-keyword">new</span> String2DeviceConverterFactory();\n\t\tConverter&lt;String, PC&gt; pcConverter = factory.getConverter(PC.class);\n\t\t<span class="code-comment">//将字符串转换为PC</span>\n\t\tPC pc = pcConverter.convert(<span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>);\n\n\t\tConverter&lt;String, Phone&gt; phoneConverter = factory.getConverter(Phone.class);\n\t\t<span class="code-comment">//将字符串转换为Phone</span>\n\t\tPhone phone = phoneConverter.convert(<span class="code-string">"name=HUAWEIP20;cpu=Kirin970;ram=64G;"</span>);\n\t}\n}</code></pre>\n<p>Phone是另外一个继承了Device的实体类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">Phone</span> <span class="code-keyword">extends</span> <span class="code-title">Device</span> </span>{\n\tString name;\n\tString cpu;\n\tString ram;\n    <span class="code-comment">// Getter &amp; Setter</span>\n}</code></pre>\n\n<h2 id="h2-3">数据转换服务</h2>\n<p>\n    Spring已经为数据转换预设了大量的Converter，这些Converter可以通过ConversionService直接使用。ConversionService中包含了几乎所有Java常规类型的数据格式转换，看下面的案例。</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{<span class="hljs-function">ConversionApp <span\n        class="code-title">registConversionService</span><span class="hljs-params">()</span> </span>{\n\t\tConfigurableApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(ConversionConfig.class);\n        <span class="code-comment">// 获取ConversionService</span>\n\t\tConversionService service = ctx.getBean(ConversionService.class);\n\t\t<span class="code-comment">// 字符串转换为整型</span>\n\t\t<span class="code-keyword">int</span> i = service.convert(<span class="code-string">"123456"</span>, Integer.class);\n\t\t<span class="code-comment">// 字符串转换为浮点</span>\n\t\t<span class="code-keyword">float</span> f = service.convert(<span class="code-string">"1234.56"</span>, Float.class);\n\t\t<span class="code-comment">// 源生列表转换为List</span>\n\t\tList&lt;?&gt; list = service.convert(<span class="code-keyword">new</span> <span class="code-keyword">int</span>[] { <span\n            class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span\n            class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> }, List.class);\n\t\t<span class="code-comment">// 源生列表转换为Set</span>\n\t\tSet&lt;?&gt; set = service.convert(<span class="code-keyword">new</span> <span class="code-keyword">int</span>[] { <span\n            class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span\n            class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> }, Set.class);\n\t\t<span class="code-comment">// 枚举转换</span>\n\t\tGender gender = service.convert(<span class="code-string">"Male"</span>, Gender.class);\n\t\t<span class="code-comment">// 使用自定义转换器</span>\n\t\tPC pc = service.convert(<span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>, PC.class);\n\t\t<span class="code-comment">// UUID转换</span>\n\t\tUUID uuid = service.convert(<span class="code-string">"f51b4b95-0925-4ad0-8c62-4daf3ea7918f"</span>, UUID.class);\n\t\t<span class="code-comment">// 字符串转换为Optional&lt;PC&gt;</span>\n\t\tOptional&lt;PC&gt; options = service.convert(<span\n            class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>, Optional.class);\n\t\t<span class="code-comment">// 使用TypeDescriptor描述进行转换</span>\n\t\tString source = <span class="code-string">"123456789"</span>;\n\t\t<span class="code-keyword">int</span> result = (<span class="code-keyword">int</span>) service.convert(source, TypeDescriptor.valueOf(source.getClass()),\n\t\t\t\tTypeDescriptor.valueOf(Integer.class));\n\t\t_G.print(result);\n\t}\n\n\t<span class="code-keyword">enum</span> Gender {\n\t\tMale, Female, Other\n\t}\n}</code></pre>\n<p>\n    除了上面的转换，ConversionService还提供了其他转换器，详情请看org.springframework.core.convert.support.DefaultConversionService的JavaDoc文档。</p>\n<p>需要通过ConversionServiceFactoryBean来启用ConversionService，下面的代码是在@Configurable中向IoC容器添加ConversionServiceFactoryBean：</p>\n<pre><code class="java"><span class="code-meta">@Configurable</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">ConversionConfig</span> </span>{\n\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> ConversionServiceFactoryBean <span\n            class="code-title">ConversionServiceFactoryBean</span><span class="hljs-params">()</span> </span>{\n\t\tConversionServiceFactoryBean factoryBean = <span class="code-keyword">new</span> ConversionServiceFactoryBean();\n\t\tSet&lt;Converter&gt; converters = <span class="code-keyword">new</span> HashSet&lt;&gt;();\n\t\t<span class="code-comment">// 添加自定义转换器</span>\n\t\tconverters.add(<span class="code-keyword">new</span> String2PcConverter());\n\t\tconverters.add(<span class="code-keyword">new</span> PC2StringConverter());\n\t\tfactoryBean.setConverters(converters);\n\t\t<span class="code-keyword">return</span> factoryBean;\n\t}\n}</code></pre>\n<p>也可以通过XML文件配置来引入ConversionService：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"conversionService"</span>\n        <span class="hljs-attr">class</span>=<span class="code-string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n            class="code-string">"converters"</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">set</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                    class="code-string">"chkui.springcore.example.javabase.conversion.support.PC2StringConverter"</span>/&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                    class="code-string">"chkui.springcore.example.javabase.conversion.support.String2PcConverter"</span>/&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">set</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">property</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>\n<p>ConversionService在Spring MVC中的作用很大，可以全局注册统一的类型转换器，详情请见&nbsp;<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#mvc-config-conversion"\n        rel="nofollow">Conversion and Formatting</a>。&nbsp;</p>\n                                            '},423:function(s,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.content='<h2 id="h2-1">表命名规范</h2>\n<p>表命名的规则分为3个层级，层级之间通过<code>_</code>分割，例如<code>b_r_identity</code>、<code>d_l_identity</code>。规约为:</p>\n<pre><code class="css"><span class="hljs-selector-attr">[leavel]</span>_<span\n        class="hljs-selector-attr">[type]</span>_<span class="hljs-selector-attr">[name]</span>\n</code></pre>\n<p><strong>[leavel]</strong> 表示数据库表的层级和功能，分为：</p>\n<ol>\n    <li><strong>s</strong>：业务无关的系统数据表。</li>\n    <li><strong>d</strong>：业务字典表。</li>\n    <li><strong>b</strong>：基础业务表。</li>\n    <li><strong>v</strong>：视图。</li>\n    <li><strong>i</strong>：聚合中间表。</li>\n</ol>\n<p><strong>[type]</strong> 表示数据库表的类型，分为：</p>\n<ol>\n    <li><strong>r</strong>：行数据表。</li>\n    <li><strong>l</strong>：列数据表。</li>\n    <li><strong>g</strong>：分组数据表。</li>\n</ol>\n<p><strong>[name]</strong> 用来表示表的作用名称，由于mysql默认对大小写不敏感，采用下划线命名法。比如：\n    <code>identity_enterprise</code>。</p>\n<p>因此，综合上面的规范，如果将<strong>用户模块</strong>命名为<strong>user</strong>，相关的表命名为：</p>\n<ul>\n    <li>数据字典以列数据的方式存储，可以命名为：<code>d_l_user_dc</code>。</li>\n    <li>用户主表以行数据的方式存储，命名为：<code>b_r_user</code>。</li>\n    <li>用户账户表：<code>b_r_user_account</code>。</li>\n</ul>\n<p>采用以上命名法的目的：</p>\n<ol>\n    <li>便于代码开发阶段区分表的功能和数据组织形式；</li>\n    <li>通过前缀为以后可能会引入的开源框架生成的表扩展命名空间。</li>\n</ol>\n<blockquote>\n    <p>比如引入了流程框架activity，会向数据库添加几十个表，其中有名为account的表，如果不适用前缀，会增加引入的成本。</p>\n</blockquote>\n<h2 id="h2-2">字段命名规范</h2>\n<ol>\n    <li>逻辑主键：id。所有的表必须创建逻辑主键。采用统一的主键便于分库分表以及数据抽取。</li>\n    <li>业务主键：code, 确保唯一性或联合主键。业务主键除了反映真实数据关联，也便于程序进行类型判断。</li>\n    <li>外键：columnName_fk，字段信息名+fk后缀，比如state_fk。</li>\n    <li>父主键关联：pid</li>\n</ol>\n<h2 id="h2-3">行数据规范</h2>\n<p>所有的表必须包含modify_date、modify_type、modify_user、modify_access_id、activity字段。</p>\n<ol>\n    <li><code>modify_date</code>：标记数据修改时间，用于数据增量ETL或缺陷回溯。类型：<code>TIMESTAMP(13)</code>。</li>\n    <li>\n        <code>modify_type</code>：数据修改类型，通常数据由运营后台修改<code>OPR(0)</code>，或账号拥有这修改<code>USR(1)</code>。用于记录数据修改的行事人。类型：<code>TINYINT(1)</code>。\n    </li>\n    <li><code>modify_user</code>：结合modify_type，标记是修改人。类型：<code>BIGINT</code>。</li>\n    <li><code>modify_access_id</code>：在数据库中用于标记当前数据修改是由哪个访问id导致的。类型：<code>BIGINT</code>。</li>\n    <li><code>activity</code>：行数据标识符。用于标识行数据的作用范围，ACT(1)/DIS(2)/DEL(0)，启用、停用、逻辑删除。类型：<code>TINYINT(1)</code>。</li>\n    <li>所有的时间字段均以时间戳（Java十三位标准）的方式存储，Mysql对应<code>TIMESTAMP(13)</code>类型。</li>\n</ol>\n<h2 id="h2-4">ER范式规范与反范式规范</h2>\n<h3 id="h3-1">ER三范式</h3>\n<p>在联机事物数据库中（Mysql的InnoDB类型数据库）业务数据与业务数据（命名以<code>b</code>开头的表）之间的ER关系严格按照ER三范式进行设计：</p>\n<pre><code class="markdown">三范式原则：\n<span class="hljs-bullet">1. </span>有逻辑主键、主键非空、主键唯一、字段不可再分。\n<span class="hljs-bullet">2. </span>具备独立不依赖数据内容的逻辑主键。\n<span class="hljs-bullet">3. </span>没有属性传递（不能有数据冗余）\n</code></pre>\n<h3 id="h3-2">反范式适用范围</h3>\n<h4 id="h4-1">业务字典允许数据传递</h4>\n<p>业务数据(<code>b</code>开头)与数据字典（<code>d</code>开头）之间的依赖关系允许数据冗余（传递）。</p>\n<p>满足以上条件必须保证业务字典数据演进严格依赖<strong>开闭原则</strong>：类似设计模式的开闭原则——数据修改关闭，数据添加开放。</p>\n<p>这个时候可以在业务数据表中对业务字典进行数据冗余，例如:</p>\n<p>字典：</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>pid</th>\n        <th>code</th>\n        <th>name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>主键</td>\n        <td>父主键</td>\n        <td>业务编码</td>\n        <td>名称</td>\n        <td></td>\n    </tr>\n    </tbody>\n</table>\n<p>数据表：</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>state_fk</th>\n        <th>state_code</th>\n        <th>state_name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>主键</td>\n        <td>父外键</td>\n        <td>状态编码</td>\n        <td>状态名称</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<h4 id="h4-2">数据仓库或视图完全反范式</h4>\n<p>数据仓库（MyISam）或者事物数据库（InnoDB）中的视图和数据中间表优先使用反范式的规则去实现。</p>\n<h3 id="h3-3">参考阅读</h3>\n<p>关于范式设计的说明请参阅后文的**“ER范式与反范式设计规范设计背景及原因”**。</p>\n<h2 id="h2-5">主键规范</h2>\n<p>\n    逻辑（物理）主键使用64bit的<code>BigInt</code>类型，通过<strong>Snowflake算法获取</strong>。它可以完全充当<em>Mysql</em>主键，也能平滑兼容<em>MyCat</em>、<em>Sharding-jdbc</em>（3.0后更名为<em>Sharding-Sphere</em>）等开源分库分表数据源管理工具。\n</p>\n<p>业务组件原则上不做任何关联查询，只用于标记单表业务内容。</p>\n<p>采用该规范的原因请见后文<strong>主键规范设计背景及原因</strong>。</p>\n<h2 id="h2-6">数据缓存规范</h2>\n<p>缓存通过Redis实现。</p>\n<h3 id="h3-4">key使用规范</h3>\n<p>对应数据结构必须是扁平的（更像一个反范式的数据仓库表或视图）。由于在设计数据主键时保证主键id的全系统唯一性，理论上Nosql中key使用主键即刻确保唯一，但是为了区分业务，需要使用前缀。</p>\n<p><strong>索引数据使用模块+业务名+key：{module}:{buss}:{key}</strong>，例如</p>\n<pre><code class="bash">SET user:mgr:1234567891234567891\n</code></pre>\n<p>原则上key的长度不能超过64个字符。太长的业务key请使用hash进行一次签名。</p>\n<h3 id="h3-5">主数据与业务主键索引</h3>\n<p><strong>主数据</strong>：是指真实存储数据的结构。通常<em>对象</em>都是Redis中的HASH格式存储（HASH格式相当于Java中的map、Python中的dict、Json中的对象块——{}），功能数据数据根据需要使用string、set或list。\n</p>\n<p><strong>业务主键索引</strong>：在我们使用key-value进行数据存储时，用于查询的key并无法满足业务，有时候数据是用业务主键传参的，这个时候需要创建一个指向真实主数据的索引，建立业务主键和逻辑主键的关联关系。这个时候在Redis中可以使用业务索引映射主数据key然后再取值的方式，比如下列格式：\n</p>\n<pre><code class="sql"><span class="code-keyword">SET</span> {<span\n        class="code-keyword">module</span>}:{buss}:{code} {<span class="code-keyword">module</span>}:{buss}:{<span\n        class="code-keyword">id</span>}\n<span class="code-keyword">set</span> hkey {<span class="code-keyword">module</span>}:{buss}:{<span\n            class="code-keyword">id</span>} <span class="code-keyword">id</span> <span\n            class="hljs-number">123</span> <span class="code-keyword">name</span> <span\n            class="code-string">"Alice"</span> age <span class="hljs-number">20</span>\n</code></pre>\n<p>这样，业务主键code通过2次索引可以找到id对应的主数据。</p>\n<h3 id="h3-6">Value数据规范</h3>\n<p>Java中的实体对象使用Redis中的HASH格式存储，确保数据的扁平化，不能使用嵌套结构。例如</p>\n<pre><code class="objectivec"><span class="code-comment">//正确</span>\n<span class="code-keyword">id</span>:{\n    name:<span class="code-string">"Alice"</span>,\n    age:<span class="hljs-number">28</span>,\n    pos:<span class="code-string">"developer"</span>\n    salary:<span class="hljs-number">100000</span>\n}\n<span class="code-comment">//错误</span>\n<span class="code-keyword">id</span>:{\n    baseInfo:{\n        name:<span class="code-string">"Alice"</span>\n        age:<span class="hljs-number">28</span>\n    },\n    workInfo:{\n        pos:<span class="code-string">"developer"</span>,\n        salart:<span class="hljs-number">100000</span>\n    }\n}\n</code></pre>\n<p>其他应用场景可以根据需要使用Set、List、String，请注意他们的差异（与Java对应的数据结构类似），并且一定保证数据扁平。</p>\n<h2 id="h2-7">数据读写规范</h2>\n<ul>\n    <li>当需要批量读写数据时，使用mset、mget等原生批量处理命令，Redis自动保证数据原子性。</li>\n    <li>尽量不要使用通道——pipeline。</li>\n    <li>不要使用Redis做事务处理。</li>\n    <li>禁止线上使用keys、flushall、flushdb等，管理员redis的rename机制禁掉命令。（严重影响性能）</li>\n</ul>\n<p>参考资料：Redis更多的规范参考<a href="https://blog.csdn.net/glx490676405/article/details/79580748" title="阿里云Redis服务使用规范">阿里云Redis服务使用规范</a>。\n</p>\n<hr>\n<h2 id="h2-8">主键规范设计背景及原因。</h2>\n<p>在分布式微服务系统中采用Mysql的自增主键在分表分库、灾备合库、分布式执行、缓存Write-Behind写时会有很大制约，因此需要制定不依赖数据库的行主键规范。</p>\n<h3 id="h3-7">主键类型</h3>\n<p>在解释数据设计规范之前先理解<strong>物理主键</strong>、<strong>逻辑主键</strong>和<strong>业务主键</strong>的区别:</p>\n<p><strong>物理主键</strong>即认为是数据库的自身的物理标识主键，例如oracle的ROW_ID，mysql的自增Sequence，物理主键除了具备独立的物理特性，也是数据库连接数据的核心。mysql中要求单表唯一。\n</p>\n<p><strong>逻辑主键</strong>是与数据库无关的非业务意义的主键，用于对行数据的唯一性进行标识。在单数据库系统中，通常不需要逻辑主键，而在分布式系统中，逻辑主键的意义重大。无论是什么数据库，逻辑主键要求全库（所有的数据库）唯一。某些时候可以将物理主键和逻辑主键合二为一。\n</p>\n<p><strong>业务主键</strong>是指与含有业务特性的的主键，例如订单编号会以 时间+流水号+业务编号实行存在。业务主键通常的要求是单向业务唯一，由于从技术角度来说业务是随时可变的，因此业务主键并不能提到逻辑主键或物理主键。\n</p>\n<h3 id="h3-8">MySql（InnoDB）索引特性</h3>\n<p>由于InnoDB的行数据排列是以主键数据（Oracle是ROW_ID）作为b+树索引，<strong>而扩展的索引都以主键索引作为数据对象——这种方式称为聚集索引</strong>。所以最大效率的保证b+树主键和索引数据进入的递增性对于数据库的性能有决定性作用（b+树越扁平，效率越高）。\n</p>\n<p>使用mysql的自增Sequence可以很自然的解决这个问题，主键就向一个队列一样，只要insert数据向队列尾push数据即可，几乎不会发生索引重建和数据碎片。但是自增队在分布式系统中使用有巨大的局限性。</p>\n<p>如果直接使用UUID既充当物理主键又充当业务主键，由于 <em>UUID并无法保障数据的递增性(？)</em>,会导数据碎片已经主键索引更新效率。此外UUID的长度是32位字符串，即使用ascii的编码方案，也会占据不少的空间。\n</p>\n<h3 id="h3-9">传统中间解决方案</h3>\n<p>\n    基于Mysql目前也可以自动生成UUID，所以有一种中间解决方案是在分布式系统的数据库中物理主键使用Mysql的自增Sequence，逻辑主键使用UUID，所有的ER关联都使用UUID建立，这样可以很好的保障<strong>聚集索引</strong>添加数据的效率，且能极大减少碎片。由于InnoDB聚集索引除了主键索引都会引起二次查询，所以这种方式外关联效率较差（即使是单表查询效率也一般）。\n</p>\n<h3 id="h3-10">主键需求</h3>\n<p>整合以上内容，现在我们需要一个具备以下特征的主键：</p>\n<ol>\n    <li>递增。</li>\n    <li>全系统唯一（至少保证单业务唯一）。</li>\n    <li>高效产生。</li>\n    <li>尽量短。（减少扩展索引的存储空间）</li>\n</ol>\n<h3 id="h3-11">连续递增与趋势递增</h3>\n<p>对于B+树递增要求的并不需要连续递增（0,1,2,3,4......）,只要趋势递增即可（0,3,5,7,18,100.....）。</p>\n<h3 id="h3-12">Snowflake算法</h3>\n<p>为了满足主键需求，现在比较推崇的是<em>Snowflake算法</em>。</p>\n<p>\n    <img src="http://upload-images.jianshu.io/upload_images/2308314-36052935d31a654e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp"\n         alt="数据结构（数据库）设计规范" title="Snowflake算法" class="zoom-in-cursor"></p>\n<p>Snowflake算法会产生一个<code>64bit</code>的数据，正好在Java中是一个long类型，对应Mysql是一个BigInt类型。</p>\n<ol>\n    <li>第一位是符号位（正负号）。在使用过程中基本不用理睬。</li>\n    <li>其后的41位表示时间戳的差值。</li>\n    <li>10位工作机id称为workid，需要人工指定。10bit=2^10=1024个Id</li>\n    <li>后续的12位用于在微秒级别生成序列号。</li>\n</ol>\n<p><strong>效率：</strong></p>\n<ul>\n    <li>\n        <p>因为其本质上还是一个数字，所以在关联查询能力上不会比源生的自增Sequence的差多少（微秒/纳秒级别）。</p>\n    </li>\n    <li>\n        <p>官方文档Snowflake Id算法理论上单机每秒可以生成409.6万个ID——1000个微秒单位，12位序列编码=1000*(2^12)。</p>\n    </li>\n</ul>\n<p><strong>递增性质：</strong></p>\n<p>算法是以微秒+递增序列作为区分的，并且时间单位处于64bit中的高位，在所有的微服务节点没有达到生成极限时（每秒409.6万个）一定是趋势递增的，计时达到了极限，也仅仅在时间单位出现相同。</p>\n<p><strong>传输：</strong></p>\n<p>64bit的long类型转换为十进制只有20个数字，由于64bit的第一个位置表示符号，所以实际只有19个数字。在http报文中仅仅是19个字符。如果将其转换为16进制或[0~9a~z]满表的36进制。长度还能极大的压缩。</p>\n<p><strong>局限性：</strong></p>\n<ol>\n    <li>\n        <p>\n            由于其本质是基于微秒级的机器时间戳进行ID生成，所以当整个集群有时间一致性服务时候，可能会发生时间回拨（也有可能是人为修改，不过几乎不可能发生）。当时间发生回拨时就会有极大的概率在回拨时间区内出现主键冲突。百度有个Snowflake算法变种解决方案是使用中心化的按块生成ID尽可能的回避这个问题。此外如果并发并没有达到极高的程度时，可以让入口服务器来统一生成access_id作为后续业务新增数据时的主键，当然这也没法完全解决这个问题。</p>\n    </li>\n    <li>\n        <p>\n            64bit的算法如果要求全系统主键唯一，那么基于算法的workid特性最大支持1024台服务器同时生成主键，再多就会出现冲突。解决办法就是不要求全系统唯一，而收敛为单个业务唯一，这样可以视为单个业务可以具有1024个分布式服务。</p>\n    </li>\n    <li>\n        <p>其数据位数决定了其从使用开始最多服务61年，61年后出现类似于千年虫的问题超出现有数据位。</p>\n    </li>\n</ol>\n<h3 id="h3-13">参考</h3>\n<ol>\n    <li>Snowflake算法最早由推特twitter的工程师创立并开源，现在整合到RPC框架<a href="https://twitter.github.io/finagle/"\n                                                      title="Finagle">Finagle</a>中，当然没必要引入整个Finagle，可以到这里<a\n            href="https://github.com/twitter-archive/snowflake/releases/tag/snowflake-2010" title="基本算法下载地址">下载核心算法</a>。\n    </li>\n    <li>Snowflake有个非常方便的使用途径是引入<a href="https://mvnrepository.com/artifact/io.shardingsphere/sharding-core"\n                                  title="sharding-core">sharding-core</a>。然后使用其中的<a\n            href="https://github.com/apache/incubator-shardingsphere/blob/b281f3e52410c2fdbc3e12e69a09e5109a96fa20/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/keygen/SnowflakeShardingKeyGenerator.java"\n            title="SnowflakeShardingKeyGenerator">SnowflakeShardingKeyGenerator</a>。当然Snowflake算法本身并不复杂，使用源码就能解决问题，而且具有极佳的扩展性。\n    </li>\n    <li>算法中workid最大支持1024，通常可以通过主动命名、ip地址、服务器命名等方式决定。</li>\n    <li>网上关于Snowflake算法的极少很多，自行查询解决问题。</li>\n</ol>\n<hr>\n<h2 id="h2-9">ER范式与反范式设计规范设计背景及原因</h2>\n<h3 id="h3-14">业务字典与代码适配器</h3>\n<p>通常情况下，在一个标准的联机事物系统中数据库和业务代码的关系可以总结为：</p>\n<ul>\n    <li>数据库的的作用就是存储业务数据和状态结论。</li>\n    <li>业务代码是为了处理数据从外部进入或数据库内部的状态迁移。</li>\n</ul>\n<p>例如一个用户注册，通过代码各种处理和鉴权之后，最终会将用户的各种注册信息写入到数据库中。一个用户登录会涉及到数据库已经存在的数据的变更。</p>\n<p>\n    数据库可以看成一个静态的网状结构，只是忠实的在网状结构的某些点记录“结论”，结论通常由2部分组成：数据+状态。与之相对的，代码的作用就是接收外部信息后触发数据库中的状态迁移和数据演进。业务代码最困难的也是导致问题最多的就是状态控制与状态处理。</p>\n<p>对于代码而言，处理各种状态是最常见的过程，例如：</p>\n<pre><code class="Java"><span class="code-keyword">if</span>（state = A）{\n    <span class="code-keyword">do</span> A processor\n}<span class="code-keyword">else</span> <span class="code-keyword">if</span>(state = B){\n    <span class="code-keyword">do</span> B processor\n}\n</code></pre>\n<p>一个不规范的数据库状态的存储方式千差万别，例如一个用户信息表<code>user_info</code>有以下结构:</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>name</th>\n        <th>user_state</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alice</td>\n        <td>0</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Bob</td>\n        <td>1</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<p>现在有一个<code>user_state</code>字段表示用户状态，然后当值为0时表示注销、当值为1时候表示启用，或者还会有其他更多的状态不断添加进来。</p>\n<p>这样会导致3个问题：</p>\n<ol>\n    <li>0和1并没有实际意义，在设计初期可能会很有意识的在字段备注中说明每个数字带边状态意义，但是在系统不断的进化或迭代后，0和1的控制难度会越来越大。</li>\n    <li>状态的不同必然会导致分支处理，分支处理最粗暴的方式就是上面的代码例子会进行if-else堆叠，随着状态的增加，整个系统的if-else块会飞速递增。</li>\n    <li>\n        无论是否使用0和1还是有实际意义的单词标记状态。在理解的过程中要嵌入大量的if块去了解处理的结果，可读性很差。从而导致新加入项目的开发人员无暇去根据已有的状态阅读代码，而更趋向于增加状态而非在原来的状态上进行演进。这样会导致一个简单的业务标识状态的字段会越来越多。\n    </li>\n</ol>\n<p>基于以上原因，引入业务字典来解决这个问题。将上面的状态控制拆分为业务字典表和业务表。</p>\n<p>业务字典表</p>\n<table>\n    <thead>\n    <tr>\n        <th>code</th>\n        <th>name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>activity</td>\n        <td>账户启用</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>locked</td>\n        <td>账户锁定</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<p>数据报表</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>name</th>\n        <th>user_state</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alice</td>\n        <td>activity</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Bob</td>\n        <td>locked</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<pre><code class="Java"><span class="code-comment">//伪编码</span>\n\n<span class="hljs-class"><span class="code-keyword">interface</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function">Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>;\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Activity</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>{\n        <span class="code-comment">//DO</span>\n    }\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Locked</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>{\n        <span class="code-comment">//DO</span>\n    }\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">AdapterFactory</span></span>{\n\n    <span class="code-comment">//写Java的请注意</span>\n    <span class="code-comment">//这里用js或Python的方式表示一个map结构（python中叫dict结构，js中叫对象结构）</span>\n    <span class="code-comment">//只因用Java表示一个map太麻烦</span>\n    Map processorDict = {\n        <span class="code-string">"activity"</span>:Activity.instance,\n        <span class="code-string">"locked"</span>:Locked.instance\n    }\n\t\n    <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-title">getProcessor</span><span class="hljs-params">(<span class="code-keyword">enum</span> state)</span></span>{\n        <span class="code-keyword">return</span> processorDict[State];\n    }\n}\n\n<span class="code-comment">//使用</span>\nProcessor processor = AdapterFactory.getProcessor(state);\nprocessor.<span class="code-keyword">do</span>(data);\n</code></pre>\n<p>使用以上方式。首先在业务流程中不必嵌套大量的if。其次可以将代码与业务字典的状态进行1-1绑定，即一个状态对应一个适配器。最后需要扩展更多的状态的就是对应扩展更多的处理器（适配器）。</p>\n<p>咋一看这样的写法似乎比if多不少代码，但是用这种状态+适配器的模式在系统迭代时能够带来极大的便利。</p>\n<h3 id="h3-15">数据仓库的反范式</h3>\n<p>严格按照ER三范式设计数据库带来的好处是能最好的反应真实业务，能及有效的约束数据强一致性避免“脏数据”的出现。带来的问题是大量的外关联导致大量的关联查询，严重影响查询性能。</p>\n<p>因此建议如果某项业务启用了数据仓库（MyISam），或者在事物数据库（InnoDB）中使用了View或中间表集合数据，务必严格按照Kimball或Inmon模型使用反范式创立单体数据仓库表。</p>'}});