webpackJsonp([15],{324:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h2 id="h2-1">Hazelcast是什么</h2>\n<p>“分布式”、“集群服务”、“网格式内存数据”、“分布式缓存“、“弹性可伸缩服务”——这些牛逼闪闪的名词拿到哪都是ITer装逼的不二之选。在Javaer的世界，有这样一个开源项目，只需要引入一个jar包、只需简单的配置和编码即可实现以上高端技能，他就是 <em>Hazelcast</em>。</p>\n<p><em>Hazelcast </em>是由Hazelcast公司（没错，这公司也叫Hazelcast！）开发和维护的开源产品，可以为基于jvm环境运行的各种应用提供分布式集群和分布式缓存服务。Hazelcast可以嵌入到任何使用Java、C++、.NET开发的产品中（C++、.NET只提供客户端接入）。Hazelcast目前已经更新到3.X版本，Java中绝大部分数据结构都被其以为分布式的方式实现。比如Javaer熟悉的Map接口，当通过Hazelcast创建一个Map实例后，在节点A调用&nbsp;<em>Map::put("A","A_DATA")&nbsp;</em>方法添加数据，节点B使用&nbsp;<em>Map::get("A")&nbsp;</em>可以获到值为<em>"A_DATA" </em>的数据<em>。Hazelcast </em>提供了 <em>Map、Queue、MultiMap、Set、List、Semaphore、Atomic&nbsp;</em>等接口的分布式实现；提供了基于<em>Topic&nbsp;</em>实现的消息队列或订阅\\发布模式；提供了分布式id生成器（<em>IdGenerator</em>）；提供了分布式事件驱动（<em>Distributed Events</em>）；提供了分布式计算（<em>Distributed Computing</em>）；提供了分布式查询（<em>Distributed Query</em>）。总的来说在独立jvm经常使用数据结果或模型&nbsp;<em>Hazelcast </em>都提供了分布式集群的实现。</p>\n<p><em>Hazelcast </em>有开源版本和商用版本。开源版本遵循 <em>Apache License 2.0&nbsp;</em>开源协议免费使用。商用版本需要获取特定的License，两者之间最大的区别在于：商用版本提供了数据高密度存储。我们都知道jvm有自己特定的GC机制，无论数据是在堆还是栈中，只要发现无效引用的数据块，就有可能被回收。而<em>Hazelcast</em>的分布式数据都存放在jvm的内存中，频繁的读写数据会导致大量的GC开销。使用商业版的<em>Hazelcast</em>会拥有高密度存储的特性，大大降低Jvm的内存开销，从而降低GC开销。</p>\n<p>很多开源产品都使用Hazelcast 来组建微服务集群，例如咱们的Vert.x，首选使用Hazelcast来组建分布式服务。有兴趣可以看我的这篇分享——<a title="Vert.x 如何创建集群" href="https://www.chkui.com/article/vertx/vertx_source_code_how_to_create_cluster" >Vert.x 如何创建集群</a> ，文中说明了Vert.x如何使用Hazelcast组建集群。</p>\n<p>附：</p>\n<ul>\n    <li>Hazelcast源码：<a title="Hazelcast开源项目源码" href="https://github.com/hazelcast/hazelcast" rel="nofollow">https://github.com/hazelcast/hazelcast</a></li>\n    <li>关于Hazelcast的问题可以到<a title="Hazelcast问题Github提交" href="https://github.com/hazelcast/hazelcast/issues" rel="nofollow">https://github.com/hazelcast/hazelcast/issues</a>或<a title="Hazelcast问题stackoverflow" href="http://stackoverflow.com" rel="nofollow">http://stackoverflow.com</a>。</li>\n</ul>\n<h2 id="h2-2">Hazelcast的特性</h2>\n<h3 id="h3-1">自治集群（无中心化）</h3>\n<p><em>Hazelcast </em>没有任何中心节点（文中的节点可以理解为运行在任意服务器的独立jvm，下同），或者说<em>Hazelcast </em>不需要特别指定一个中心节点。在运行的过程中，它自己选定集群中的某个节点作为中心点来管理所有的节点。</p>\n<h3 id="h3-2">数据按应用分布式存储</h3>\n<p><em>Hazelcast </em>的数据是分布式存储的。他会将数据尽量存储在需要使用该项数据的节点上，以实现数据去中心化的目的。在传统的数据存储模型中（<em>MySql、MongDB、Redis&nbsp;</em>等等）数据都是独立于应用单独存放，当需要提升数据库的性能时，需要不断加固单个数据库应用的性能。即使是现在大量的数据库支持集群模式或读写分离，但是基本思路都是某几个库支持写入数据，其他的库不断的拷贝更新数据副本。这样做的坏处一是会产生大量脏读的问题，二是消耗大量的资源来传递数据——从数据源频繁读写数据会耗费额外资源，当数据量增长或创建的主从服务越来越多时，这个消耗呈指数级增长。</p>\n<p>使用 <em>Hazelcast </em>可以有效的解决数据中心化问题。他将数据分散的存储在每个节点中，节点越多越分散。每个节点都有各自的应用服务，而Hazelcast集群会根据每个应用的数据使用情况分散存储这些数据，在应用过程中数据会尽量“靠近”应用存放。这些在集群中的数据共享整个集群的存储空间和计算资源。</p>\n<h3 id="h3-3">抗单点故障</h3>\n<p>集群中的节点是无中心化的，每个节点都有可能随时退出或随时进入。因此，在集群中存储的数据都会有一个备份（可以配置备份的个数，也可以关闭数据备份）。这样的方式有点类似于 <em>hadoop</em>，某项数据存放在一个节点时，在其他节点必定有至少一个备份存在。当某个节点退出时，节点上存放的数据会由备份数据替代，而集群会重新创建新的备份数据。</p>\n<h3 id="h3-4">简易性</h3>\n<p>所有的 <em>Hazelcast </em>功能只需引用一个jar包，除此之外，他不依赖任何第三方包。因此可以非常便捷高效的将其嵌入到各种应用服务器中，而不必担心带来额外的问题（jar包冲突、类型冲突等等）。他仅仅提供一系列分布式功能，而不需要绑定任何框架来使用，因此适用于任何场景。</p>\n<p>除了以上特性，<em>Hazelcast </em>还支持服务器/客户端模型，支持脚本管理、能够和 <em>Docker </em>快速整合等等。</p>\n<h2 id="h2-3">简单使用例子</h2>\n<p>前面说了那么多概念，必须要来一点干货了。下面是一个使用 <em>Hazelcast </em>的极简例子。文中的所有代码都在github上：<a title="随风溜达的向日葵github-Hazelcast" href="https://github.com/chkui/hazelcast-demo" rel="nofollow">https://github.com/chkui/hazelcast-demo</a>。</p>\n<p>首先引入<em>Hazelcast</em>的jar包。</p>\n<p><em>Maven（pom.xml）</em>：</p>\n<pre class="dust"><code class="language-xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">dependency</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">groupId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">com.hazelcast</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">groupId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">artifactId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">hazelcast</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">artifactId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n\t</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">version</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">$</span><span class="code-template-variable">{hazelcast.vertsion}</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">version</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">dependency</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span></code></pre>\n<p><em>Gradle（build.gradle）</em>：</p>\n<pre class="nginx"><code class="language-xml"><span class="code-attribute">compile</span> com.hazelcast:hazelcast:<span class="code-variable">${hazelcast.vertsion}</span></code></pre>\n<p>先创一个建 <em>Hazelcast </em>节点：</p>\n<pre class="javascript"><code class="language-java"><span class="code-comment"><span class="code-comment">//org.palm.hazelcast.getstart.HazelcastGetStartServerMaster </span></span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">HazelcastGetStartServerMaster</span></span></span><span class="hljs-class"> </span></span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword"><span class="code-keyword">static</span></span> <span class="code-keyword"><span class="code-keyword">void</span></span> <span class="code-title">main</span><span class="hljs-params">(<span class="code-built_in">String</span>[] args)</span> </span>{\n\t\t<span class="code-comment"><span class="code-comment">// 创建一个 hazelcastInstance实例</span></span>\n\t\tHazelcastInstance instance = Hazelcast.newHazelcastInstance();\n\t\t<span class="code-comment"><span class="code-comment">// 创建集群Map</span></span>\n\t\t<span class="code-built_in">Map</span>&lt;Integer, <span class="code-built_in">String</span>&gt; clusterMap = instance.getMap(<span class="code-string"><span class="code-string">"MyMap"</span></span>);\n\t\tclusterMap.put(<span class="hljs-number"><span class="hljs-number">1</span></span>, <span class="code-string"><span class="code-string">"Hello hazelcast map!"</span></span>);\n\n\t\t<span class="code-comment"><span class="code-comment">// 创建集群Queue</span></span>\n\t\tQueue&lt;<span class="code-built_in">String</span>&gt; clusterQueue = instance.getQueue(<span class="code-string"><span class="code-string">"MyQueue"</span></span>);\n\t\tclusterQueue.offer(<span class="code-string"><span class="code-string">"Hello hazelcast!"</span></span>);\n\t\tclusterQueue.offer(<span class="code-string"><span class="code-string">"Hello hazelcast queue!"</span></span>);\n\t}\n}</code></pre>\n<p>上面的代码使用&nbsp;<em>Hazelcast </em>实例创建了一个节点。然后通过这个实例创建了一个分布式的Map和分布式的Queue，并向这些数据结构中添加了数据。运行这个main方法，会在console看到以下内容：</p>\n<blockquote>\n    <p>Members [1] {<br> &nbsp;&nbsp; &nbsp;Member [192.168.1.103]:5701 this<br> }</p>\n</blockquote>\n<p>随后再创建另外一个节点：</p>\n<pre class="cs"><code class="language-java"><span class="code-comment"><span class="code-comment">// org.palm.hazelcast.getstart.HazelcastGetStartServerSlave</span></span>\n<span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span class="code-keyword"><span class="code-keyword">class</span></span> <span class="code-title"><span class="code-title">HazelcastGetStartServerSlave</span></span> </span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span class="hljs-params"><span class="hljs-function">(<span class="hljs-params">String[] args</span>)</span></span><span class="hljs-function"> </span></span>{\n\t\t<span class="code-comment"><span class="code-comment">//创建一个 hazelcastInstance实例</span></span>\n\t\tHazelcastInstance instance = Hazelcast.newHazelcastInstance();\n\t\tMap&lt;Integer, String&gt; clusterMap = instance.getMap(<span class="code-string"><span class="code-string">"MyMap"</span></span>);\n\t\tQueue&lt;String&gt; clusterQueue = instance.getQueue(<span class="code-string"><span class="code-string">"MyQueue"</span></span>);\n\t\t\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Map Value:"</span></span> + clusterMap.<span class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">1</span></span>));\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Size :"</span></span> + clusterQueue.size());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Value 1:"</span></span> + clusterQueue.poll());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Value 2:"</span></span> + clusterQueue.poll());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Size :"</span></span> + clusterQueue.size());\n\t}\n}</code></pre>\n<p>该节点的作用是从<em>Map、Queue</em>中读取数据并输出。运行会看到以下输出</p>\n<blockquote>\n    <p>Members [2] {<br> &nbsp;&nbsp; &nbsp;Member [192.168.1.103]:5701<br> &nbsp;&nbsp; &nbsp;Member [192.168.1.103]:5702 this<br> }</p>\n    <p>八月 06, 2016 11:33:29 下午 com.hazelcast.core.LifecycleService<br> 信息: [192.168.1.103]:5702 [dev] [3.6.2] Address[192.168.1.103]:5702 is STARTED<br> Map Value:Hello hazelcast map!<br> Queue Size :2<br> Queue Value 1:Hello hazelcast!<br> Queue Value 2:Hello hazelcast queue!<br> Queue Size :0</p>\n</blockquote>\n<p>至此，2个节点的集群创建完毕。第一个节点向map实例添加了{key:1,value:"Hello hazelcast map!"}，向queue实例添加[“Hello hazelcast!”,“Hello hazelcast queue!”]，第二个节点读取并打印这些数据。</p>\n<p>除了直接使用Hazelcast服务来组建集群，Hazelcast还提供了区别于服务端的客户端应用包。客户端与服务端最大的不同是：他不会存储数据也不能修改集群中的数据。目前客户端有C++、.Net、Java多种版本。</p>\n<p>使用客户端首先要引入客户端jar包。</p>\n<p><em>Maven（pom.xml）</em>：</p>\n<pre class="dust"><code class="language-xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">dependency</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">groupId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">com.hazelcast</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">groupId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">artifactId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">hazelcast-client</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">artifactId</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">version</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">$</span><span class="code-template-variable">{hazelcast.version}</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">version</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">dependency</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span></code></pre>\n<p><em>Gradle（build.gradle）</em>：</p>\n<pre class="nginx"><code class="nginx"><span class="code-attribute"><span class="code-attribute">compile</span></span> com.hazelcast:hazelcast-client:<span class="code-variable"><span class="code-variable">${hazelcast.vertsion}</span></span></code></pre>\n<p>创建一个client节点。</p>\n<pre class="cs"><code class="language-java"><span class="code-keyword"><span class="code-keyword">public</span></span> <span class="hljs-class"><span class="code-keyword"><span class="code-keyword">class</span></span> <span class="code-title"><span class="code-title">HazelcastGetStartClient</span></span> </span>{\n\t<span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">public</span></span></span><span class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">static</span></span></span><span class="hljs-function"> </span><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">void</span></span></span><span class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">main</span></span></span><span class="hljs-params"><span class="hljs-function">(<span class="hljs-params">String[] args</span>)</span></span><span class="hljs-function"> </span></span>{\n\t\tClientConfig clientConfig = <span class="code-keyword"><span class="code-keyword">new</span></span> ClientConfig();\n\t\tHazelcastInstance instance = HazelcastClient.newHazelcastClient(clientConfig);\n\t\tMap&lt;Integer, String&gt; clusterMap = instance.getMap(<span class="code-string"><span class="code-string">"MyMap"</span></span>);\n\t\tQueue&lt;String&gt; clusterQueue = instance.getQueue(<span class="code-string"><span class="code-string">"MyQueue"</span></span>);\n\t\t\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Map Value:"</span></span> + clusterMap.<span class="code-keyword">get</span>(<span class="hljs-number"><span class="hljs-number">1</span></span>));\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Size :"</span></span> + clusterQueue.size());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Value 1:"</span></span> + clusterQueue.poll());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Value 2:"</span></span> + clusterQueue.poll());\n\t\tSystem.<span class="code-keyword">out</span>.println(<span class="code-string"><span class="code-string">"Queue Size :"</span></span> + clusterQueue.size());\n\t}\n}</code></pre>\n<p>然后先启动 <em>HazelcastGetStartServerMaster::main</em>，再启动 <em>HazelcastGetStartClient::main</em>。可以看到客户端输出：</p>\n<blockquote>\n    <p>Members [1] {<br> &nbsp;&nbsp; &nbsp;Member [192.168.197.54]:5701<br> }</p>\n    <p>八月 08, 2016 10:54:22 上午 com.hazelcast.core.LifecycleService<br> 信息: HazelcastClient[hz.client_0_dev][3.6.2] is CLIENT_CONNECTED<br> Map Value:Hello hazelcast map!<br> Queue Size :2<br> Queue Value 1:Hello hazelcast!<br> Queue Value 2:Hello hazelcast queue!<br> Queue Size :0</p>\n</blockquote>\n<p>至此，客户端功能也创建完毕&nbsp;。可以看到客户端的console输出内容比服务端少了很多，这是因为客户端不必承载服务端的数据处理功能，也不必维护各种节点信息。</p>\n\n<h2 id="h2-4">例子运行解析</h2>\n<p>下面我们根据console的输出来看看 <em>Hazelcast </em>启动时到底干了什么事。（下面的输出因环境或IDE不同，可能会有差异）</p>\n<blockquote>\n    <p><span style="color:#FF0000">class: com.hazelcast.config.XmlConfigLocator<br> info:&nbsp;Loading \'hazelcast-default.xml\' from classpath.&nbsp;</span></p>\n</blockquote>\n<p>这里输出的内容表示<em>Hazelcast</em>启动时加载的配置文件。如果用户没有提供有效的配置文件，<em>Hazelcast</em>会使用默认配置文件。后续的文章会详细说明 <em>Hazelcast </em>的配置。</p>\n<blockquote>\n    <p><span style="color:#FF0000">class: com.hazelcast.instance.DefaultAddressPicker<br> info: Prefer IPv4 stack is true.<br> class: com.hazelcast.instance.DefaultAddressPicker<br> info:&nbsp;Picked Address[192.168.197.54]:5701, using socket ServerSocket[addr=/0:0:0:0:0:0:0:0,localport=5701], bind any local is true</span></p>\n</blockquote>\n<p>这一段输出说明了当前 <em>Hazelcast </em>的网络环境。首先是检测IPv4可用且检查到当前的IPv4地址是192.168.197.54。然后使用IPv6启用socket。在某些无法使用IPv6的环境上，需要强制指定使用IPv4，增加jvm启动参数：<em>-Djava.net.preferIPv4Stack=true</em> 即可。</p>\n<blockquote>\n    <p><span style="color:#FF0000">class: com.hazelcast.system<br> info:&nbsp;Hazelcast 3.6.2 (20160405 - 0f88699) starting at Address[192.168.197.54]:5701<br> class: com.hazelcast.system<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Copyright (c) 2008-2016, Hazelcast, Inc. All Rights Reserved.</span></p>\n</blockquote>\n<p>这一段输出说明了当前实例的初始化端口号是5701。<em>Hazelcast&nbsp;</em>默认使用5701端口。如果发现该端口被占用，会+1查看5702是否可用，如果还是不能用会继续向后探查直到5800。<em>Hazelcast&nbsp;</em>默认使用5700到5800的端口，如果都无法使用会抛出启动异常。</p>\n<blockquote>\n    <p><span style="color:#FF0000">class: com.hazelcast.system<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Configured Hazelcast Serialization version : 1<br> class: com.hazelcast.spi.OperationService<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Backpressure is disabled<br> class: com.hazelcast.spi.impl.operationexecutor.classic.ClassicOperationExecutor<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Starting with 2 generic operation threads and 4 partition operation threads.</span></p>\n</blockquote>\n<p>这一段说明了数据的序列化方式和启用的线程。<em>Hazelcast </em>在节点间传递数据有2种序列化方式，在后续的文章中国会详细介绍。<em>Hazelcast&nbsp;</em>会控制多个线程执行不同的工作，有负责维持节点连接的、有负责数据分区管理的。</p>\n<blockquote>\n    <p><span style="color:#FF0000">class: com.hazelcast.instance.Node<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Creating MulticastJoiner<br> class: com.hazelcast.core.LifecycleService<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Address[192.168.197.54]:5701 is STARTING<br> class: com.hazelcast.nio.tcp.nonblocking.NonBlockingIOThreadingModel<br> info: [192.168.197.54]:5701 [dev] [3.6.2] TcpIpConnectionManager configured with Non Blocking IO-threading model: 3 input threads and 3 output threads<br> class: com.hazelcast.cluster.impl.MulticastJoiner<br> info: [192.168.197.54]:5701 [dev] [3.6.2]&nbsp;</span></p>\n</blockquote>\n<p>上面这一段输出中，<span style="color:#000000">Creating MulticastJoiner表示使用组播协议来组建集群。还创建了6个用于维护非拥塞信息输出\\输出。</span></p>\n<blockquote>\n    <p><span style="color:#FF0000">Members [1] {</span><br> <span style="color:#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;Member [192.168.197.54]:5701<br> &nbsp;&nbsp;&nbsp;&nbsp;Member [192.168.197.54]:5702&nbsp;this<br> }</span></p>\n    <p><span style="color:#FF0000">class: com.hazelcast.core.LifecycleService<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Address[192.168.197.54]:5701 is STARTED</span><br> <span style="color:#FF0000">class: com.hazelcast.partition.InternalPartitionService<br> info: [192.168.197.54]:5701 [dev] [3.6.2] Initializing cluster partition table arrangement...</span></p>\n</blockquote>\n<p><span style="color:#000000">&nbsp;&nbsp;&nbsp;&nbsp;Members[2]表示当前集群只有2个节点。2个节点都在ip为</span>192.168.197.54<span style="color:#000000">的这台设备上，2个节点分别占据了5701端口和5702端口。端口后面的this说明这是当前节点，而未标记this的是其他接入集群的节点。最后InternalPartitionService输出的信息表示集群初始化了“数据分片”，后面会介绍“数据分片”的概念和原理。</span></p>\n<p><span style="color:#000000">&nbsp; &nbsp; 上面就是Hazelcast在默认情况下执行的启动过程，可以看出在初始化的过程中我们可以有针对性的修改一些Hazelcast的行为：</span></p>\n<ol>\n    <li>使用默认配置文档 <em>hazelcast-default.xml </em>来启动集群。<span style="color:#FF0000">因此我们可以自定义这个配置文件来影响<em>Hazelcast&nbsp;</em>的行为</span>。</li>\n    <li>启用IPv4或IPv6来建立集群，因此可以知道Hazelcast集群的通信是基于TCP、UDP，需要打开socket支持集群交互。<span style="color:#FF0000">因此我们可以指定使用的通讯方案</span>。</li>\n    <li><em>Hazelcast</em>会启动多个线程来执行不同的工作，有些负责维护数据、有些负责集群通信、有些负责一些基础操作。<span style="color:#FF0000">因此我们可以配置和管理这些线程</span>。</li>\n    <li><em>Hazelcast</em>默认使用<em>MulitCast</em>（组播协议）来组建集群，因此在局域网环境他可以无需配置自己完成集群组建。<span style="color:#FF0000">因此我们可以指定使用TCP/IP或其他通讯协议</span>。</li>\n    <li><em>Hazelcast</em>会自己探寻可以使用的端口，默认情况下会使用5700到5800间没有被占用的端口。<span style="color:#FF0000">因此我们可以配置这些端口如何使用</span>。</li>\n    <li><em>Hazelcast</em>初始化一个名为“数据分片”的方案来管理和存储数据。<span style="color:#FF0000">因此我们可以调整和控制这些数据分片</span>。</li>\n</ol>\n<p>以上所有红色字体的部分都可以通过配置文件来影响。在后续的文章中会详细介绍相关的 配置说明（待续）。</p>\n<p>-----------------------------------亮瞎人的分割线-----------------------------------</p>\n<p>如果对Hazelcast的基本原理没什么兴趣，就不用向下看“运行结构“和“数据分片原理”了，直接去 <a title="Hazelcast基本配置" href="https://www.chkui.com/article/hazelcast/hazelcast_configuration_management">Hazelcast基本配置</a>了解如何使用Hazelcast吧。</p>\n<h2 id="h2-5">Hazelcast运行结构</h2>\n<p>Hazelcast的官网上列举了2种运行模式，一种是p2p（点对点）模式、一种是在点对点模式上扩展的C/S模式。下图是p2p模式的拓补结构。</p>\n<p style="text-align:center"><img alt="" height="249" src="https://file.mahoooo.com/res/file/hazelcast_get_started_and_code_sample_1.png" width="334"></p>\n<p>在p2p模式中，所有的节点（Node）都是集群中的服务节点，提供相同的功能和计算能力。每个节点都分担集群的总体性能，每增加一个节点都可以线性增加集群能力。</p>\n<p>在p2p服务集群的基础上，我们可以增加许多客户端接入到集群中，这样就形成了集群的C/S模式，提供服务集群视作S端，接入的客户端视作C端。这些客户端不会分担集群的性能，但是会使用集群的各种资源。下图的结构就是客户端接入集群的情况。</p>\n<p style="text-align:center"><img alt="" height="257" src="https://file.mahoooo.com/res/file/hazelcast_get_started_and_code_sample_2.png" width="507"></p>\n<p>可以为客户端提供特别的缓存功能，告知集群让那些它经常要使用的数存放在“离它最近”的节点。</p>\n<h2 id="h2-6">Hazelcast分片概念与原理</h2>\n<p><em>Hazelcast</em>通过分片来存储和管理所有进入集群的数据，采用分片的方案目标是保证数据可以快速被读写、通过冗余保证数据不会因节点退出而丢失、节点可线性扩展存储能力。下面将从理论上说明<em>Hazelcast</em>是如何进行分片管理的。</p>\n<h3 id="h3-5">分片</h3>\n<p><em>Hazelcast</em>的每个数据分片（shards）被称为一个分区（Partitions）。分区是一些内存段，根据系统内存容量的不同，每个这样的内存段都包含了几百到几千项数据条目，默认情况下，<em>Hazelcast</em>会把数据划分为271个分区，并且每个分区都有一个备份副本。当启动一个集群成员时，这271个分区将会一起被启动。</p>\n<p>下图展示了集群只有一个节点时的分区情况。</p>\n<p><img alt="" height="234" src="https://file.mahoooo.com/res/file/hazelcast_get_started_and_code_sample_3.png" width="99"></p>\n<p>从一个节点的分区情况可以看出，当只启动一个节点时，所有的271个分区都存放在一个节点中。然后我们启动第二个节点。会出现下面这样的分区方式。</p>\n<p><img alt="" height="259" src="https://file.mahoooo.com/res/file/hazelcast_get_started_and_code_sample_4.png" width="214"></p>\n<p>二个节点的图中，用黑色文字标记的表示主分区，用蓝色文字标记的表示复制分区（备份分区）。第一个成员有135个主分区（黑色部分），所有的这些分区都会在第二个成员中有一个副本（蓝色部分），同样的，第一个成员也会有第二个成员的数据副本。</p>\n<p>当增加更多的成员时，<em>Hazelcast</em>会将主数据和备份数据一个接一个的迁移到新成员上，最终达成成员之间数据均衡且相互备份。当<em>Hazelcast</em>发生扩展的时候，只有最小数量的分区被移动。下图呈现了4个成员节点的分区分布情况。</p>\n<p><img alt="" height="258" src="https://file.mahoooo.com/res/file/hazelcast_get_started_and_code_sample_5.png" width="445"></p>\n<p>上面的几个图说明了的Hazelcast是如何执行分区的。通常情况下，分区的分布情况是无序的，他们会随机分布在集群中的各个节点中。最重要的是，Hazelcast会平均分配成员之前的分区，并均匀在的成员之间创建备份。</p>\n<p>在Hazelcast 3.6版本中，新增了一种集群成员：“精简成员”（lite members），他的特点是不拥有任何分区。“精简成员”的目标是用于“高密度运算”任务（computationally-heavy task executions。估计是指CPU密集型运算）或者注册监听（listener） 。虽然“精简成员”没有自己的分区，但是他们同样可以访问集群中其他成员的分区。</p>\n<p>总的来说，当集群中的节点发送变动时（进入或退出），都会导致分区在节点中移动并再平衡，以确保数据均匀存储。但若是“精简节点”的进入或退出，并不会出现重新划分分区情况，因为精简节点并不会保存任何分区。</p>\n\n<h3 id="h3-6">数据分区管理</h3>\n<p>创建了分区以后，Hazelcast会将所有的数据存放到每个分区中。它通过哈希运算将数据分布到每个分区中。获取存储数据Key值（例如map）或value值（例如topic、list），然后进行以下处理：</p>\n<ol>\n    <li>将设定的key或value转换成byte[]；</li>\n    <li>对转换后的byte[]进行哈希计算；</li>\n    <li>将哈希计算的结果和分区的数量（271）进行模运算（同余运算、mod运算、%运算）。</li>\n</ol>\n<p>因为byte[]是和271进行同模运算，因此计算结果一定会在0~270之间，根据这个值可以指定到用于存放数据的分区。</p>\n<h3 id="h3-7">分区表</h3>\n<p>当创建分区以后，集群中的所有成员必须知道每个分区被存储到了什么节点。因此集群还需要维护一个分区表来追踪这些信息。</p>\n<p>当启动第一个节点时，一个分区表将随之创建。表中包含分区的ID和标记了他所属的集群节点。分区表的目标就是让集群中所有节点（包括“精简节点”）都能获取到数据存储信息，确保每个节点都知道数据在哪。集群中最老的节点（通常情况下是第一个启动的成员）定期发送分区表给所有的节点。以这种方式，当分区的所有权发生变动时，集群中的所有节点都会被通知到。分区的所有权发生变动有很多种情况，比如，新加入一个节点、或节点离开集群等。如果集群中最早启动的节点被关闭，那么随后启动的节点将会继承发送分区表的任务，继续将分区表发送给所有成员。</p>'},373:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<p>“Spring”——每一个Javaer开发者都绕不开的字眼，从21世纪第一个十年国内异常活跃的SSH框架，到现在以Spring\n    Boot作为入口粘合了各种应用。Spring现在已经完成了从web入口到微服务架构再到数据处理整个生态，看着现在<a href="https://spring.io/projects" rel="nofollow">https://spring.io/projects</a>上长长的项目清单，一脸懵逼的自问到这些到底是啥？可以干嘛？\n</p>\n\n<h2 id="h2-1">一切都从IoC开始</h2>\n<p>\n    早期的Spring并没有这么多亮瞎眼的项目，仅仅是围绕着core、context、beans以及MVC提供了一个简单好用搭建网站级应用的工具。那个时候完全是一个与J2EE的繁杂多样对抗简单便捷的小清新。Srping之父Rod的一本《J2EE\n    Development without\n    EJB》宣告J2EE那么名堂完全没多大用处。经过这么多年的发展，事实也证明除了Servlet、JDBC以及JSP似乎其他东西可有可无。后来Vertx、WebFlux等Reactive机制框架的出现，以及前后端分离开发的盛行，似乎Servlet也可有可无了、jsp也快消失了。所以现在Oracle干脆把J2EE这个烫手山芋直接丢给开源社区了。</p>\n<p>Rod的轮子理论造就了Spring的2大核心概念——IoC（Inversion of Control）和beans。Spring\n    IoC和Beans的概念度娘、谷哥一搜一大把，在此就不重复介绍了。个人认为IoC和Beans最基本的实现思想来自于设计模式的几大原则，它之所以这么好用并且深入人心就是体现了设计模式的精髓。</p>\n<p><strong>依赖倒转原则：</strong>Spring的介绍Framework文档的开篇就提到反向依赖注入（DI——<em>dependency injection</em>&nbsp;），其目标是让调用者不要主动去使用被调用者，而是让被调用者向调用者提供服务。IoC和beans的配合完美实现了这个过程，一个@component注解添加一个bean到Ioc容器，一个@autowired注解Ioc容器会找到对应的类注入进来。\n</p>\n<p><strong>接口隔离原则：</strong>Ioc不仅仅根据class类型注入bean，他还会根据接口类型自动装配注入一个bean。</p>\n<p><strong>里氏代换原则：</strong>在接口隔离的原则的基础上我们可以利用XML配置文件来制定装配的服务。例如javax.sql.DataSource是Java里提供数据库链接服务的接口，世面上有各种各样开源或闭源的工具实现了DataSource接口，例如c3p0和druid。我们想要切换他们仅仅需要像下面这样添加或删除一个bean（当然先要引入Jar包）:\n</p>\n<pre><code class="xml"><span class="code-comment">&lt;!-- c3p0 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"ds"</span> <span class="hljs-attr">class</span>=<span class="code-string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"driverClass"</span> <span class="hljs-attr">value</span>=<span class="code-string">"com.mysql.jdbc.Driver"</span>/&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"jdbcUrl"</span> <span class="hljs-attr">value</span>=<span class="code-string">"jdbc:mysql://localhost:3306/c3p0jdbctemplate"</span>/&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"user"</span> <span class="hljs-attr">value</span>=<span\n             class="code-string">"admin"</span>/&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"password"</span> <span class="hljs-attr">value</span>=<span class="code-string">"123456"</span>/&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n<span class="code-comment">&lt;!-- druid --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="code-string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"url"</span> <span class="hljs-attr">value</span>=<span class="code-string">"jdbc:mysql://localhost:3306/c3p0jdbctemplate"</span> /&gt;</span>\n\t <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"username"</span> <span class="hljs-attr">value</span>=<span class="code-string">"admin"</span>/&gt;</span>\n\t <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"password"</span> <span class="hljs-attr">value</span>=<span class="code-string">"123456"</span>/&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n</code></pre>\n<p><strong>聚合复用原则：</strong>SpringFramework号称非侵入式框架，我们在使用的过程中也很少有继承的情况，基本上所有的特性都是通过注解（Annotation）来实现，需要某一项服务也是将其注入后使用。虽然我们在开发的过程中为了实现一些高级功能会继承重写某些方法后，然后再将我们的新类添加到Ioc中，但是Spring本身并不太鼓励这样去实现。\n</p>\n<p>除了前面4项原则，<strong>迪米特法则</strong>和<strong>开闭原则</strong>并没有太直观的体现。对于迪米特法则来说Ioc机制本身就实现了调用者与被调用者之间不会直接发生依赖关系（new创建）。而开闭原则，Spring框架本身那么多构建类都是按照这个原则开发的——新功能用新的类实现，而非增加原有方法。\n</p>\n\n<h2 id="h2-2">Beans</h2>\n\n<h3 id="h3-1">配置</h3>\n<p>\n    现在我们知道Spring的2大核心是IoC和Beans。IoC字面翻译叫“控制反转”，这个“反转”过程实现的思想其实蛮简单的：就是先有一个容器（container），我们把实现各种功能的bean（一个类的实例）一股脑向容器里面扔，至于最后这些bean被谁用了通过配置和注解来确定。</p>\n<p>\n    上面提到了配置，在2.5版本之前配置只能通过XML文件实现，之后引入了annotation配置的方式，然后3.x版本之后可以完全使用Java代码来实现配置而无需XML文件。配置文件的格式和作用其实也不复杂，就是告诉容器我要扔进去什么bean。扔进去的bean当然需要初始化一些数据了，丢一个光秃秃没有任何数据的实例到容器中貌似也没多大用处，所以XML文件中就提供了一些标签来标记如何初始化数据：</p>\n<pre><code class="xml"><span class="php"><span class="code-meta">&lt;?</span>xml version=<span\n        class="code-string">"1.0"</span> encoding=<span class="code-string">"UTF-8"</span><span\n        class="code-meta">?&gt;</span></span>\n<span class="code-comment">&lt;!-- 省略xmlns --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n            class="code-string">"otherBean"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.OtherBean"</span> /&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n            class="code-string">"myBean"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyClass"</span>&gt;</span>\n        <span class="code-comment">&lt;!-- 通过setOtherBean方法设置OtherBean的实例 --&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n                class="code-string">"otherBean"</span> <span class="hljs-attr">ref</span>=<span class="code-string">"otherBean"</span>/&gt;</span>\n        <span class="code-comment">&lt;!-- 通过setValue方法设置数值 --&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n                class="code-string">"value"</span> <span class="hljs-attr">value</span>=<span class="code-string">"myValue"</span>/&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n\n<h3 id="h3-2">参数</h3>\n<p>下面是Bean相关的参数，它们可以用<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-definition"\n        rel="nofollow">XML&lt;bean&gt;标签</a>来配置，也可以用<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-java-bean-annotation"\n        rel="nofollow">@bean</a>传递一个参数来设定：</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\n    <tbody>\n    <tr>\n        <td>class</td>\n        <td>标记当前Bean加载的类</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-beanname"\n               rel="nofollow">Bean的别名和名称。</a></td>\n    </tr>\n    <tr>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes"\n               rel="nofollow">scope</a></td>\n        <td>Bean的范围，默认是单例。</td>\n    </tr>\n    <tr>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators"\n               rel="nofollow">constructor</a></td>\n        <td>构造函数注入&lt;constructor-arg /&gt;</td>\n    </tr>\n    <tr>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators"\n               rel="nofollow">properties</a></td>\n        <td>属性注入&lt;property&gt;</td>\n    </tr>\n    <tr>\n        <td>autowiring</td>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-autowire"\n               rel="nofollow">auto注入模式</a></td>\n    </tr>\n    <tr>\n        <td>lazy</td>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lazy-init"\n               rel="nofollow">懒加载模式</a></td>\n    </tr>\n    <tr>\n        <td>initialization</td>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-initializingbean"\n               rel="nofollow">制定初始化类时执行的方法</a></td>\n    </tr>\n    <tr>\n        <td>destruction</td>\n        <td>\n            <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-disposablebean"\n               rel="nofollow">制定类销毁时要执行的方法</a></td>\n    </tr>\n    </tbody>\n</table>\n<p>Spring Framework的官网用了一个小节专门介绍bean的命名方式，既可以用id来标识，又可以用name来标识，第一次看还挺晕乎的。</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myBeanId"</span> <span class="hljs-attr">name</span>=<span class="code-string">“myAlias1,myAlias2”</span> /&gt;</span></code></pre>\n<p>其实注意一下四点即可：</p>\n<ol>\n    <li>id和name均可以标识一个bean，但是id必须是全局一对一的，而一个bean可以用多个name，用,号分割。</li>\n    <li>如果不给bean制定id，那么容器会为他自动生成一个唯一的序列号。</li>\n    <li>name可以配合&lt;alias&gt;标签使用来转换别名。</li>\n</ol>\n<p>个人感觉使用spring到现在name出现场景并不多，也很少看到哪个开源项目通过name的方式向外暴露服务。</p>\n\n<h3 id="h3-3">创建模式与Scope</h3>\n<p>\n    Bean只是一个和IoC容器相对应的概念：IoC容器存放并管理bean，bean是IoC机制的最小工作单元。往后的AOP等功能都是建立在Bean的基础上拓展开来的——要使用Spring这些功能首先得是一个Ioc容器中的Bean。Bean实际上就是一个Java类的实例，只不过实例化工作交给了Ioc容器而已。</p>\n<p>Bean的实例化有3种方式——构造方法创建、静态工厂、动态工厂。每一个Bean对应的<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes"\n        rel="nofollow">Scope</a>实际上就2个参数——<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton"\n        rel="nofollow">singleton</a>与<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-prototype"\n        rel="nofollow">prototype</a>（实际上还有其他参数可以使用，这里说只有2个具体原因见后面Scope的说明）。</p>\n\n<h4 id="h4-1">单例构造创建</h4>\n<p>90%的Bean都是直接通过这种方法方法来创建的。这也是我们最常见的配置方式：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myBean"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyClass"</span> /&gt;</span></code></pre>\n<p>当以上面这样的方式配置一个bean时，Ioc容器会直接调用构造方法来创建一个类实例（当然在定义类时必须提供一个公开的构造方法）。由于默认情况下bean的scope参数是<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton"\n        rel="nofollow">singleton</a>，所以创建出来bean在不指定scope的状态下都是一个单例。</p>\n<p>某些时候我们会在类当中再用static 来设定一个嵌入类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> myProject;\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MyClass</span> </span>{\n\t<span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">MyNestClass</span></span>{\n\t\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-title">MyNestClass</span><span\n                class="hljs-params">()</span></span>{}\n\t}\n}</code></pre>\n<p>可以通过“$”符号关联的方式创建这个Bean：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myBean"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyClass$MyNestClass"</span> /&gt;</span></code></pre>\n\n<h4 id="h4-2">静态工厂创建</h4>\n<p>静态工厂创建bean和静态工厂模式的概念一样，就是指定一个工厂类，然后通过一个静态方法返回一个新的bean。</p>\n<p>XML配置：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myFactory"</span>\n    <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyFactory"</span>\n    <span class="hljs-attr">factory-method</span>=<span\n            class="code-string">"createInstance"</span>/&gt;</span></code></pre>\n<p>工厂类：</p>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MyFactory</span> </span>{\n    <span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">MyClass</span></span>{};\n    <span class="code-keyword">private</span> <span class="code-keyword">static</span> MyClass myClass = <span\n            class="code-keyword">new</span> MyClass();\n    <span class="hljs-function"><span class="code-keyword">private</span> <span class="code-title">MyFactory</span><span\n            class="hljs-params">()</span> </span>{}\n\n    <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> MyClass <span\n            class="code-title">createInstance</span><span class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> myClass;\n    }\n}</code></pre>\n\n<h4 id="h4-3">动态工厂创建</h4>\n<p>动态工厂在设计模式上叫“抽象工厂”，spring官网将其自称为实例工厂（instance\n    factory）。这里叫“动态工厂”是想对他们加以区分。虽然“实例工厂”并不是教科书似的抽象工厂，但是目的就是实现工厂动态创建。动态工厂与静态工厂最大的区别就是会先将工厂本身设置成一个bean（实例化），然后再通过这个工厂bean来创建“产品bean”。看下面的例子：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myLocator"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyLocator"</span>&gt;</span>\n    <span class="code-comment">&lt;!-- 自身就是一个实例化的bean，可以设定任何bean的配置 --&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n\n<span class="code-comment">&lt;!-- 绑定bean与一个动态工厂 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"instanceFactory"</span>\n    <span class="hljs-attr">factory-bean</span>=<span class="code-string">"myLocator"</span>\n    <span class="hljs-attr">factory-method</span>=<span\n            class="code-string">"createInstance"</span>/&gt;</span></code></pre>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MyFactory</span> </span>{\n    <span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">MyClass</span></span>{};\n    <span class="hljs-function"><span class="code-keyword">public</span> MyClass <span\n            class="code-title">createInstance</span><span class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> <span class="code-keyword">new</span> MyClass();\n    }\n}</code></pre>\n<p>一个工厂可以同时用于创建多个bean方法：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myLocator"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.MyFactory"</span> /&gt;</span>\n\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"serverOne"</span>\n    <span class="hljs-attr">factory-bean</span>=<span class="code-string">"myLocator"</span>\n    <span class="hljs-attr">factory-method</span>=<span class="code-string">"createClassOne"</span>/&gt;</span>\n\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"serverTwo"</span>\n    <span class="hljs-attr">factory-bean</span>=<span class="code-string">"myLocator"</span>\n    <span class="hljs-attr">factory-method</span>=<span\n            class="code-string">"createClassTwo"</span>/&gt;</span></code></pre>\n<pre><code class="java"><span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">MyFactory</span> </span>{\n    <span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">MyServerOne</span></span>{};\n    <span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">MyServerTwo</span></span>{};\n    \n    <span class="hljs-function"><span class="code-keyword">public</span> MyServerOne <span class="code-title">createClassOne</span><span\n            class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> <span class="code-keyword">new</span> MyServerOne();\n    }\n    <span class="hljs-function"><span class="code-keyword">public</span> MyServerTwo <span class="code-title">createClassTwo</span><span\n            class="hljs-params">()</span> </span>{\n        <span class="code-keyword">return</span> <span class="code-keyword">new</span> MyServerTwo();\n    }\n}</code></pre>\n\n<h4 id="h4-4">为什么需要实例化方法</h4>\n<p>可能你会想，Spring实例化提供一个简单的bean创建实例就好了，干嘛还要整静态工厂、抽象工厂之类的东西？</p>\n<p>\n    实际上我个人认为Spring的架构大神们是想通过一套简单的机制帮你实现设计模式中的所有创建模式——静态工厂、抽象工厂、单例模式、建造者模式和原型模式。因为IoC的最大任务之一就是代替我们创建各种Bean（类实例），而类实例的创建无非就是这几种创建模式。</p>\n<p>这里仅仅介绍了2种工厂模式，下面将结合Bean的Scope属性介绍其他模式的思路。</p>\n\n<h4 id="h4-5">Scope</h4>\n<p>scope直译过来叫范围、界限、广度。不过按照字面意思理解Bean的Scopd属性肯定要跑偏的。Scope数据涉及2个层面的含义。</p>\n<p>首先在实现层面，对于设计模式来说，Scope就只有2种模式——<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton"\n        rel="nofollow">singleton</a>模式和<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-prototype"\n        rel="nofollow">prototype</a>模式。</p>\n<p>其次在应用层面，除了上面2个，Scope还提供了<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-request"\n        rel="nofollow">request</a>、<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-session"\n        rel="nofollow">session</a>、<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-application"\n        rel="nofollow">application</a>、<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#websocket-stomp-websocket-scope"\n        rel="nofollow">websocket</a>。从字面上看就知道实际上这些Scope参数仅仅是指定了一个bean的适用范围。</p>\n<p>\n    以<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-request"\n        rel="nofollow">request</a>为例，要启用他需要保证应用的“上下文”是web模式，例如XmlWebApplicationContext，其他情况下会抛出异常。然后"scope=request"的工作方式就是外部发起一个请求后，web层（servlet）启用一个线程来响应这个请求。到了业务层面我们需要指定一些bean来处理这个请求，当这些bean设定为request时，那么它仅仅用于这一次请求就抛弃。下一次请求出现时会创建一个新的实例。\n</p>\n<p>所以不管是<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-request"\n        rel="nofollow">request</a>、<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-session"\n        rel="nofollow">session</a>、<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-application"\n        rel="nofollow">application</a>还是<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#websocket-stomp-websocket-scope"\n        rel="nofollow">websocket</a>，实际上都是通过<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-prototype"\n        rel="nofollow">prototype</a>模式创建的实例，也就是设计模式中的原型模式，虽然并不一定是教科书般的标准，但是在整个容器中他实现了原型的特性。</p>\n<p>\n    此外<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton"\n        rel="nofollow">singleton</a>模式和&nbsp;Gang of Four\n    (GoF)中定义的通过ClassLoad实现的单例模式也有很大的区别，但是对于Ioc容器而言，任何bean在一个容器中绝对是一个单例，现在所有的资源都通过容器来管理依赖关系，那么最终的效果也是一个单例。</p>\n\n<h4 id="h4-6">建造者模式</h4>\n<p>到目前为止，还有一个创建模式未出场——建造者模式。建造者模式实际上就是通过一个标准的方法组装一个复杂的对象。</p>\n<p>\n    标准的建造者模式先得有一个Director提供外部访问接口，外部调用者要创建一个复杂对象时向接口传递指定参数，然后Director根据参数调用Builder提供的各种方法，这些方法再用concrete去构建最终的Product。</p>\n<p>实际上把复杂对象创建的过程看成各个bean依赖构造的过程即可实现模式，例如：</p>\n<pre><code class="xml"><span class="code-comment">&lt;!-- cpu部件 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"amdCpu"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.cpu.Amd"</span>/&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"intelCpu"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.cpu.Intel"</span>/&gt;</span>\n<span class="code-comment">&lt;!-- 显卡部件 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"amdGraphics"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.graphics.Amd"</span>/&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"nvdiaGraphics"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.graphics.Nvdia"</span>/&gt;</span>\n\n<span class="code-comment">&lt;!-- 组装电脑1 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"myComputer"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.computer.MyComputer"</span>&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"cpu"</span> <span class="hljs-attr">ref</span>=<span\n             class="code-string">"amdCpu"</span>/&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"graphics"</span> <span class="hljs-attr">ref</span>=<span class="code-string">"nvdiaGraphics"</span>/&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n\n<span class="code-comment">&lt;!-- 组装电脑2 --&gt;</span>\n<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"yourComputer"</span> <span class="hljs-attr">class</span>=<span class="code-string">"myProject.computer.YourComputer"</span>&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"cpu"</span> <span class="hljs-attr">ref</span>=<span\n             class="code-string">"intelCpu"</span>/&gt;</span>\n     <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n             class="code-string">"graphics"</span> <span class="hljs-attr">ref</span>=<span class="code-string">"amdGraphics"</span>/&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>'}});