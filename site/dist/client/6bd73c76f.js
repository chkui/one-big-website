webpackJsonp([6],{348:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<p>\n    React提供了一系列声明性的API接口，因此在使用时不必担心每次库的更新会修改API接口。这样可以降低编写应用的复杂度，但是带来的问题是无法很好的理解React是如何实现这些功能的。这篇文章会介绍React的差异比对算法——“融合算法”是如何执行的。</p>\n\n<h2 id="h2-1">差异匹配算法实现的前提</h2>\n<p>我们先来看看第一个值得关注的我问题：&nbsp;<code>render()</code>&nbsp;方法的作用是创建React元素的树形结构，当state或props发生更新后，&nbsp;<code>render()</code>&nbsp;会返回一个与之前有差异的结构树。在这个机制下，React需要弄清楚如何匹配最近的树并有效的更新UI。\n</p>\n<p>针对以上问题，有一些通用的算法可供参考，比如比对2颗树的差异，在前一个颗树的基础上生成最小操作树，但是这个算法的时间复杂度为n的三次方=O(n*n*n)，当树的节点较多时，这个算法的时间代价会导致算法几乎无法工作。</p>\n<p>\n    假设在我们使用React时，一共使用了1000个Dom标签元素，那么使用上面的算法，我们要比对数亿次才能得到比对的结果，根本不可能在一个浏览器中短时间完成。React实现了一个计算复杂度是O(n)的算法来解决这个问题，这个算法基于2个假设：</p>\n<ol>\n    <li>不同类型的2个标签元素产生不同的树。</li>\n    <li>开发人员可以为不同的子节点在渲染之前设定一个“key”属性值。</li>\n</ol>\n\n<h2 id="h2-2">差异算法</h2>\n<p>对于2颗有差异的树，React首先比对2颗树的根节点。根据跟节点的类型是否相同，算法接下来会执行不同的操作。</p>\n\n<h2 id="h2-3">Types不一样</h2>\n<p>\n    一旦2棵树之间的根元素类型不一样，React会直接移除旧的树并构建出新的树。例如从&nbsp;<code>&lt;a&gt;</code>&nbsp;变更为&nbsp;<code>&lt;img&gt;</code>、&nbsp;<code>&lt;Article&gt;</code>&nbsp;变更为&nbsp;<code>&lt;Comment&gt;</code>、&nbsp;<code>&lt;Button&gt;</code>&nbsp;变更为&nbsp;<code>&lt;div&gt;</code>&nbsp;，所有的这些变化都会导致整颗树重构。\n</p>\n<p>重构一棵新的树时，所有的旧节点都会移除。组件的<code>componentWillUnmount()</code>方法会被调用。&nbsp;然后到构建完成之后新的Dom会替换原来的Dom。此时组件的<code>componentWillMount()</code>和<code>componentDidMount()</code>会依次被调用。旧树Dom上的所有状态都会丢失。\n</p>\n<p>根据这个特性，根节点之后的所有组件都会卸载并重建，状态也会随之改变。例如下面2个组件对比：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">div</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">Counter</span></span></span><span class="code-tag"> /&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">div</span></span></span><span class="code-tag">&gt;</span></span>\n\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">span</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">Counter</span></span></span><span class="code-tag"> /&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">span</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p><code>Counter</code>&nbsp;组件会被销毁并重新安装一个新的组件。</p>\n\n<h2 id="h2-4">Dom元素拥有相同的类型</h2>\n<p>当比较React元素为相同类型时，React会查看元素上的属性来比对。比对之后，React会保持的Dom节点不改变然后仅仅更新不同的属性值，例如：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">div</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">className</span></span></span><span\n        class="code-tag">=</span><span class="code-string"><span class="code-tag"><span\n        class="code-string">"before"</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n        class="code-tag"><span class="hljs-attr">title</span></span></span><span class="code-tag">=</span><span\n        class="code-string"><span class="code-tag"><span class="code-string">"stuff"</span></span></span><span\n        class="code-tag"> /&gt;</span></span>\n\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">div</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n        class="code-tag"><span class="hljs-attr">className</span></span></span><span class="code-tag">=</span><span\n        class="code-string"><span class="code-tag"><span class="code-string">"after"</span></span></span><span\n        class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span\n        class="hljs-attr">title</span></span></span><span class="code-tag">=</span><span class="code-string"><span\n        class="code-tag"><span class="code-string">"stuff"</span></span></span><span\n        class="code-tag"> /&gt;</span></span></code></pre>\n<p>在比对这2个元素之后，React知道仅仅需要修改当前Dom的<code>className</code>。在更新<code>style</code>时，React同样知道仅仅需要更新修改部分即可。例如：</p>\n<pre class="groovy"><code class="language-html xml"><span class="code-tag">&lt;<span class="code-name">div</span> <span\n        class="hljs-attr">style</span>=<span class="code-string">{{<span class="code-string">color:</span></span> <span\n        class="code-string">\'</span><span class="hljs-attr"><span class="code-string">red</span></span><span\n        class="code-string">\'</span>, <span class="hljs-attr"><span class="code-string">fontWeight:</span></span> <span\n        class="code-string">\'</span><span class="hljs-attr"><span class="code-string">bold</span></span><span\n        class="code-string">\'</span>}} /&gt;</span>\n\n<span class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr">style</span>=<span\n        class="code-string">{{<span class="code-string">color:</span></span> <span class="code-string">\'</span><span\n        class="hljs-attr"><span class="code-string">green</span></span><span class="code-string">\'</span>, <span\n        class="hljs-attr"><span class="code-string">fontWeight:</span></span> <span class="code-string">\'</span><span\n        class="hljs-attr"><span class="code-string">bold</span></span><span class="code-string">\'</span>}} /&gt;</span></code></pre>\n<p>在转换这2个组件时，React知道仅仅需要修改color的样式，而fontWeight不必发生变动。</p>\n<p>在处理完当前Dom节点后，React依次对子节点进行递归。</p>\n\n<h2 id="h2-5">组件元素拥有相同的类型</h2>\n<p>当一个组件发生更新后，实例依然是原来的实例，所以状态还是以前的状态。React通过属性值（props）的更新来影响需要更新组件，此时组件实例的&nbsp;<code>componentWillReceiveProps()</code>&nbsp;和&nbsp;<code>componentWillUpdate()</code>&nbsp;方法会被调用。\n</p>\n<p>然后，&nbsp;<code>render()</code>&nbsp;方法会被调用并返回一个Dom，差异算法会递归比对之前返回Dom的差异。</p>\n\n<h2 id="h2-6">递归子元素</h2>\n<p>默认情况下，在递归子元素的Dom节点时，React同时对2个子元素列表进行迭代比对，如果发现差异都会产生一个突变（<a title="React性能优化"\n                                                               href="https://www.chkui.com/article/react/react_optimizing_performance"\n                                                               rel="nofollow">关于突变的概念请见React学习第六篇性能优化介绍不可变数据结构部分</a>）。\n</p>\n<p>例如，当增加一个元素在子元素的队尾，这2颗树的转换效率很高：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>first<span class="code-tag"><span\n            class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>second<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>first<span class="code-tag"><span\n            class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>second<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>third<span class="code-tag"><span\n            class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>React先匹配&nbsp;<code>&lt;li&gt;first&lt;/li&gt;</code>&nbsp;2棵树，然后再匹配&nbsp;<code>&lt;li&gt;second&lt;/li&gt;</code>&nbsp;。最后直接就添加&nbsp;<code>&lt;li&gt;third&lt;/li&gt;</code>&nbsp;节点。\n</p>\n<p>如果代码按下面的方式修改2颗树，执行的效率相对较差：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>Duke<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>Villanova<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>Connecticut<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>Duke<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>Villanova<span\n            class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n            class="code-name">li</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>\n    React会突变修改所有的子节点，最终&nbsp;<code>&lt;li&gt;Duke&lt;/li&gt;</code>&nbsp;and&nbsp;<code>&lt;li&gt;Villanova&lt;/li&gt;</code>&nbsp;会被重新渲染。所以这种方式会带来很大的效率问题。\n</p>\n\n<h2 id="h2-7">Keys</h2>\n<p>为了解决上面的问题，React提供了一个“key”属性。当所有的子元素都有一个key值，React直接使用key值来比对树形结构中的所有子节点列表。例如为上面的的例子增加一个key会大大的提升转换效率：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-tag"><span class="code-tag">&lt;</span><span\n        class="code-name"><span class="code-tag"><span class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n          class="code-tag"><span class="hljs-attr">key</span></span></span><span class="code-tag">=</span><span\n          class="code-string"><span class="code-tag"><span class="code-string">"2015"</span></span></span><span\n          class="code-tag">&gt;</span></span>Duke<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">li</span></span></span><span\n            class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n          class="code-tag"><span class="hljs-attr">key</span></span></span><span class="code-tag">=</span><span\n          class="code-string"><span class="code-tag"><span class="code-string">"2016"</span></span></span><span\n          class="code-tag">&gt;</span></span>Villanova<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">li</span></span></span><span\n            class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n          class="code-tag"><span class="hljs-attr">key</span></span></span><span class="code-tag">=</span><span\n          class="code-string"><span class="code-tag"><span class="code-string">"2014"</span></span></span><span\n          class="code-tag">&gt;</span></span>Connecticut<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">li</span></span></span><span\n            class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n          class="code-tag"><span class="hljs-attr">key</span></span></span><span class="code-tag">=</span><span\n          class="code-string"><span class="code-tag"><span class="code-string">"2015"</span></span></span><span\n          class="code-tag">&gt;</span></span>Duke<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">li</span></span></span><span\n            class="code-tag">&gt;</span></span>\n  <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span\n          class="code-name">li</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span\n          class="code-tag"><span class="hljs-attr">key</span></span></span><span class="code-tag">=</span><span\n          class="code-string"><span class="code-tag"><span class="code-string">"2016"</span></span></span><span\n          class="code-tag">&gt;</span></span>Villanova<span class="code-tag"><span class="code-tag">&lt;/</span><span\n            class="code-name"><span class="code-tag"><span class="code-name">li</span></span></span><span\n            class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span\n        class="code-name">ul</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>现在React可以知道key=\'2014\'的节点是一个新值另外2个节点仅仅需要移动一下位置。</p>\n<p>在实际使用中，key值并不难找。在常规业务中，很多列表都自然包含业务相关的ID了：</p>\n<pre class="dust"><code class="language-html xml"><span class="code-tag"><span class="xml"><span\n        class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span\n        class="code-name">li</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n        class="hljs-attr"><span class="xml"><span class="code-tag"><span\n        class="hljs-attr">key</span></span></span></span><span class="xml"><span class="code-tag">=</span></span><span\n        class="code-string"><span class="code-template-variable">{item.id}</span></span><span class="xml"><span\n        class="code-tag">&gt;</span></span></span><span class="code-template-variable">{item.name}</span><span\n        class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n        class="xml"><span class="code-tag"><span class="code-name">li</span></span></span></span><span class="xml"><span\n        class="code-tag">&gt;</span></span></span></code></pre>\n<p>当无法使用业务ID时，也可以额外增加一个ID值来标记列表差异，比如根据要使用的数据生成一个hash值，React不需要key值全局唯一，只需要在兄弟节点之间保持唯一即可。</p>\n<p>最差情况下，你可以使用索引数据（0、1、2、....n）。使用索引需要注意的是，如果列表发生重新排序效率会很糟糕。</p>\n\n<h2 id="h2-8">一些常见的问题</h2>\n<p>在使用React时需要谨记每次调用 <strong><em>render()</em></strong>\n    方法，它总会尝试比对调用前后2棵树是否一致。在某些极端情况下，虽然最终呈现效果并没有发生多大的变化，但是有可能每一个简单的操作都导致React全局重新渲染(例如列表没有Key)。</p>\n<p>\n    React在当前版本的实现中还存在一个问题，可以快捷的告知React子树中某个节点的位置已经发生改变，但是无法告知React他移动到了什么位置。因此在遇到这种情况时，算法会重构整个子树。这个问题告诉我们，如果遇到弹窗之类需要偶尔出现的组件，最好是通过隐藏属性控制他，而非直接移除Dom。</p>\n<p>React依赖启发式算法，如果本文开篇提到的2个基本假设不成立，那么会导致算法效率极差。</p>\n<ol>\n    <li>算法不会尝试匹配不同2个组件之间的子树。如果编码中发现2个组件之间有非常相似的输出，应该尝试将2个组件合并为一个类型的组件。在实际应用中，我们还没发现这样导致问题。</li>\n    <li>用作列表的key值最好是稳定、可预见、唯一的。易变的key值（比如由<code>Math.random()</code>方法生成的值）将会导致许多组件实例和Dom节点被非必要的重新创建，这会导致性能低下且子组件丢失已有的状态。&nbsp;\n    </li>\n</ol>'},352:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<p>在16.x版本之后React提供了Protals功能来解决模式对话框不在Dom根节点导致的一些BUG。除了Protal还有更多的方法去解决这些问题，本文来自David\n    Gilbertson的博客，详细解释了React中模式对话框的一些问题，以及他给出的解决方案，在了解Protals之前阅读这篇内容，能让你更加明白Protal的重要性。</p>\n<p>对于React的模式对话框，有很多方法可以实现但是并没有一个绝对正确的方法。这句话怎么理解呢？让我们先看看一个模式对话框的特性：</p>\n<ol>\n    <li>能够浮现在最上层，阻止用户的其他操作。</li>\n    <li>能够处理鼠标和键盘事件，例如关闭窗口事件。</li>\n    <li>接受外部传入一个回调函数，当用户进行某些操作的时候调用他，例如点击“确定”或“取消”按钮。</li>\n    <li>接受外部参数，可以设定大小、文字、处理器等等。</li>\n</ol>\n\n<h2 id="h2-1">模式对话框的实现思路</h2>\n<p>下面的这些图片是常见模式对话框的例子：</p>\n<p><img alt="React中的模式对话框" src="https://file.mahoooo.com/res/file/modals_in_react_2018_5_15_2.png"></p>\n<p><img alt="React中的模式对话框" src="https://file.mahoooo.com/res/file/modals_in_react_2018_5_15_3.png"></p>\n<p><img alt="React中的模式对话框" src="https://file.mahoooo.com/res/file/modals_in_react_2018_5_15_4.png"></p>\n<p>这些模式对话框都有一个全局的背景遮罩层、有头部或描述内容、有一些功能按钮、可以随意设定的宽度和高度、位置居中。</p>\n<p>在React中有三种方式实现模式对话框：</p>\n<ol>\n    <li>使用一个常规的组件作为一个模式对话框的包装组件，然后将我们自定义的内容作为子组件传递给模式对话框。例如这个项目：<a href="https://github.com/reactjs/react-modal"\n                                                                   rel="nofollow">https://github.com/reactjs/react-modal</a>。\n    </li>\n    <li>将模式对话框放置到HTML结构的顶层，将其设置为 <em>document.body </em>的子元素。例如：<a href="https://github.com/tajo/react-portal"\n                                                                   rel="nofollow">https://github.com/tajo/react-portal</a>\n    </li>\n    <li>将模式对话框作为整个组件结构中的顶层组件（根元素的子组件），通过全局的数据来控制他显示或隐藏。</li>\n</ol>\n<p>那这三种实现方式有什么问题呢：</p>\n<p>第一种方式有定位问题。如果你用这种方式实现模式对话框，你的HTML上下文会影响当前模式对话框的展示效果，所以这种方式很有可能会出现一些意向不到的问题。你真的认为&nbsp;<strong>position:\n    fixed</strong>&nbsp;可以让某个元素相对与浏览器窗口绝对定位吗？请看这个例子：&nbsp;<a href="https://output.jsbin.com/fepime/" rel="nofollow">https://output.jsbin.com/fepime/</a>，使用开发人员工具看看\n    <em>.top-div</em> 和 <em>.fixed-div</em> 的样式你就懂了。</p>\n<p>\n    第二种方式首先对于单元测试不友好，因为我们不得不把对话框作为body的子元素（或者其他某个真实DOM的子元素）来显示，那么得有浏览器的真实DOM才能看到效果。而且这种方式看起来挺“骇客”的，我们按照单向数据流的思路开发了整套个标准合理的React组件，最后不得不用&nbsp;<strong>ReactDOM.unstable_renderSubtreeIntoContainer() </strong>方法装载一个组件到body元素中，最终可能会导致虚拟DOM与真实DOM不一致或者服务端渲染遇到问题。‘unstable’前缀的含义是React官方明确告诉你：这玩意有坑，踩上了别怪我。详情请看React官方对<strong>unstable_renderSubtreeIntoContainer</strong>的说明。\n</p>\n<p>第三种方式在笔者看来是最合理最优秀的，下面就谈谈这种实现方式的思路。</p>\n\n<h2 id="h2-2">全局数据流控制模式对话框</h2>\n<p>实际上就是用flux或redux的方式去控制对话框显示或关闭。如果之前用过flux之类思路的工具，后面的内容分分钟就理解了。</p>\n<p>先看下模式对话框的组件结构：</p>\n<p><img alt="React中的模式对话框" src="https://file.mahoooo.com/res/file/modals_in_react_2018_5_15_1.png"></p>\n<p></p>\n<ul>\n    <li><strong>App.jsx</strong>——整个工程的根组件，通常不会在这里有什么特殊的处理。它首先会渲染其他所有的顶层组件，然后再最后渲染模式对话框组件。</li>\n    <li><strong>ModalConductor.jsx</strong>——模式框的管理组件，由他来控制当前应该渲染哪个模式框。</li>\n    <li><strong>SignIn.jsx、EditScreen.jsx等组件</strong>——具体样式的模式对话框。</li>\n</ul>\n<p>在这些组件之外，还有store来存储全局模式对话框的相关数据。<strong>store.currentModal </strong>用于指示显示哪个模式框的字符串，如果为 null\n    则表示没有任何模式框要显示，所以整个工程一次只显示一个模式框。</p>\n<p>下面我们看看组件实现过程。</p>\n<p>首先我们在任何位置都可以修改 <strong>store</strong> 。当我们通过某种方式将&nbsp;<strong>store.currentModal </strong>的值修改为<strong>&nbsp;signIn\n    后，ModalConductor </strong>会触发重新渲染并在内部判断要渲染<strong>&nbsp;SignIn </strong>组件。</p>\n<p>这是 <strong>ModalConductor</strong>&nbsp;的示意代码，通过switch语句判断要显示的组件：</p>\n<pre class="typescript"><code class="language-javascript"><span class="code-keyword"><span\n        class="code-keyword">import</span></span> React <span class="code-keyword">from</span> <span\n        class="code-string"><span class="code-string">\'react\'</span></span>;\n\n<span class="code-keyword"><span class="code-keyword">import</span></span> ExportDataModal <span class="code-keyword">from</span> <span\n            class="code-string"><span class="code-string">\'./ExportDataModal.jsx\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">import</span></span> SignInModal <span\n            class="code-keyword">from</span> <span class="code-string"><span\n            class="code-string">\'./SignInModal.jsx\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">import</span></span> FeedbackModal <span\n            class="code-keyword">from</span> <span class="code-string"><span\n            class="code-string">\'./FeedbackModal.jsx\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">import</span></span> BoxDetailsModal <span class="code-keyword">from</span> <span\n            class="code-string"><span class="code-string">\'./BoxDetailsModal.jsx\'</span></span>;\n\n<span class="code-keyword"><span class="code-keyword">const</span></span> ModalConductor = props =&gt; {\n  <span class="code-keyword"><span class="code-keyword">switch</span></span> (props.currentModal) {\n    <span class="code-keyword"><span class="code-keyword">case</span></span> <span class="code-string"><span\n            class="code-string">\'EXPORT_DATA\'</span></span>:\n      <span class="code-keyword"><span class="code-keyword">return</span></span> &lt;ExportDataModal {...props}/&gt;;\n\n    <span class="code-keyword">case</span> <span class="code-string">\'SOCIAL_SIGN_IN\'</span>:\n      <span class="code-keyword">return</span> &lt;SignInModal {...props}/&gt;;\n\n    <span class="code-keyword">case</span> <span class="code-string">\'FEEDBACK\'</span>:\n      <span class="code-keyword">return</span> &lt;FeedbackModal {...props}/&gt;;\n\n    <span class="code-keyword">case</span> <span class="code-string">\'EDIT_BOX\'</span>:\n      <span class="code-keyword">return</span> &lt;BoxDetailsModal {...props}/&gt;;\n\n    <span class="code-keyword">default</span>:\n      <span class="code-keyword">return</span> <span class="hljs-literal">null</span>;\n  }\n};\n\n<span class="code-keyword">export</span> <span class="code-keyword">default</span> ModalConductor;</code></pre>\n<p>下面模式对话框组件的代码结构：</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-keyword"><span\n        class="code-keyword">import</span></span> React <span class="code-keyword"><span\n        class="code-keyword">from</span></span> <span class="code-string"><span\n        class="code-string">\'react\'</span></span>;\n\n<span class="code-keyword"><span class="code-keyword">import</span></span> ModalWrapper <span class="code-keyword"><span\n            class="code-keyword">from</span></span> <span class="code-string"><span class="code-string">\'../ModalWrapper.jsx\'</span></span>;\n\n<span class="code-keyword"><span class="code-keyword">const</span></span> SignIn = props =&gt; {\n  <span class="code-keyword"><span class="code-keyword">const</span></span> signIn = provider =&gt; {\n    props.hideModal();\n    props.signIn(provider);\n  };\n\n  <span class="code-keyword"><span class="code-keyword">return</span></span> (\n    <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">ModalWrapper</span></span></span></span><span class="xml"><span class="code-tag">\n      {</span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">...props</span></span></span></span><span class="xml"><span class="code-tag">}\n      </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">title</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">"Sign in"</span></span></span></span><span class="xml"><span class="code-tag">\n      </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">width</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{400}</span></span></span></span><span class="xml"><span class="code-tag">\n      </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">showOk</span></span></span></span><span class="xml"><span class="code-tag">=</span></span><span\n            class="code-string"><span class="xml"><span class="code-tag"><span class="code-string">{false}</span></span></span></span><span\n            class="xml"><span class="code-tag">\n    &gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">p</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">Choose your flavor</span><span class="code-tag"><span\n            class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span\n            class="code-tag"><span class="code-name">p</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{()</span></span></span></span><span class="xml"><span\n            class="code-tag"> =&gt;</span></span></span><span class="xml"> signIn(\'facebook\')}&gt;Facebook</span><span\n            class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">button</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{()</span></span></span></span><span class="xml"><span\n            class="code-tag"> =&gt;</span></span></span><span class="xml"> signIn(\'google\')}&gt;Google</span><span\n            class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">button</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{()</span></span></span></span><span class="xml"><span\n            class="code-tag"> =&gt;</span></span></span><span class="xml"> signIn(\'twitter\')}&gt;Twitter</span><span\n            class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">button</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">ModalWrapper</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span></span>\n  );\n};\n\n<span class="code-keyword"><span class="code-keyword">export</span></span> <span class="code-keyword"><span\n            class="code-keyword">default</span></span> SignIn;</code></pre>\n<p>他内部使用了一个名为&nbsp;<strong>ModalWrapper </strong>的包装组件，用来显示模式对话框的效果，可以直接使用<a\n        href="https://github.com/reactjs/react-modal" rel="nofollow">https://github.com/reactjs/react-modal</a>或者自己实现，如下是一个模式框的包装组件：\n</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-keyword"><span\n        class="code-keyword">import</span></span> React <span class="code-keyword"><span\n        class="code-keyword">from</span></span> <span class="code-string"><span\n        class="code-string">\'react\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">const</span></span> {PropTypes} = React;\n\n<span class="code-keyword"><span class="code-keyword">const</span></span> ModalWrapper = props =&gt; {\n  <span class="code-keyword"><span class="code-keyword">const</span></span> handleBackgroundClick = e =&gt; {\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (e.target === e.currentTarget) props.hideModal();\n  };\n\n  <span class="code-keyword"><span class="code-keyword">const</span></span> onOk = () =&gt; {\n    props.onOk();\n    props.hideModal();\n  };\n\n  <span class="code-keyword"><span class="code-keyword">const</span></span> okButton = props.showOk\n    ? (\n      <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n              class="code-name"><span class="xml"><span class="code-tag"><span\n              class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag">\n        </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n              class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n              class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n              class="code-string">{onOk}</span></span></span></span><span class="xml"><span class="code-tag">\n        </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span\n              class="hljs-attr">disabled</span></span></span></span><span class="xml"><span\n              class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n              class="code-string">{props.okDisabled}</span></span></span></span><span class="xml"><span\n              class="code-tag">\n      &gt;</span></span></span><span class="xml">\n        {props.okText}\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n              class="xml"><span class="code-tag"><span class="code-name">button</span></span></span></span><span\n              class="xml"><span class="code-tag">&gt;</span></span></span></span>\n    ) : <span class="hljs-literal"><span class="hljs-literal">null</span></span>;\n\n  <span class="code-keyword"><span class="code-keyword">return</span></span> (\n    <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span\n            class="code-tag"><span class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{handleBackgroundClick}</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">header</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n        </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">h1</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">{props.title}</span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">h1</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">\n\n        </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span\n            class="hljs-attr"><span class="xml"><span class="code-tag"><span\n            class="hljs-attr">onClick</span></span></span></span><span class="xml"><span\n            class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span\n            class="code-string">{props.hideModal}</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span\n            class="xml">Close</span><span class="code-tag"><span class="xml"><span\n            class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span\n            class="code-name">button</span></span></span></span><span class="xml"><span\n            class="code-tag">&gt;</span></span></span><span class="xml">\n      </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span\n            class="xml"><span class="code-tag"><span class="code-name">header</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n\n      {props.children}\n\n      {okButton}\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span\n            class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span\n            class="xml"><span class="code-tag">&gt;</span></span></span></span>\n  );\n};\n\nModalWrapper.defaultProps = {\n  title: <span class="code-string"><span class="code-string">\'\'</span></span>,\n  showOk: <span class="hljs-literal"><span class="hljs-literal">true</span></span>,\n  okText: <span class="code-string"><span class="code-string">\'OK\'</span></span>,\n  okDisabled: <span class="hljs-literal"><span class="hljs-literal">false</span></span>,\n  width: <span class="hljs-number"><span class="hljs-number">400</span></span>,\n  onOk: () =&gt; {}\n};\n\n<span class="code-keyword"><span class="code-keyword">export</span></span> <span class="code-keyword"><span\n            class="code-keyword">default</span></span> ModalWrapper;</code></pre>'},365:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h3 id="h3-1">使用PropTypes进行类型检查</h3>\n<p>当应用不断增长时，可以用过类型检查发现很多bug。对于某些应用，可以使用JavaScript扩展工具来完成，比如使用&nbsp;\n    <a title="flow类型检查工具" href="https://chkui.com/article/react/react_static_type_check_with_flow">Flow </a>或\n    <a title="Typescript官网" href="https://www.typescriptlang.org/" rel="nofollow">TypeScript </a>来检查整个工程。除了引入外部工具之外，React也提供了参数类型检查的功能，只需要为每一个属性指定一个&nbsp;<code>propTypes</code>&nbsp;即可：\n</p>\n<pre class="scala"><code class="language-javascript"><span class="code-comment"><span class="code-comment">// 15.5之后，需要单独引入依赖才能使用类型检查</span></span>\n<span class="code-keyword"><span class="code-keyword">import</span></span> <span\n            class="code-type">PropTypes</span> <span class="code-keyword">from</span> <span class="code-string"><span\n            class="hljs-symbol">\'prop</span>-types\'</span>;\n<span class="code-comment"><span class="code-comment">//定义组件</span></span>\n<span class="hljs-class"><span class="code-keyword"><span class="hljs-class"><span\n        class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Greeting</span></span></span><span class="hljs-class"> </span><span\n        class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n  render() {\n    <span class="code-keyword"><span class="code-keyword">return</span></span> (\n      <span class="xml"><span class="code-tag">&lt;<span class="code-name">h1</span>&gt;</span><span class="code-type">Hello</span>, {<span\n              class="code-keyword">this</span>.props.name}<span class="code-tag">&lt;/<span class="code-name">h1</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class="code-comment"><span class="code-comment">//指定类型检查</span></span>\n<span class="code-type">Greeting</span>.propTypes = {\n  name: <span class="code-type">React</span>.<span class="code-type">PropTypes</span>.string\n};</code></pre>\n<p> PropTypes将会设定一系列验证器，这些验证器用于确保组件接受到的参数（props）是指定的类型。比如上面的例子，当一个错误的类型被组件接收到，会有一段警告内容使通过console输出。<span\n        style="color:#FF0000">propsTypes仅仅在开发模式下使用</span>。</p>\n\n<h3 id="h3-2">PropTypes</h3>\n<p>以下是各种验证器的示例：</p>\n<pre class="javascript"><code class="language-javascript">MyComponent.propTypes = {\n  <span class="code-comment"><span class="code-comment">// 指明每个传入参数的具体类型，传递的参数仅限于这些JavaScript的内置类型</span></span>\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  <span class="code-comment"><span class="code-comment">// number、string、element或者一个列表都是允许的</span></span>\n  optionalNode: PropTypes.node,\n\n  <span class="code-comment"><span class="code-comment">// 接收一个React组件</span></span>\n  optionalElement: PropTypes.element,\n\n  <span class="code-comment"><span class="code-comment">// 声明这个参数只接收某个对象(class)的实例，适用于传递一个对象作为配置参数的</span></span>\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  <span class="code-comment"><span class="code-comment">// 指定参数限定在多个对象之内</span></span>\n  optionalEnum: PropTypes.oneOf([<span class="code-string"><span class="code-string">\'News\'</span></span>, <span\n            class="code-string"><span class="code-string">\'Photos\'</span></span>]),\n\n  <span class="code-comment"><span class="code-comment">// 指定参数允许多个类型</span></span>\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  <span class="code-comment"><span class="code-comment">// 指定类型的列表</span></span>\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  <span class="code-comment"><span class="code-comment">// 指定传递某个类型，是一个对象不是数据本身</span></span>\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  <span class="code-comment"><span class="code-comment">// 指定传递参数的结构，适用于传递一个对象时限定对象的结构</span></span>\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  <span class="code-comment"><span class="code-comment">// 表明这个参数是必须要传递的参数，在使用这个组件时，这个参数必须传入数据</span></span>\n  requiredFunc: PropTypes.func.isRequired,\n\n  <span class="code-comment"><span class="code-comment">// 允许任何类型的数据。</span></span>\n  requiredAny: PropTypes.any.isRequired,\n\n  <span class="code-comment"><span class="code-comment">// 指定一个自定义的检查器，当检查失败时需要返回一个Error对象来指明错误。</span></span>\n  <span class="code-comment"><span class="code-comment">// 错误只需要返回，切记不能使用throw或console.warn输出</span></span>\n  <span class="code-comment"><span class="code-comment">// 不适用于 oneOfType 类型。</span></span>\n  customProp: <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n            class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span\n            class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">props, propName, componentName</span></span></span><span class="hljs-function">) </span></span>{\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (!<span class="hljs-regexp"><span\n            class="hljs-regexp">/matchme/</span></span>.test(props[propName])) {\n      <span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword"><span\n            class="code-keyword">new</span></span> <span class="code-built_in"><span class="code-built_in">Error</span></span>(\n        <span class="code-string"><span class="code-string">\'Invalid prop `\'</span></span> + propName + <span\n            class="code-string"><span class="code-string">\'` supplied to\'</span></span> +\n        <span class="code-string"><span class="code-string">\' `\'</span></span> + componentName + <span\n            class="code-string"><span class="code-string">\'`. Validation failed.\'</span></span>\n      );\n    }\n  },\n\n  <span class="code-comment"><span class="code-comment">// 用于检测一个数组传递的自定义检查器，适用于arrayOf和objectOf类型。</span></span>\n  <span class="code-comment"><span class="code-comment">// 当出现检查错误时需要返回Error</span></span>\n  customArrayProp: PropTypes.arrayOf(<span class="hljs-function"><span class="code-keyword"><span\n            class="hljs-function"><span class="code-keyword">function</span></span></span><span\n            class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span\n            class="hljs-params">propValue, key, componentName, location, propFullName</span></span></span><span\n            class="hljs-function">) </span></span>{\n    <span class="code-keyword"><span class="code-keyword">if</span></span> (!<span class="hljs-regexp"><span\n            class="hljs-regexp">/matchme/</span></span>.test(propValue[key])) {\n      <span class="code-keyword"><span class="code-keyword">return</span></span> <span class="code-keyword"><span\n            class="code-keyword">new</span></span> <span class="code-built_in"><span class="code-built_in">Error</span></span>(\n        <span class="code-string"><span class="code-string">\'Invalid prop `\'</span></span> + propFullName + <span\n            class="code-string"><span class="code-string">\'` supplied to\'</span></span> +\n        <span class="code-string"><span class="code-string">\' `\'</span></span> + componentName + <span\n            class="code-string"><span class="code-string">\'`. Validation failed.\'</span></span>\n      );\n    }\n  })\n};</code></pre>\n\n<h4 id="h4-1">限定至少接收一个子元素</h4>\n<p>可以使用&nbsp;<code>PropTypes.element</code>&nbsp;来指明组件必须接收一个子元素：</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">MyComponent</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n  render() {\n    <span class="code-comment"><span\n            class="code-comment">// This must be exactly one element or it will warn.</span></span>\n    <span class="code-keyword">const</span> children = <span class="code-keyword"><span class="code-keyword">this</span></span>.props.children;\n    <span class="code-keyword"><span class="code-keyword">return</span></span> (\n      <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span>&gt;</span>\n        {children}\n      <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class="code-type">MyComponent</span>.propTypes = {\n  children: <span class="code-type">React</span>.<span class="code-type">PropTypes</span>.element.isRequired\n};</code></pre>\n\n<h4 id="h4-2">设定props默认值</h4>\n<p>还可以使用&nbsp;<code>defaultProps</code>来指定默认值：</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">Greeting</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n  render() {\n    <span class="code-keyword"><span class="code-keyword">return</span></span> (\n      <span class="xml"><span class="code-tag">&lt;<span class="code-name">h1</span>&gt;</span><span class="code-type">Hello</span>, {<span\n              class="code-keyword">this</span>.props.name}<span class="code-tag">&lt;/<span class="code-name">h1</span>&gt;</span></span>\n    );\n  }\n}\n\n<span class="code-comment"><span class="code-comment">// 指定props.name的默认值:</span></span>\n<span class="code-type">Greeting</span>.defaultProps = {\n  name: <span class="code-string"><span class="hljs-symbol">\'Strange</span>r\'</span>\n};\n\n<span class="code-type">ReactDOM</span>.render(\n  <span class="xml"><span class="code-tag">&lt;<span class="code-name"><span class="code-type">Greeting</span></span> /&gt;</span>,\n  document.getElementById(<span class="hljs-symbol">\'exampl</span>e\')\n);</span></code></pre>\n\n<h3 id="h3-3">Refs和真实Dom</h3>\n<p>\n    在典型的React数据流中，props参数传递的唯一接口。当需要修改参数时，必须修改props值并重新渲染（render）。然而，有很多场景需要在单向数据流之外修改子组件，React提供“Refs”特性来直接修改真实Dom元素。</p>\n\n<h4 id="h4-3">什么时候需要使用Refs</h4>\n<p>当遇到以下情况时，建议使用Refs特性：</p>\n<ul>\n    <li>需要管理聚（focus）、文档选择或媒体回放等真实Dom事件时。</li>\n    <li>触发需要马上执行的动画。</li>\n    <li>引入第三方库时。</li>\n</ul>\n<p>避免将Refs用于任何声明性的工作，如使用一个props.isOpen参数来代替Dialog的open()和close()接口。</p>\n\n<h4 id="h4-4">将Ref添加到Dom元素中</h4>\n<p>React支持在任何组件上使用ref。ref属性提供一个回调方法，当组件被渲染或被移除后，这个回调方法会被调用。</p>\n<p>当ref属性用于一个HTML元素时，ref的回调方法会获取Dom的实例。例如，下面的例子获取到input标签的Dom实例并保存到this.textInput变量中，这个变量一直指向Dom节点。</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span class="code-title">CustomTextInput</span></span></span><span\n        class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n  <span class="code-keyword">constructor</span>(props) {\n    <span class="code-keyword"><span class="code-keyword">super</span></span>(props);\n    <span class="code-keyword"><span class="code-keyword">this</span></span>.focus = <span class="code-keyword"><span\n            class="code-keyword">this</span></span>.focus.bind(<span class="code-keyword"><span class="code-keyword">this</span></span>);\n  }\n\n  <span class="code-comment"><span class="code-comment">// 定义一个focus方法</span></span>\n  focus() {\n    <span class="code-keyword"><span class="code-keyword">this</span></span>.textInput.focus();\n  }\n\n  render() {\n    <span class="code-keyword"><span class="code-keyword">return</span></span> (\n      &lt;div&gt;\n        &lt;input\n          <span class="hljs-class"><span class="code-keyword">type</span></span>=<span class="code-string">"text"</span>\n          ref={(input) =&gt; { <span class="code-keyword">this</span>.textInput = input; }} /&gt;\n        &lt;input\n          <span class="hljs-class"><span class="code-keyword">type</span></span>=<span\n            class="code-string">"button"</span>\n          value=<span class="code-string">"Focus the text input"</span>\n          onClick={<span class="code-keyword">this</span>.focus}\n        /&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre>\n<p>当Dom元素被渲染后，React会回调ref指定的方法，并传递当前Dom的实例作为参数，当Dom被移除时，ref指向的方法也会被调用，传入的参数为null。</p>\n<p>使用ref回调方法来设置class的属性是获取真实Dom对象的常用方法，上面的例子给出了一个编写方式，只要语法正确你可以用各种方式来编写，如更简短的：&nbsp;<code>ref={input =&gt;\n    this.textInput = input}</code>。</p>\n\n<h4 id="h4-5">给class组件增加一个Ref属性</h4>\n<p>当ref用于一个由class关键字声明的自定义组件时，ref指向的回调方法会在组件完成渲染后被回调，传递的参数是组件的实例。例如下面的例子，在&nbsp;<code>CustomTextInput</code>&nbsp;组件完成渲染后立即模拟一次focus事件：\n</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-class"><span class="code-keyword"><span\n        class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span\n        class="code-title"><span class="hljs-class"><span\n        class="code-title">AutoFocusTextInput</span></span></span><span class="hljs-class"> </span><span\n        class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span\n        class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span\n        class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span\n        class="hljs-class"><span class="code-title">Component</span></span></span><span\n        class="hljs-class"> </span></span>{\n  componentDidMount() {<span class="code-comment"><span class="code-comment">//完成渲染后被回调</span></span>\n    <span class="code-keyword"><span class="code-keyword">this</span></span>.textInput.focus();<span\n            class="code-comment"><span class="code-comment">//聚焦到当前组件</span></span>\n  }\n\n  render() {\n    <span class="code-comment"><span class="code-comment">// CustomTextInput 已经在上一段代码中声明</span></span>\n    <span class="code-keyword"><span class="code-keyword">return</span></span> (\n      <span class="xml"><span class="code-tag">&lt;<span class="code-name"><span\n              class="code-type">CustomTextInput</span></span>\n        <span class="hljs-attr">ref</span>=<span class="code-string">{(input)</span> =&gt;</span> { <span\n              class="code-keyword">this</span>.textInput = input; }} /&gt;\n    );\n  }\n}</span></code></pre>\n<p>必须用class来定义&nbsp;<code>CustomTextInput</code>&nbsp;组件才会生效。</p>\n\n<h4 id="h4-6">给Function声明的组件设定Refs</h4>\n<p>不能再function定义的组件直接使用ref，因为在声明时他并没有实例化：</p>\n<pre class="scala"><code class="language-javascript"><span class="hljs-function"><span\n        class="code-keyword">function</span> <span class="code-title"><span\n        class="code-type">MyFunctionalComponent</span></span>(<span class="hljs-params"></span>) </span>{\n  <span class="code-keyword"><span class="code-keyword">return</span></span> &lt;input /&gt;;\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Parent</span> <span\n        class="code-keyword">extends</span> <span class="code-title">React</span>.<span\n        class="code-title">Component</span> </span>{\n  render() {\n    <span class="code-comment">// 错误，这里的ref不会有任何效果。</span>\n    <span class="code-keyword">return</span> (\n      &lt;<span class="code-type">MyFunctionalComponent</span>\n        ref={(input) =&gt; { <span class="code-keyword">this</span>.textInput = input; }} /&gt;\n    );\n  }\n}</code></pre>\n<p>最合理的方式是将function定义的组件转换为class，这和我们需要使用state来控制状态是一个道理。不过在function组件中，如果内部引用的是另一个class组件也是可以使用Refs特性的：</p>\n<pre class="php"><code class="language-javascript"><span class="hljs-function"><span class="code-keyword"><span\n        class="hljs-function"><span class="code-keyword">function</span></span></span><span\n        class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">CustomTextInput</span></span></span><span\n        class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-params"><span\n        class="hljs-function"><span class="hljs-params">props</span></span></span><span class="hljs-function"><span\n        class="hljs-params">)</span> </span></span>{\n  <span class="code-comment"><span class="code-comment">// 在这里声明textInput，每次重新渲染时，都会新生成一个本地变量</span></span>\n  <span class="code-keyword">let</span> textInput = <span class="hljs-literal"><span\n            class="code-keyword">null</span></span>;\n\n  <span class="code-comment"><span class="code-comment">// 每次重新渲染时，都会新生成一个回调方法</span></span>\n  <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span\n          class="code-keyword">function</span></span></span><span class="hljs-function"> </span><span\n          class="code-title"><span class="hljs-function"><span class="code-title">handleClick</span></span></span><span\n          class="hljs-function"><span class="hljs-params">(</span></span><span class="hljs-params"></span><span\n          class="hljs-function"><span class="hljs-params">)</span> </span></span>{\n    textInput.focus();\n  }\n\n  <span class="code-keyword"><span class="code-keyword">return</span></span> (\n    &lt;div&gt;\n      &lt;input\n        type=<span class="code-string">"text"</span>\n        ref={(input) =&gt; { textInput = input; }} /&gt;\n      &lt;input\n        type=<span class="code-string">"button"</span>\n        value=<span class="code-string">"Focus the text input"</span>\n        onClick={handleClick}\n      /&gt;\n    &lt;/div&gt;\n  );  \n}</code></pre>\n\n<h4 id="h4-7">切勿过度使用Refs特性</h4>\n<p>\n    可能在了解Refs的机制后，某些开发人员更倾向于在代码中使用Refs这种“操作即发生”特性来实现功能。但是在使用之前最好多花点时间来思考为什么状态需要由不同的组件层次来控制，通常情况下组件之间的状态最好由他们共同的祖先来控制：\n    <a title="React 状态、事件与动态渲染" href="/article/react/react_state_event_and_render" rel="nofollow">React 状态、事件与动态渲染</a>\n</p>\n<h4 id="h4-8">*使用警告</h4>\n<p>\n    如果ref的回调方法被定义为一个内联方法，它在更新之前会发生2次调用，第一调用时会传递一个null值，第二次会赋予真正的Dom对象。这是因为在每次渲染时都会有一个新的方法实例被创建所以React必须清除已有的ref并创建一个的ref。可以通过将ref回调方法定义为类的绑定方法来避免这种情况，但请注意，在大多数情况下，这并不会导致什么问题。</p>'},382:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h2 id="h2-1">Resource——资源</h2>\n<p>对于一个联机事务型系统（业务系统）来说，所依赖的外部运行信息主要有2个来源：<strong>数据项</strong>和<strong>资源项</strong>。数据项的存放位置通常是使用各种关系性或NoSql数据库，而资源项通常是使用文件、网络信息的方式来存储。\n</p>\n<p>早在JDK1.0的时代Java就已经提供了本地资源和网络资源的读取功能——<strong>java.net.URL</strong>。他可以同时管理本地资源（操作系统资源）以及网络资源，如下面这个例子：</p>\n<p>（文中的代码仅仅用于说明问题，源码请到<a href="https://gitee.com/chkui-com/spring-core-sample" rel="nofollow">案例gitee库下载</a>，对应的代码在包<em>chkui.springcore.example.hybrid.resource</em>中。）\n</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\tclass="code-title">ResourceApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n\t\t\tclass="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> <span\n\t\t\tclass="code-keyword">throws</span> MalformedURLException </span>{\n\t\t<span class="code-comment">//读取本地资源</span>\n\t\tURL url = ResourceApp.class.getResource(<span class="code-string">"/extend.properties"</span>);\n\t\tprint(url);\n\t\t<span class="code-comment">//读取互联网资源</span>\n\t\turl = <span class="code-keyword">new</span> URL(<span class="code-string">"http"</span>, <span\n\t\t\tclass="code-string">"www.baidu.com"</span>, <span class="hljs-number">80</span>, <span class="code-string">""</span>);\n\t\tprint(url);\n\t\turl = <span class="code-keyword">new</span> URL(<span class="code-string">"https"</span>, <span\n\t\t\tclass="code-string">"www.chkui.com"</span>, <span class="hljs-number">443</span>, <span class="code-string">"/174870bb04.js"</span>);\n\t\tprint(url);\n\t}\n}\n<span class="code-comment">// 输出</span>\n<span class="code-comment">// file:/work/chkui/spring-core-sample/bin/main/extend.properties</span>\n<span class="code-comment">// http://www.baidu.com:80</span>\n<span class="code-comment">// https://www.chkui.com:443/174870bb04.js</span></code></pre>\n<p>\n\t对于每一个类来说getResource方法可以获取当前类所在的系统路径（getResource("")），以及classpath的路径（getResource("/")），利用这个功能我们可以获取操作系统上所知的任何资源。除了本地文件，URL也可以通过域名规则来获取网络上的资源。</p>\n<p>注意输出内容中的开头<strong><em>file:</em></strong> 、<strong><em>http:</em></strong>以及<strong><em>https:</em></strong>，他们表示资源的协议，除了以上这三者，还有<strong><em>ftp:、mailto:</em></strong>等协议。关于URL的详细解释可以看<a\n\t\thref="http://www.ietf.org/rfc/rfc2396.txt" rel="nofollow">ITEF标准</a>。</p>\n<p>URL指向某一个资源之后，可以使用URL::openStream或URL::getFile等方法进一步获取文件中的内容：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\tclass="code-title">ResourceApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n\t\t\tclass="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span> <span\n\t\t\tclass="code-keyword">throws</span> MalformedURLException </span>{\n\t\tUrl url = <span class="code-keyword">new</span> URL(<span class="code-string">"https"</span>, <span\n\t\t\tclass="code-string">"www.chkui.com"</span>, <span class="hljs-number">443</span>, <span class="code-string">"/174870bb04.js"</span>);\n\t\t<span class="code-keyword">try</span>(InputStream is = url.openStream()){\n\t\t\t<span class="code-keyword">byte</span>[] buffer = <span class="code-keyword">new</span> <span\n\t\t\tclass="code-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];\n\t\t\tis.read(buffer);\n\t\t\tString content = <span class="code-keyword">new</span> String(buffer, Charset.forName(<span\n\t\t\tclass="code-string">"UTF-8"</span>));\n\t\t\tprint(<span class="code-string">"Content :"</span>, content);\n\t\t} <span class="code-keyword">catch</span> (IOException e) {\n\t\t}\n\t}\n}</code></pre>\n\n<h2 id="h2-2">Spring中的资源管理</h2>\n<p>Spring的资源管理在JDK的基础功能上进行了强大的扩展，即使你不用Spring的整个生态或者容器，你也可以将其资源管理作为一个工具整合到自己的系统中而提高效率。它扩展了以下内容：</p>\n<ol>\n\t<li>\n\t\t隐藏底层实现。对于各种各样的资源Spring都使用了不同的实现类来管理，但是他利用适配器模式让使用者仅仅需要了解<strong><em>org.springframework.core.io.Resource</em></strong>接口即可。\n\t</li>\n\t<li>新增资源存在判断、资源操作权限相关的功能，相对于<em>java.net.URL</em>资源不存在则设置为null更友好。</li>\n\t<li>支持通配符来获取资源，例如 ：<em>classpath:a/b/**/applicationContext-*.xml。</em></li>\n</ol>\n\n<h2 id="h2-3">协议与路径</h2>\n<p>在前面的内容中就提到了多个协议，spring的资源管理功能除了标准的协议，还增加了一个——<strong><em>classpath:</em></strong>协议，他表示从当前的classpath根路径开始获取资源。对于Spring的资源管理功能而言，主要有以下几种协议：\n</p>\n<table border="1" cellpadding="1" cellspacing="1" style="width:500px">\n\t<tbody>\n\t<tr>\n\t\t<th>协议&nbsp;</th>\n\t\t<th>例子</th>\n\t\t<th>说明</th>\n\t</tr>\n\t</tbody>\n\t<tbody>\n\t<tr>\n\t\t<td>classpath:</td>\n\t\t<td>classpath:res/extend.properties</td>\n\t\t<td>从当前jvm的classpath根路径开始获取资源。</td>\n\t</tr>\n\t<tr>\n\t\t<td>file:</td>\n\t\t<td>file:///tmp/myfile.data</td>\n\t\t<td>从操作系统(文件路径)的路径获取资源。</td>\n\t</tr>\n\t<tr>\n\t\t<td>http(s):</td>\n\t\t<td>http(s)://www.chkui.com/</td>\n\t\t<td>从互联网获取资源。</td>\n\t</tr>\n\t<tr>\n\t\t<td>(无标记)</td>\n\t\t<td>/data/extend.data</td>\n\t\t<td>根据应用上下文获取资源。</td>\n\t</tr>\n\t</tbody>\n</table>\n<p><strong><em>classpath:</em></strong>、<strong><em>file:</em></strong>、<strong><em>http(s):</em></strong>这三个协议都很明确的指明了获取资源的路径，但是没有声明协议的情况就比较特殊，他需要根据上下文来判定适用的路径。\n</p>\n<p>在<a href="https://www.chkui.com/article/spring/spring_core_context_and_ioc" title="上下文与IoC">上下文与IoC</a>这篇文章中已经介绍过，经过层层继承和实现，Spring提供容器实现功能的主要是<strong><em>ClassPathXmlApplicationContext</em></strong>和<strong><em>FileSystemXmlApplicationContext</em></strong>两个类，这两个Context本质上都是实现了相同的Context功能，最明显的区别之一就是加载文件的路径不同。比如下面的情况：\n</p>\n<pre><code class="java">ApplicationContext ctx = <span\n\t\tclass="code-keyword">new</span> ClassPathXmlApplicationContext(<span class="code-string">"config/ctx.xml"</span>);</code></pre>\n<p>ClassPathXmlApplicationContext默认启用的是<em>ClassPathResource</em>来管理资源，所以上面的路径配置相当于"classpath:config/ctx.xml"。但是如果修改为以下形式：\n</p>\n<pre><code class="java">ApplicationContext ctx = <span\n\t\tclass="code-keyword">new</span> ClassPathXmlApplicationContext(<span class="code-string">"file:///config/ctx.xml"</span>);</code></pre>\n<p>通过协议明确告知路径规则，那么在<em>ApplicationContext</em>会使用对应的<em>FileSystemResource</em>来加载管理资源。</p>\n<p>而<strong><em>FileSystemXmlApplicationContext</em></strong>与<strong><em>ClassPathXmlApplicationContext</em></strong>相互对应——默认使用的<em>FileSystemResource</em>，可以通过声明协议来指定对应的资源加载类。\n</p>\n<p>上面的内容提到了<em>ClassPathResource和FileSystemResource。</em>Spring为不同类型、协议的资源指定了各种各种的<strong><em>org.springframework.core.io.Resource</em></strong>实现类，主要有&nbsp;<em>UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</em>。从字面上看大概能了解对应的功能。在使用的时候我们并不需要了解他们的具体实现，只要知道不同的协议对应的资源路径即可。\n</p>\n\n<h2 id="h2-4">获取资源的方法</h2>\n\n<h3 id="h3-1">直接使用ApplicationContext</h3>\n<p>\n\t在明确所支持的协议之后，我们就可以用ResourcePatternResolver::getResources方法来获取资源。ApplicationContext继承了ResourcePatternResolver接口，所以我们通常使用以下方法获取资源：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.resource;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\t\tclass="code-title">ResourceApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n\t\t\tclass="code-keyword">void</span> <span class="code-title">main</span><span class="hljs-params">(String[] args)</span></span>{\n\t\tApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(ResourceApp.class);\n\t\tResource res = ctx.getResource(<span class="code-string">"classpath:extend.properties"</span>);\n\t\tprint(<span class="code-string">"Resource :"</span>, res);\n\t\tres = ctx.getResource(<span class="code-string">"https://www.chkui.com"</span>);\n\t\tprint(<span class="code-string">"Resource :"</span>, res);\n\t}\n}</code></pre>\n\n<h3 id="h3-2">ResourceLoaderAware注入</h3>\n<p>除了直接使用ApplicationContext，还可以通过继承ResourceLoaderAware的方式来获取资源加载接口：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.resource;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\t\tclass="code-title">LoadResourceBean</span> <span class="code-keyword">implements</span> <span\n\t\t\tclass="code-title">ResourceLoaderAware</span></span>{\n\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n\t\t\tclass="code-title">setResourceLoader</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> </span>{\n\t\tResource res = resourceLoader.getResource(<span class="code-string">"classpath:extend.properties"</span>);\n\t\tSystem.out.println(<span class="code-string">"Bean load Resource :"</span> + res);\n\t}\n}\n</code></pre>\n<p>\n\t实际上这里传入进来的ResourceLoader就是ApplicationContext，所以用ApplicationContextAware也可以实现对应的功能。但是为了明确功能的用途，这里最好还是实现ResourceLoaderAware比较合理。</p>\n\n<h3 id="h3-3">Autowired注入</h3>\n<p>在2.5.x之后，spring可以使用<a href="https://www.chkui.com/article/spring/spring_core_auto_inject_of_annotation"\n\t\t\t\t\t\t title="注解自动装载">@Autowired注解</a>引入ResourceLoader（ApplicationContext）：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.resource;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\t\tclass="code-title">LoadResourceBean</span> <span class="code-keyword">implements</span> <span\n\t\t\tclass="code-title">ResourceLoaderAware</span></span>{\n\t<span class="code-meta">@Autowired</span>\n\tResourceLoader resourceLoader;\n\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n\t\t\tclass="code-title">setResourceLoader</span><span class="hljs-params">(ResourceLoader resourceLoader)</span> </span>{\n\t\tSystem.out.println(<span class="code-string">"Is ApplicationContext? "</span> + (<span\n\t\t\tclass="code-keyword">this</span>.resourceLoader == resourceLoader));\n\t\tResource res = <span class="code-keyword">this</span>.resourceLoader.getResource(<span class="code-string">"classpath:extend.properties"</span>);\n\t\tSystem.out.println(<span class="code-string">"Bean load Resource :"</span> + res);\n\t}\n}</code></pre>\n<p>和普通的Bean一样，还可以通过构造方法和setter方法注入ResourceLoader。</p>\n\n<h3 id="h3-4">XML配置获取资源</h3>\n<p>我们可以直接在XML中指定资源路径，然后在setter或构造方法中获取到对应的资源，看下面的例子。</p>\n<p>XMLConfigBean的Set方法直接获取一个<em>Resource</em>：</p>\n<pre><code class="java"><span class="code-keyword">package</span> chkui.springcore.example.hybrid.resource;\n\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\t\tclass="code-title">XMLConfigBean</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n\t\t\tclass="code-title">setResource</span><span class="hljs-params">(Resource res)</span> <span\n\t\t\tclass="code-keyword">throws</span> IOException </span>{\n\t\tSystem.out.println(<span class="code-string">"XML load Resource :"</span> + res);\n\t\tProperties p = <span class="code-keyword">new</span> Properties();\n\t\tp.load(res.getInputStream());\n\t\tSystem.out.println(<span class="code-string">"Properties Info: "</span> + p.getProperty(<span\n\t\t\tclass="code-string">"info"</span>));\n\t}\n}</code></pre>\n<p>我们只需要在XML配置文件中指定资源路径位置，Spring会自动帮我们完成转换：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">beans</span>&gt;</span>\n\t<span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n\t\t\tclass="code-string">"chkui.springcore.example.hybrid.resource.XMLConfigBean"</span>&gt;</span>\n\t\t<span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n\t\t\t\tclass="code-string">"resource"</span> <span class="hljs-attr">value</span>=<span class="code-string">"classpath:extend.properties"</span>/&gt;</span>\n\t<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">beans</span>&gt;</span></code></pre>\n<p>在XMLConfigBean::setResource方法中我们拿到的是"classpath:extend.properties"这一项资源。</p>\n\n<h2 id="h2-5">通配符指定资源</h2>\n<p>除了使用指定固定路径的方式获取一项资源，我们还可以使用"?"、"*"等通配符使用匹配规则来获取资源，例如：</p>\n<pre><code class="java">Resource[] resList = ctx.getResources(<span\n\t\tclass="code-string">"classpath:hybrid/**/*.xml"</span>);</code></pre>\n<p>Spring官网将这种资源匹配规则称为“Ant-style匹配”，虽然并不知道源自什么地方（应该是源自<em>Apache Ant</em>项目，但是我在Ant项目文档中还没看到对应的说明，心细致的码友可以再找找），但是Spring官方文档对其有详细的说明，详见<a\n\t\thref="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html"\n\t\trel="nofollow">AntPathMatcher的说明</a>。Ant-style的匹配规则大致如下：</p>\n<ol>\n\t<li>"?"：匹配一个字符。例如<em>"classpath:conf?g.xml"</em>匹配<em>"classpath:config.xml"</em>也匹配<em>"classpath:conf1g.xml"</em>但是不匹配<em>"classpath:conf12g.xml"</em>。\n\t</li>\n\t<li>"*"：匹配0到多个字符。例如<em>"classpath:*.xml"匹配classpath根目录下所有.xml文件。而"classpath:config/*.xml"匹配config文件夹中所有.xml文件。</em>\n\t</li>\n\t<li><em>"**"：匹配0到多个目录。例如"classpath:**/*.xml"匹配整个classpath下所有*.xml文件。"</em><em>classpath:config/**/*.xml"匹配config文件夹以及所有子文件夹的.xml文件。</em>\n\t</li>\n\t<li>{arg1:{a-z}+}：匹配任意多个a-z的字符，并将匹配到的内容赋值到变了arg1中。该条规则实用于<a\n\t\t\thref="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html"\n\t\t\trel="nofollow">AntPathMatcher</a>，当无法在ApplicationContext的资源匹配规则中使用。\n\t</li>\n</ol>\n\n<h3 id="h3-5">classpath*:扩展</h3>\n<p>在通配符的基础上，spring扩展了一个<strong><em>classpath*:</em></strong>协议。</p>\n<p>\n\t对于一个运行的Jvm来说，classpath的“根目录”一般有多个。比如在当前开发的工程有一个包含main方法的类文件——chkui/example/spinrg/app.class，此时引入一个jar包也包含一个一样的类文件chkui/example/spring/app.class（有空的码友可以自己试试Jvm到底运行哪个）。这种情况对于Jvm来说就引出"多个classpath"和"首选classpath"的概念，而classpath:和classpath*的差异就是，前者从首选classpath中优先获取资源，而后者会从所有classpath中寻找资源。而首先classpath一般是我们当前工程的编译文件（案例代码在<em>[project-root]/bin/main</em>）。\n</p>\n<p>其实在Jvm的资源加载方式上已经对<em><strong>classpath:</strong></em>和<strong><em>classpath*:</em></strong>提供了不同的实现，但是理解起来比较“绕”。一般情况下我们使用Class::getResource都是获取首选classpath路径下的资源，而使用ClassLoader::getResources(classPath)可以获取所有classpath下的资源。\n</p>\n<p>下面的代码展示了这个过程，案例代码在<a\n\t\thref="https://gitee.com/chkui-com/spring-core-sample/blob/master/src/main/java/chkui/springcore/example/hybrid/resource/ResourceApp.java"\n\t\trel="nofollow">chkui.springcore.example.hybrid.resource.ResourceApp::multiResourceLoad</a>方法中。</p>\n<p>为了演示这个过程我们引入了Google的Guava包（因为整个工程都没用到guava的内容，所以修改他的类不会产生影响），然后对应的在自己的工程中增加一个Guava包中相同的package和类：</p>\n<pre><code class="java"><span class="code-keyword">package</span> com.google.common.base;\n<span class="code-keyword">public</span> <span class="code-keyword">final</span> <span class="hljs-class"><span\n\t\t\tclass="code-keyword">class</span> <span class="code-title">Preconditions</span> </span>{}</code></pre>\n<p>在编译之后，会在bin文件夹（如果是maven就是/target）中产生一个main/com/google/common/base/Preconditions.class文件。然后通过下面的代码测试资源加载：</p>\n<pre><code class="java"><span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n\t\tclass="code-keyword">void</span> <span class="code-title">multiResourceLoad</span><span\n\t\tclass="hljs-params">()</span> <span class="code-keyword">throws</span> IOException </span>{\n\t\t<span class="code-keyword">final</span> String classPath = <span class="code-string">"com/google/common/base/Preconditions.class"</span>;\n\n\t\t<span class="code-comment">//class.getResource需要使用"/"表示root路径</span>\n        <span class="code-comment">//首选路径的资源</span>\n\t\tprint(<span class="code-string">"classpath: "</span>, ResourceApp.class.getResource(<span class="code-string">"/"</span> + classPath));\n\t\t<span class="code-comment">//Verify没有被覆盖，输出Jar包中的内容,注意jar:file: 协议的格式</span>\n\t\tprint(<span class="code-string">"In Jar classpath: "</span>, ResourceApp.class.getResource(<span\n\t\t\tclass="code-string">"/"</span> + unMultiClassPath));\n\n\t\t<span class="code-comment">//ClassLoader::getResource获取首选路径资源</span>\n\t\tprint(<span class="code-string">"First classpath: "</span>, Verify.class.getClassLoader().getResource(classPath));\n\t\t<span class="code-comment">//ClassLoader::getResources获取所有资源</span>\n\t\tEnumeration&lt;URL&gt; e = ResourceApp.class.getClassLoader().getResources(classPath);\n\t\t<span class="code-keyword">int</span> count = <span class="hljs-number">1</span>;\n\t\t<span class="code-keyword">while</span> (e.hasMoreElements()) {\n\t\t\tURL url = e.nextElement();\n\t\t\tprint(<span class="code-string">"classpath*["</span>, count++ ,<span class="code-string">"]:"</span>, url);\n\t\t}\n\t}</code></pre>\n<p>\n\t运行之后，只有在最后的迭代器中输出了Guava包中的Preconditions.class的路径，而其余位置都输出的是我自行创建的Preconditions.class，也就是首选classpath下的Preconditions.class，首选的资源也就是ClassLoader::getResources获取的迭代器的第一个值。</p>\n<p>Spring的<strong><em>classpath*:</em></strong>协议实际上底层也是用<em>ClassLoader::getResources</em>的方式实现的，不过扩展了支持通配符并将资源转换为org.springframework.core.io.Resource。上面用JDK演示的代码用spring的资源管理实现为下面的形式：\n</p>\n<pre><code class="java"><span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n\t\tclass="code-keyword">void</span> <span class="code-title">multiResourceLoad</span><span class="hljs-params">(ApplicationContext ctx)</span></span>{\n    ApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext();\n    <span class="code-keyword">final</span> String classPath = <span class="code-string">"com/google/common/base/Preconditions.class"</span>;\n    <span class="code-keyword">final</span> String unMultiClassPath = <span class="code-string">"com/google/common/base/Verify.class"</span>;\n    print(<span class="code-string">"classpath: "</span>, Arrays.asList(ctx.getResources(<span class="code-string">"classpath:"</span> + classPath)));\n    print(<span class="code-string">"classpath*: "</span>, Arrays.asList(ctx.getResources(<span class="code-string">"classpath*:"</span> + classPath)));\n    print(<span class="code-string">"unmulti-classpath*: "</span>, Arrays.asList(ctx.getResources(<span\n\t\t\tclass="code-string">"classpath*:"</span> + unMultiClassPath)));\n}</code></pre>\n\n<h2 id="h2-6">Spring中的各项资源</h2>\n<p>\n\t不仅仅是ApplicationContext::getResources方法，实际上Spring中绝大部分外部资源加载都是通过前面介绍的规则使用同一个工具类完成的，所以我们可以在许多地方使用对应的"协议"来管理我们的资源，比如下面的例子：</p>\n<pre><code class="java"><span class="code-meta">@ImportResource</span>(<span class="code-string">"classpath:hybrid/resource/config-*.xml"</span>)\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n\t\t\tclass="code-title">ResourceApp</span> </span>{}</code></pre>'}});