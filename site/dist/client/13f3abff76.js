webpackJsonp([13],{367:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h2 id="h2-1">React</h2>\n<p>本文记录了本人以及目前团队从无到有使用React的过程，我们将从webpack开始说起，一步一步展现React最基本的开发生态。在这里并不会介绍任何jsx或es6相关的语法，只聚焦于如何使用react生态搭建利于团队协作、有利于提升开发效率的开发环境。</p>\n\n<h2 id="h2-2">脚手架工具——webpack&nbsp;</h2>\n<p>工欲善必须利其器，想要高效的开发react，必须保证有一个高效有序的开发环境。我们使用的是Facebook开源的脚手架工具——webpack来搭建一个完全不依赖服务器的开发环境。实现高效集成、实时编辑可见、动态编译jsx和es6等强悍功能。</p>\n\n<h3 id="h3-1">添加webpack</h3>\n<p>webpack最早是Facebook的instagram团队研发出的脚手架工具，用于支持前端系统的开发。虽然webpack一直都和react嵌套在一起使用，但是他的使用场景并不局限于react，你可以把他应用于所有的前端开发场景。</p>\n<p>webpack也是依赖nodejs和npm的，在安装webpack之前务必先安装nodejs的环境，如果在此之前你还没有安装nodejs的环境，可以看这篇<a title="nodejs安装介绍" href="http://www.chkui.com/article/nodeJs/install_nodejs_runtime_environment">关于nodejs安装</a>的文章获得一些参考。</p>\n<p>可以像下面这样安装一个全局的webpack环境。</p>\n<pre class=""><code class=""><span class="code-variable"><span class="code-variable">$ </span></span>npm install webpack -g</code></pre>\n<p>或者以依赖工程的方式安装</p>\n<pre class=""><code class=""><span class="code-comment"><span class="code-comment"># 进入项目目录</span></span>\n<span class="code-comment"><span class="code-comment"># 确定已经有 package.json，没有就通过 npm init 创建</span></span>\n<span class="code-comment"><span class="code-comment"># 安装 webpack 依赖</span></span>\n<span class="code-variable"><span class="code-variable">$ </span></span>npm install webpack --save-dev</code></pre>\n\n<h3 id="h3-2">测试运行webpack</h3>\n<p>（本例子的代码存放在：<a title="React搭建开发环境示例代码" href="https://github.com/chkui/webpack-demo" rel="nofollow">https://github.com/chkui/webpack-demo</a>。下载后用 npm install 下载npm依赖即可使用。）</p>\n<p>Setp1:简单打包</p>\n<p>首先我们增加一些用于测试元素。先写一个index.html</p>\n<pre class="xml"><code class="language-html xml"><span class="code-meta"><span class="code-meta">&lt;!DOCTYPE html&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">html</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">lang</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"en"</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">meta</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">charset</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"UTF-8"</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>Title<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">script</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">src</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"bundle.js"</span></span></span><span class="code-tag">&gt;</span></span><span class="undefined"></span><span class="code-tag"><span class="undefined"></span><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">script</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">html</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>然后添加一个entry.js</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/16.\n */</span></span>\n<span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">"!style!css!./style.css"</span></span>);\n<span class="code-built_in"><span class="code-built_in">document</span></span>.write(<span class="code-string"><span class="code-string">\'&lt;h1&gt;hello webpack&lt;/h1&gt;\'</span></span>);</code></pre>\n<p>然后就可以执行打包命令了：</p>\n<pre class=""><code class="language-bash"><span class="code-variable">$ </span>webpack ./entry.js bundle.js</code></pre>\n<p>运行以后，就会发现在目录中生成了一个bundle.js文件。浏览器中打开index.html就会看到执行效果。</p>\n<p>Step2:利用webpack分析工具打包&nbsp;</p>\n<p>增加一个名为module.js的文件：</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/16.\n */</span></span>\n<span class="code-built_in"><span class="code-built_in">module</span></span>.exports = <span class="code-string"><span class="code-string">\'It works from module.js.\'</span></span></code></pre>\n<p>在原来的entry.js增加引用：</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/16.\n */</span></span>\n<span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">"!style!css!./style.css"</span></span>);\n<span class="code-built_in"><span class="code-built_in">document</span></span>.write(<span class="code-string"><span class="code-string">\'&lt;h1&gt;hello webpack&lt;/h1&gt;\'</span></span>);\n<span class="code-comment"><span class="code-comment">//新增对module.js的引用</span></span>\n<span class="code-built_in"><span class="code-built_in">document</span></span>.write(<span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">\'./module.js\'</span></span>));</code></pre>\n<p>然后同样执行webpack打包命令：</p>\n<pre class=""><code class="language-bash"><span class="code-variable">$ </span>webpack ./entry.js bundle.js</code></pre>\n<p>然后在打开index.html，会发现我们新增加的module.js的内容被正确输出。这是因为我们在页面中通过nodejs的require的方式引入的module.js，而使用webpack打包时会自动在依赖关系中引入module.js。</p>\n\n<h3 id="h3-3">加载器</h3>\n<p>webpack提供了一个非常强大的loader功能，这个功能可以用于管理各种依赖关系模块，在webpack中所有的文件都视作一个模块。</p>\n<p>首先npm导入webpack loader：</p>\n<pre class="sql"><code class="language-bash">npm <span class="code-keyword">install</span> css-loader <span class="code-keyword">style</span>-loader</code></pre>\n<p>添加一个用于测试的style.css文件：</p>\n<pre class="css"><code class="language-css"><span class="code-selector-tag"><span class="code-selector-tag">h1</span></span>{\n    <span class="code-attribute"><span class="code-attribute">color</span></span>:red;\n}</code></pre>\n<p>在entry.js中添加引用：</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/16.\n */</span></span>\n<span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">"!style!css!./style.css"</span></span>);<span class="code-comment"><span class="code-comment">//添加对css的引用</span></span>\n<span class="code-built_in"><span class="code-built_in">document</span></span>.write(<span class="code-string"><span class="code-string">\'&lt;h1&gt;hello webpack&lt;/h1&gt;\'</span></span>);\n<span class="code-built_in"><span class="code-built_in">document</span></span>.write(<span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">\'./module.js\'</span></span>));</code></pre>\n<p>使用命令行打包：</p>\n<pre class=""><code class="language-bash">webpack ./entry.js bundle.js --<span class="code-keyword">module</span>-bind <span class="code-string"><span class="code-string">\'css=style!css\'</span></span></code></pre>\n<p>会发现css的样式生效了。可以将繁琐的“!style!css!./style.css”简写成"./style.css"。</p>\n\n<h3 id="h3-4">使用配置管理</h3>\n<p>细心的人会发现，我们每次使用命令行打包都带了大量的参数，这样不仅繁琐更不利于规模化使用。webpack同样可以使用标准化配置文件来替代命令行中的各种参数。</p>\n<p>webpack的配置文件是nodejs的文件，通常命名为&nbsp;<code>webpack.config.js</code>。我们在工程中增加配置文件：</p>\n<pre class="typescript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/16.\n */</span></span>\n<span class="code-built_in"><span class="code-built_in">module</span></span>.exports = {\n    entry: <span class="code-string"><span class="code-string">\'./entry.js\'</span></span>,<span class="code-comment"><span class="code-comment">//定义要引入的js文件</span></span>\n    output: {\n        path: __dirname,\n        filename: <span class="code-string"><span class="code-string">\'bundle.js\'</span></span> <span class="code-comment"><span class="code-comment">//定义要输出的js文件</span></span>\n    },\n    <span class="code-built_in"><span class="code-keyword">module</span></span>: {\n        loaders: [<span class="code-comment"><span class="code-comment">//定义加载内容</span></span>\n            {test: <span class="hljs-regexp"><span class="hljs-regexp">/\\.css$/</span></span>, loader: <span class="code-string"><span class="code-string">\'style!css\'</span></span>}\n        ]\n    }\n}</code></pre>\n<p>现在，我们在命令行中输入webpack就可以实现和前面一样的打包。</p>\n\n<h3 id="h3-5">丰富打包输出内容</h3>\n<p>可以使用：</p>\n<pre class="lua"><code class="lua">webpack <span class="code-comment"><span class="code-comment">--progress --colors</span></span></code></pre>\n<p>命令来丰富打包输出的内容，更容易了解出现的问题。</p>\n\n<h3 id="h3-6">监听更新模式</h3>\n<p>在我们进行编码开发的时候，每次对文件的编辑我们都想立即看到编译效果，如果每次编辑都要去打包，会非常麻烦。webpack提供了一个监听模式（类似grunt的watch），用于监听每次对文件的修改，修改后会立即进行增量更新。启用监听模式：</p>\n<pre class="lua"><code class="lua">webpack <span class="code-comment"><span class="code-comment">--progress --colors --watch</span></span></code></pre>\n<p>监听模式使用的是内存增量更新。webpack会将所有需要打包的文件copy到内存，然后监控文件修改，如果文件发生了修改，会将修改的文件替换内存中的对应文件。因此开发完之后，切记进行一次手动打包才能生效。</p>\n\n<h3 id="h3-7">开发环境模式</h3>\n<p>webpack更强大的是，他整合了nodejs的express提供了一个静态服务器。（虽然没有官方正式，我觉得webstrom和微信本地开发环境都是整合的nodejs的express）</p>\n<p>使用了开发环境模式，我们所有的动态修改和操作都可以实时看到效果，并且解决了静态资源各种路径引用的问题。首先npm安装工具：</p>\n<pre class="sql"><code class="language-bash">npm <span class="code-keyword">install</span> webpack-dev-<span class="code-keyword">server</span> -g</code></pre>\n<p>然后使用命令行工具启用开发环境：</p>\n<pre class="lua"><code class="language-bash">webpack-dev-server <span class="code-comment">--progress --colors</span></code></pre>\n<p>webpack的开发环境模式很强悍，比使用--watch更犀利的地方在于可以实现编辑即可见。浏览器立即同步刷新运行。开发环境模式可以延伸到生产环境实现代码同步级别的热部署。&nbsp;</p>\n\n<h4 id="h4-1">开发环境扩展——Linux下文件变化监控个数配置</h4>\n<p>webpack在linux下监控文件的变化用到了 Inotify机制。有可能在文件比较多的时候修改、编辑文件无法触发webpack热部署。我们可以通过一下方式检测并调整监控文件个数：</p>\n<pre class="tcl"><code class="language-bash"><span class="code-comment"><span class="code-comment">#检查inotify监控文件的个数</span></span>\ncat /<span class="code-keyword">proc</span>/sys/fs/inotify/max_user_watches</code></pre>\n<p>然后可以</p>\n<pre class="bash"><code class="language-bash"><span class="code-comment"><span class="code-comment">#将同时监控的文件个数修改为18000</span></span>\n<span class="code-built_in"><span class="code-built_in">echo</span></span> fs.inotify.max_user_watches=18000 | sudo tee <span class="hljs-_"><span class="hljs-_">-a</span></span> /etc/sysctl.conf &amp;&amp; sudo sysctl -p\n</code></pre>\n<p>再次查看个数可以看到输出已经配置的参数</p>\n\n<h4 id="h4-2">开发环境扩展——webstorm的坑</h4>\n<p>由于本人的前端页面使用webstorm开发，在使用过程中发现了一个webstorm的坑。webstorm有文件缓存的功能，在编辑完毕保存之后并不会实时的更新磁盘文件，这样的就导致webpack的开发环境无法同步更新文件。以下是解决方法：</p>\n<p>1.File-&gt;settings-&gt;System Settings</p>\n<p>2.找到弹出框的Use "safe write"，将其勾选解除。</p>\n<p><img alt="React 搭建开发环境" height="507" src="https://file.mahoooo.com/res/file/react_establish_development_environment_1.png" width="1020"></p>\n\n<h3 id="h3-8">输出调试信息</h3>\n<p>webpack的配置较为复杂，一不小心就会出现错误。它提供了一个输出调试信息的参数：</p>\n<pre class="lua"><code class="language-bash">$ webpack <span class="code-comment">--display-error-details</span></code></pre>\n<p>调试运行webpack命令出错的时候使用。Webpack 中涉及路径配置最好使用绝对路径，建议通过&nbsp;<code>path.resolve(__dirname, "app/folder")</code>&nbsp;或&nbsp;<code>path.join(__dirname, "app", "folder")</code>&nbsp;的方式来配置，以兼容 Windows 环境。</p>\n\n<h3 id="h3-9">webpack插件</h3>\n<p>某些时候，webpack的常规功能无法满足我们的需求，我们可以为webpack开发插件，或者使用其他开发团队已经完成的插件。</p>\n<p>下面是一个插件的标准格式：</p>\n<pre class="javascript"><code class="language-javascript"><span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function"> </span><span class="code-title"><span class="hljs-function"><span class="code-title">MyPlugin</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">options</span></span></span><span class="hljs-function">) </span></span>{\n  <span class="code-comment"><span class="code-comment">// Configure your plugin with options...</span></span>\n}\n\nMyPlugin.prototype.apply = <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">compiler</span></span></span><span class="hljs-function">) </span></span>{\n  compiler.plugin(<span class="code-string"><span class="code-string">"compile"</span></span>, <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">params</span></span></span><span class="hljs-function">) </span></span>{\n    <span class="code-built_in"><span class="code-built_in">console</span></span>.log(<span class="code-string"><span class="code-string">"The compiler is starting to compile..."</span></span>);\n  });\n\n  compiler.plugin(<span class="code-string"><span class="code-string">"compilation"</span></span>, <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">compilation</span></span></span><span class="hljs-function">) </span></span>{\n    <span class="code-built_in"><span class="code-built_in">console</span></span>.log(<span class="code-string"><span class="code-string">"The compiler is starting a new compilation..."</span></span>);\n\n    compilation.plugin(<span class="code-string"><span class="code-string">"optimize"</span></span>, <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"></span><span class="hljs-function"><span class="hljs-params"></span>) </span></span>{\n      <span class="code-built_in"><span class="code-built_in">console</span></span>.log(<span class="code-string"><span class="code-string">"The compilation is starting to optimize files..."</span></span>);\n    });\n  });\n\n  compiler.plugin(<span class="code-string"><span class="code-string">"emit"</span></span>, <span class="hljs-function"><span class="code-keyword"><span class="hljs-function"><span class="code-keyword">function</span></span></span><span class="hljs-function">(</span><span class="hljs-params"><span class="hljs-function"><span class="hljs-params">compilation, callback</span></span></span><span class="hljs-function">) </span></span>{\n    <span class="code-built_in"><span class="code-built_in">console</span></span>.log(<span class="code-string"><span class="code-string">"The compilation is going to emit files..."</span></span>);\n    callback();\n  });\n};\n\n<span class="code-built_in"><span class="code-built_in">module</span></span>.exports = MyPlugin;</code></pre>\n<p>需要实现什么功能，可以按照这个标准去开发自己的插件。</p>\n\n<h2 id="h2-3">React开发</h2>\n<p>使用webpack搭建好开发环境后，我们就可以开始着手开发react了。开始之前，我们还是要优先完成开发环境的配置和搭建。</p>\n<p>react使用的语法是jsx，现在还新增了对es6的支持。为了可以高效开发，我们需要使用webpack的loader功能，将jsx或es6使用语法糖转义成浏览器可以识别的标准JavaScript语法。</p>\n<p>下面将继续在前文webpack的基础上继续说明如何开发react。</p>\n\n<h3 id="h3-10">安装必要的依赖工具</h3>\n<p>react的基础工具包：</p>\n<pre class="sql"><code class="language-bash">$ npm <span class="code-keyword">install</span> react <span class="code-comment">--save-dev</span></code></pre>\n<p>react的dom组件：</p>\n<pre class="sql"><code class="language-bash">$ npm <span class="code-keyword">install</span> react react-dom <span class="code-comment">--save-dev</span></code></pre>\n<p>在前面介绍webpack的时候已经介绍了加载器的概念，这里需要额外安装babel用于对react的jsx风格的编码进行解析，babel除了jsx外还可以解析es6等。安装babel：</p>\n<pre class=""><code class="language-bash"><span class="code-variable">$ </span>npm install babel-loader</code></pre>\n<p>安装babel-loader之后\\node_modules目录中会额外多安装一个babel-core，这是babel的核心包。</p>\n<p>有了babel，我们还需要安装编码转换规则，用于解析jsx、es6等等。</p>\n<pre class="sql"><code class="language-bash">$ npm <span class="code-keyword">install</span> babel-preset-es2015 babel-preset-react <span class="code-comment">--save-dev</span></code></pre>\n<p>除了babel提供的es6和jsx，webpack还可以使用各种loader来转换编码，比如coffeescript等。想要什么就去google找吧。</p>\n\n<h3 id="h3-11">完善本地开发环境命令</h3>\n<p>前面的案例使用 webpack-dev-server 来热部署本地开发环境提升开发效率。但是每次都靠长长的命令行启动和停止太过于繁琐。我们可以利用npm的package.json配置脚本运行来统一管理脚本命令：</p>\n<pre class="actionscript"><code class="language-javascript">{\n  <span class="code-string"><span class="code-string">"name"</span></span>: <span class="code-string"><span class="code-string">"demo2-react"</span></span>,\n  <span class="code-string"><span class="code-string">"version"</span></span>: <span class="code-string"><span class="code-string">"1.0.0"</span></span>,\n  <span class="code-string"><span class="code-string">"description"</span></span>: <span class="code-string"><span class="code-string">"react demo"</span></span>,\n  <span class="code-string"><span class="code-string">"main"</span></span>: <span class="code-string"><span class="code-string">"index.js"</span></span>,\n  <span class="code-string"><span class="code-string">"scripts"</span></span>:{\n    <span class="code-string"><span class="code-string">"dev"</span></span>: <span class="code-string"><span class="code-string">"webpack-dev-server --progress --colors --inline"</span></span> <span class="code-comment"><span class="code-comment">//配置运行命令</span></span>\n  },\n  <span class="code-comment"><span class="code-comment">//more</span></span>\n}</code></pre>\n<p>添加了scripts后，我们今后只需要运行</p>\n<pre class=""><code class="language-bash"><span class="code-variable">$ </span>npm run dev</code></pre>\n<p>即可使用配置好的命令行参数启动本地开发环境服务器。</p>\n\n<h3 id="h3-12">终于可以开始码农的核心工作了</h3>\n<p>（demo代码存放在：<a title="React搭建开发环境示例代码" href="https://github.com/chkui/react-demo" rel="nofollow">https://github.com/chkui/react-demo</a>。下载后用 npm install 下载npm依赖即可使用）</p>\n<p>前面准备了这么久，就是为了随后我们可以快乐的编码。首先我们按照下面这个结构创建工程结构：</p>\n<pre class="haml"><code class="haml"><span class="code-comment"><span class="code-comment">/root</span></span>\n-<span class="ruby"><span class="ruby">-</span><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">/dev\n</span></span></span></span>-<span class="ruby"><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">---/js</span></span></span><span class="ruby">\n</span></span>-<span class="ruby"><span class="ruby">-----</span><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">/index\n</span></span></span></span>-<span class="ruby"><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">-------/comps</span></span></span><span class="ruby">\n</span></span>-<span class="ruby"><span class="ruby">---------component1.jsx\n</span></span>-<span class="ruby"><span class="ruby">---------main.jsx\n</span></span>-<span class="ruby"><span class="ruby">-------index.js\n</span></span>-<span class="ruby"><span class="ruby">---</span><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">/style\n</span></span></span></span>-<span class="ruby"><span class="hljs-regexp"><span class="ruby"><span class="hljs-regexp">-----/index</span></span></span><span class="ruby">\n</span></span>-<span class="ruby"><span class="ruby">-------index.css\n</span></span>-<span class="ruby"><span class="ruby">---index.html</span></span></code></pre>\n<p>然后根据工程的结构修改我们的webpack.config.js：</p>\n<pre class="typescript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by Administrator on 2016/11/17.\n */</span></span>\n<span class="code-keyword"><span class="code-keyword">var</span></span> path = <span class="code-built_in"><span class="code-built_in">require</span></span>(<span class="code-string"><span class="code-string">\'path\'</span></span>);\n<span class="code-built_in"><span class="code-built_in">module</span></span>.exports = {\n    entry: [<span class="code-string"><span class="code-string">\'./dev/js/index/comps/main.jsx\'</span></span>],<span class="code-comment"><span class="code-comment">//定义要引入的js文件</span></span>\n    output: {\n        path: __dirname,\n        filename: <span class="code-string"><span class="code-string">\'./dev/js/index/index.js\'</span></span> <span class="code-comment"><span class="code-comment">//定义要输出的js文件</span></span>\n    },\n    <span class="code-built_in"><span class="code-keyword">module</span></span>: {\n        loaders: [{\n            test: <span class="hljs-regexp"><span class="hljs-regexp">/\\.js[x]?$/</span></span>,\n            exclude: <span class="hljs-regexp"><span class="hljs-regexp">/(node_modules|bower_components)/</span></span>,\n            loader: <span class="code-string"><span class="code-string">\'babel-loader\'</span></span>,\n            query: {\n                presets: [<span class="code-string"><span class="code-string">\'es2015\'</span></span>,<span class="code-string"><span class="code-string">\'react\'</span></span>]\n            }\n        }, {\n            test: <span class="hljs-regexp"><span class="hljs-regexp">/\\.css$/</span></span>,\n            loader: <span class="code-string"><span class="code-string">\'style!css\'</span></span>\n        }, {\n            test: <span class="hljs-regexp"><span class="hljs-regexp">/\\.(png|jpg)$/</span></span>,\n            loader: <span class="code-string"><span class="code-string">\'url?limit=25000\'</span></span> <span class="code-comment"><span class="code-comment">//只解析小于25000字节的图片</span></span>\n        }]\n    }\n};</code></pre>\n<p>和前面介绍webpack的例子相比，这里的配置文件新增了了一个babel-loader的配置。</p>\n<p>test后的正则表达式表示对所有的js或者jsx文件进行解析；</p>\n<p>exclude表示不解析npm安装目录下和bower安装目录下的文件；</p>\n<p>loader表示使用的解析工具；</p>\n<p>query表示扩展参数，这里的\'es2015\'和\'react\'表示启用babel-preset-es2015和bable-preset-react解析规则。这里需要注意的是解析的优先级的倒序的，即会先解析‘react’。</p>\n<p>然后我们添加编码内容（所有的例子都分别实现了jsx规范和es2015规范）：</p>\n<p>index.html：</p>\n<pre class="xml"><code class="language-html xml"><span class="code-meta"><span class="code-meta">&lt;!DOCTYPE html&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">html</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">lang</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"en"</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">meta</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">charset</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"UTF-8"</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>Title<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">title</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">head</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">div</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">id</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"comp"</span></span></span><span class="code-tag">&gt;</span></span><span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">div</span></span></span><span class="code-tag">&gt;</span></span>\n    <span class="code-tag"><span class="code-tag">&lt;</span><span class="code-name"><span class="code-tag"><span class="code-name">script</span></span></span><span class="code-tag"> </span><span class="hljs-attr"><span class="code-tag"><span class="hljs-attr">src</span></span></span><span class="code-tag">=</span><span class="code-string"><span class="code-tag"><span class="code-string">"/dev/js/index/index.js"</span></span></span><span class="code-tag">&gt;</span></span><span class="undefined"></span><span class="code-tag"><span class="undefined"></span><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">script</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">body</span></span></span><span class="code-tag">&gt;</span></span>\n<span class="code-tag"><span class="code-tag">&lt;/</span><span class="code-name"><span class="code-tag"><span class="code-name">html</span></span></span><span class="code-tag">&gt;</span></span></code></pre>\n<p>main.jsx：</p>\n<pre class="javascript"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by chkui on 2016/11/17.\n */</span></span>\n\n<span class="code-comment"><span class="code-comment">//jsx</span></span>\n<span class="code-comment"><span class="code-comment">/*\nvar React = require(\'react\');\nvar ReactDOM = require(\'react-dom\');\nvar Comp1 = require(\'./component1.jsx\');\nrequire(\'../../../style/index/index.css\');\n\nReactDOM.render(\n    &lt;div className="main"&gt;\n        react jsx demo:\n        &lt;Comp1 /&gt;\n    &lt;/div&gt;,\n    document.getElementById(\'comp\')\n);\n*/</span></span>\n\n<span class="code-comment"><span class="code-comment">//es2015</span></span>\n<span class="code-keyword"><span class="code-keyword">import</span></span> React <span class="code-keyword"><span class="code-keyword">from</span></span> <span class="code-string"><span class="code-string">\'react\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">import</span></span> ReactDOM <span class="code-keyword"><span class="code-keyword">from</span></span> <span class="code-string"><span class="code-string">\'react-dom\'</span></span>;\n<span class="code-keyword"><span class="code-keyword">import</span></span> Comp1 <span class="code-keyword"><span class="code-keyword">from</span></span> <span class="code-string"><span class="code-string">\'./component1.jsx\'</span></span> <span class="code-comment"><span class="code-comment">/*切记，大写是变量小写是标签*/</span></span>\n<span class="code-keyword"><span class="code-keyword">import</span></span> style <span class="code-keyword"><span class="code-keyword">from</span></span> <span class="code-string"><span class="code-string">\'../../../style/index/index.css\'</span></span>\n\nReactDOM.render(\n    <span class="xml"><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span class="code-tag"> </span></span><span class="hljs-attr"><span class="xml"><span class="code-tag"><span class="hljs-attr">className</span></span></span></span><span class="xml"><span class="code-tag">=</span></span><span class="code-string"><span class="xml"><span class="code-tag"><span class="code-string">"main"</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span><span class="xml">\n        react es2015 demo:\n        </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">Comp1</span></span></span></span><span class="xml"><span class="code-tag"> /&gt;</span></span></span><span class="xml">\n    </span><span class="code-tag"><span class="xml"><span class="code-tag">&lt;/</span></span><span class="code-name"><span class="xml"><span class="code-tag"><span class="code-name">div</span></span></span></span><span class="xml"><span class="code-tag">&gt;</span></span></span></span>\n    ,\n    <span class="code-built_in"><span class="code-built_in">document</span></span>.getElementById(<span class="code-string"><span class="code-string">\'comp\'</span></span>)\n);\n</code></pre>\n<p>component1.jsx：</p>\n<pre class="scala"><code class="language-javascript"><span class="code-comment"><span class="code-comment">/**\n * Created by Administrator on 2016/11/17.\n */</span></span>\n\n<span class="code-comment"><span class="code-comment">//jsx</span></span>\n<span class="code-comment"><span class="code-comment">/*\nvar React = require(\'react\');\nvar comp1 = React.createClass({\n    render: function () {\n        return (\n          &lt;div className = "index"&gt;\n            hello react!\n          &lt;/div&gt;\n        );\n    }\n});\nmodule.exports = comp1;\n*/</span></span>\n\n<span class="code-comment"><span class="code-comment">//es6</span></span>\n<span class="code-keyword"><span class="code-keyword">import</span></span> <span class="code-type">React</span> <span class="code-keyword">from</span> <span class="code-string"><span class="code-string">"react"</span></span>\n<span class="hljs-class"><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">class</span></span></span><span class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">Comp1</span></span></span><span class="hljs-class"> </span><span class="code-keyword"><span class="hljs-class"><span class="code-keyword">extends</span></span></span><span class="hljs-class"> </span><span class="code-title"><span class="hljs-class"><span class="code-title">React</span></span></span><span class="hljs-class">.</span><span class="code-title"><span class="hljs-class"><span class="code-title">Component</span></span></span></span>{\n    <span class="code-comment"><span class="code-comment">//构造函数</span></span>\n    <span class="code-keyword">constructor</span>(...args){\n        <span class="code-keyword"><span class="code-keyword">super</span></span>(...args);\n    }\n    <span class="code-comment"><span class="code-comment">//覆盖父类的渲染方法</span></span>\n    render() {\n        <span class="code-keyword"><span class="code-keyword">return</span></span> (\n            <span class="xml"><span class="code-tag">&lt;<span class="code-name">div</span> <span class="hljs-attr">className</span> = <span class="code-string"><span class="code-string">"index"</span></span>&gt;</span>\n                hello react!\n            <span class="code-tag">&lt;/<span class="code-name">div</span>&gt;</span></span>\n        );\n    }\n}\n<span class="code-keyword">export</span> <span class="code-keyword"><span class="code-keyword">default</span></span> <span class="code-type">Comp1</span>;\n</code></pre>\n<p>编码完毕之后，我们使用我们设定好的脚本运行我们的本地开发环境：</p>\n<pre class=""><code class="language-bash"><span class="code-variable">$ </span>npm run dev</code></pre>\n<p>启动时，所有的文本都会被读取到内存中，我们可以根据输出来聊天到底添加了哪些依赖的文件。启动完成后，浏览器上输入&nbsp;http://localhost:8080/dev/index.html 或&nbsp;http://localhost:8080/webpack-dev-server/dev/index.html 即可看到我们用react开发的页面。此时修改js或css文件，编辑效果都会立刻呈现在浏览器上。</p>\n\n<h2 id="h2-4">React浏览器调试工具</h2>\n<p>Facebook提供了基于chrome的页面调试工具，可以看到所有react组件及其效果。</p>\n<p>工具安装：</p>\n<ol>\n    <li>首先最重要的是——翻墙-_-。不翻墙chrome的网上商店就别想了。</li>\n    <li>然后在chrome网店搜索“React Developer Tool”。</li>\n    <li>找到后添加到chrome。</li>\n</ol>\n<p>添加完成后可以发现在chrome中增加了react的图标。</p>\n<p><img alt="React 搭建开发环境" height="282" src="https://file.mahoooo.com/res/file/react_establish_development_environment_2.png" width="638"></p>\n<p>然后在demo页面按F12打开开发人员工具，会发现多了一个React栏目。选择这个栏目后，会显示出React组件的效果。</p>\n<p><img alt="React 搭建开发环境" height="198" src="https://file.mahoooo.com/res/file/react_establish_development_environment_3.png" width="693"></p>'},395:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<p>在<a href="https://www.chkui.com/article/spring/spring_core_string_to_entity" title="字符串到实体转换">字符串到实体转换</a>一文中介绍了Spring核心框架中使用PropertyEditor将任何字符串转换为数字、实体的方法。除了字符串到实体，Spring还提供了更加通用的功能在对象和对象之间进行数据转换。\n</p>\n\n<h2 id="h2-1">Converter&lt;S, T&gt;</h2>\n<p>Spring的类型转换的基础是Converter&lt;S, T&gt;（以下简称转换器）接口：</p>\n<pre><code class="java"><span class="code-keyword">package</span> org.springframework.core.convert.converter;\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n            class="code-title">Converter</span>&lt;<span class="code-title">S</span>, <span class="code-title">T</span>&gt; </span>{\n    <span class="hljs-function">T <span class="code-title">convert</span><span\n            class="hljs-params">(S source)</span></span>;\n}</code></pre>\n<p>\n    光是看他的结构就很清晰的明白这个接口是要做什么。S表示Source（来源）、T表示Target（目标），所以这个接口的2个范型参数就是数据从S转换为T，Converter::convert方法正是输入一个“S”类型的实例，返回一个“T”类型的实例。</p>\n<p>可以通过这个接口实现规范化、可复用的类型转换功能。下面通过转换器实现字符串到PC实体类相互转换的过程。</p>\n<p>Pc实体：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">PC</span> <span class="code-keyword">extends</span> <span\n        class="code-title">Device</span> </span>{\n\tString cpu;\n\tString graphic;\n\tString ram;\n    <span class="code-comment">//Getter &amp; Setter ...</span>\n}</code></pre>\n<p>在基类Device中通过反射实现字符串到实体类的转换：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="code-keyword">abstract</span> <span\n        class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Device</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">void</span> <span\n            class="code-title">pares</span><span class="hljs-params">(String text)</span></span>{ <span\n            class="code-comment">//字符串转换为实体</span>\n\t\tField[] fields = <span class="code-keyword">this</span>.getClass().getDeclaredFields();\n\t\t<span class="code-keyword">for</span> (Field field : fields) {\n\t\t\t<span class="code-keyword">int</span> begIndex = text.indexOf(field.getName());\n\t\t\t<span class="code-keyword">int</span> endIndex = text.indexOf(<span class="code-string">";"</span>, begIndex);\n\t\t\tString sub = text.substring(begIndex, endIndex), value = sub.split(<span\n            class="code-string">"="</span>)[<span class="hljs-number">1</span>];\n\t\t\tfield.setAccessible(<span class="code-keyword">true</span>);\n\t\t    field.set(<span class="code-keyword">this</span>, value);\n\t\t}\n\t};\n\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">value</span><span class="hljs-params">()</span></span>{ <span class="code-comment">//实体转换为字符串</span>\n\t\tField[] fields = <span class="code-keyword">this</span>.getClass().getDeclaredFields();\n\t\tStringBuilder sb = <span class="code-keyword">new</span> StringBuilder();\n\t\t<span class="code-keyword">for</span> (Field field : fields) {\n\t\t\tsb.append(field.getName());\n\t\t\tsb.append(<span class="code-string">"="</span>);\n\t\t\tsb.append(field.get(<span class="code-keyword">this</span>).toString());\n\t\t\tsb.append(<span class="code-string">";"</span>);\n\t\t}\n\t\t<span class="code-keyword">return</span> sb.toString();\n\t}\n}</code></pre>\n<p>然后声明两个转换器的实现类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">String2PcConverter</span> <span class="code-keyword">implements</span> <span\n        class="code-title">Converter</span>&lt;<span class="code-title">String</span>, <span\n        class="code-title">PC</span>&gt; </span>{\n    <span class="code-comment">//字符串转换为PC对象</span>\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> PC <span class="code-title">convert</span><span\n            class="hljs-params">(String source)</span> </span>{\n\t\tPC pc = <span class="code-keyword">new</span> PC();\n\t\tpc.pares(source);\n\t\t<span class="code-keyword">return</span> pc;\n\t}\n}</code></pre>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">PC2StringConverter</span> <span class="code-keyword">implements</span> <span\n        class="code-title">Converter</span>&lt;<span class="code-title">PC</span>, <span\n        class="code-title">String</span>&gt;  </span>{\n    <span class="code-comment">//PC对象转换为字符串</span>\n\t<span class="code-meta">@Override</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> String <span\n            class="code-title">convert</span><span class="hljs-params">(PC source)</span> </span>{\n\t\t<span class="code-keyword">return</span> source.value();\n\t}\n}</code></pre>\n<p>最后使用这两个转换器：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">void</span> <span\n            class="code-title">singletonConversion</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="code-keyword">final</span> String text = <span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>;\n\t\tConverter&lt;String, PC&gt; string2Pc = <span class="code-keyword">new</span> String2PcConverter();\n\t\tPC pc = string2Pc.convert(text);\n\t\tConverter&lt;PC, String&gt; pc2String = <span class="code-keyword">new</span> PC2StringConverter();\n\t\tString string = pc2String.convert(pc);\n\t}\n}</code></pre>\n<p>以上就是Spring最基本的类型转换功能——围绕着转换器（<em>Converter&lt;S, T&gt;）</em>接口实现数据类型转换。看到这里可能有些码友就要问了：这到底有什么用？直接用使用Device::pares和Device::value方法不就完事了？为什么还要引入转换器兜一圈？？！\n</p>\n<p>\n    如果系统仅仅只有1个或几个类型转换确实没必要引入转换器。但是业务总是繁杂多样的，模块与模块之前也会存在数据结构的差异，因此我们需要适配器（Adapter）、外观（Facade）等模式来应对变化多端的外部输入而无需改动业务逻辑。实际上从更高的层次看，Converter接口就是Spring为类型转换提供的一个适配器。后面会看到Spring已经为程序的顺利运行提供了大量的转换器，即使在阅读本文内容之前不知道这些转换器的存在，但Spring框架时时刻刻都在使用他们。</p>\n\n<h2 id="h2-2">ConverterFactory&lt;S, R&gt;</h2>\n<p>转换器只能对单一类型进行转换，如果有大量相同类别的数据需要转换可以使用ConverterFactory（一下简称转换工厂）：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">interface</span> <span\n        class="code-title">ConverterFactory</span>&lt;<span class="code-title">S</span>, <span\n        class="code-title">R</span>&gt; </span>{\n\n    &lt;T extends R&gt; <span class="hljs-function">Converter&lt;S, T&gt; <span\n            class="code-title">getConverter</span><span class="hljs-params">(Class&lt;T&gt; targetType)</span></span>;\n}</code></pre>\n<p>ConverterFactory::getConverter是返回一个转换器，这里范型标记“T”是“R”的子类。看下面转换工厂的例子，他可以将字符串转换成Device的子类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">String2DeviceConverterFactory</span> <span class="code-keyword">implements</span> <span\n        class="code-title">ConverterFactory</span>&lt;<span class="code-title">String</span>, <span class="code-title">Device</span>&gt; </span>{\n\t<span class="code-keyword">public</span> &lt;T extends Device&gt; <span class="hljs-function">Converter&lt;String, T&gt; <span\n            class="code-title">getConverter</span><span class="hljs-params">(Class&lt;T&gt; targetType)</span> </span>{\n\t\t<span class="code-keyword">return</span> <span class="code-keyword">new</span> String2DeviceConverter(targetType);\n\t}\n\n    <span class="code-comment">// Device的通用转换器</span>\n\t<span class="code-keyword">static</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">String2DeviceConverter</span>&lt;<span class="code-title">T</span> <span\n            class="code-keyword">extends</span> <span class="code-title">Device</span>&gt; <span class="code-keyword">implements</span> <span\n            class="code-title">Converter</span>&lt;<span class="code-title">String</span>, <span class="code-title">Device</span>&gt; </span>{\n\t\t<span class="code-keyword">private</span> Class&lt;? extends Device&gt; klass;\n\t\t<span class="hljs-function"><span class="code-keyword">public</span> <span class="code-title">String2DeviceConverter</span><span\n                class="hljs-params">(Class&lt;? extends Device&gt; klass)</span> </span>{\n\t\t\t<span class="code-keyword">this</span>.klass = klass;\n\t\t}\n\n\t\t<span class="hljs-function"><span class="code-keyword">public</span> T <span\n                class="code-title">convert</span><span class="hljs-params">(String source)</span> </span>{\n\t\t\tDevice device = <span class="code-keyword">null</span>;\n\t\t\tdevice = klass.newInstance();\n\t\t\tdevice.pares(source);\n\t\t\t<span class="code-keyword">return</span> (T) device;\n\t\t}\n\t}\n}</code></pre>\n<p>然后可以使用这个转换工厂按照目标类型进行转换：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{\n\t<span class="hljs-function"><span class="code-keyword">void</span> <span class="code-title">factoryConversion</span><span\n            class="hljs-params">()</span> </span>{\n\t\tString2DeviceConverterFactory factory = <span class="code-keyword">new</span> String2DeviceConverterFactory();\n\t\tConverter&lt;String, PC&gt; pcConverter = factory.getConverter(PC.class);\n\t\t<span class="code-comment">//将字符串转换为PC</span>\n\t\tPC pc = pcConverter.convert(<span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>);\n\n\t\tConverter&lt;String, Phone&gt; phoneConverter = factory.getConverter(Phone.class);\n\t\t<span class="code-comment">//将字符串转换为Phone</span>\n\t\tPhone phone = phoneConverter.convert(<span class="code-string">"name=HUAWEIP20;cpu=Kirin970;ram=64G;"</span>);\n\t}\n}</code></pre>\n<p>Phone是另外一个继承了Device的实体类：</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">Phone</span> <span class="code-keyword">extends</span> <span class="code-title">Device</span> </span>{\n\tString name;\n\tString cpu;\n\tString ram;\n    <span class="code-comment">// Getter &amp; Setter</span>\n}</code></pre>\n\n<h2 id="h2-3">数据转换服务</h2>\n<p>\n    Spring已经为数据转换预设了大量的Converter，这些Converter可以通过ConversionService直接使用。ConversionService中包含了几乎所有Java常规类型的数据格式转换，看下面的案例。</p>\n<pre><code class="java"><span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n        class="code-title">ConversionApp</span> </span>{<span class="hljs-function">ConversionApp <span\n        class="code-title">registConversionService</span><span class="hljs-params">()</span> </span>{\n\t\tConfigurableApplicationContext ctx = <span class="code-keyword">new</span> AnnotationConfigApplicationContext(ConversionConfig.class);\n        <span class="code-comment">// 获取ConversionService</span>\n\t\tConversionService service = ctx.getBean(ConversionService.class);\n\t\t<span class="code-comment">// 字符串转换为整型</span>\n\t\t<span class="code-keyword">int</span> i = service.convert(<span class="code-string">"123456"</span>, Integer.class);\n\t\t<span class="code-comment">// 字符串转换为浮点</span>\n\t\t<span class="code-keyword">float</span> f = service.convert(<span class="code-string">"1234.56"</span>, Float.class);\n\t\t<span class="code-comment">// 源生列表转换为List</span>\n\t\tList&lt;?&gt; list = service.convert(<span class="code-keyword">new</span> <span class="code-keyword">int</span>[] { <span\n            class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span\n            class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> }, List.class);\n\t\t<span class="code-comment">// 源生列表转换为Set</span>\n\t\tSet&lt;?&gt; set = service.convert(<span class="code-keyword">new</span> <span class="code-keyword">int</span>[] { <span\n            class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span\n            class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> }, Set.class);\n\t\t<span class="code-comment">// 枚举转换</span>\n\t\tGender gender = service.convert(<span class="code-string">"Male"</span>, Gender.class);\n\t\t<span class="code-comment">// 使用自定义转换器</span>\n\t\tPC pc = service.convert(<span class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>, PC.class);\n\t\t<span class="code-comment">// UUID转换</span>\n\t\tUUID uuid = service.convert(<span class="code-string">"f51b4b95-0925-4ad0-8c62-4daf3ea7918f"</span>, UUID.class);\n\t\t<span class="code-comment">// 字符串转换为Optional&lt;PC&gt;</span>\n\t\tOptional&lt;PC&gt; options = service.convert(<span\n            class="code-string">"cpu=amd;ram=kingston;graphic=Navidia;"</span>, Optional.class);\n\t\t<span class="code-comment">// 使用TypeDescriptor描述进行转换</span>\n\t\tString source = <span class="code-string">"123456789"</span>;\n\t\t<span class="code-keyword">int</span> result = (<span class="code-keyword">int</span>) service.convert(source, TypeDescriptor.valueOf(source.getClass()),\n\t\t\t\tTypeDescriptor.valueOf(Integer.class));\n\t\t_G.print(result);\n\t}\n\n\t<span class="code-keyword">enum</span> Gender {\n\t\tMale, Female, Other\n\t}\n}</code></pre>\n<p>\n    除了上面的转换，ConversionService还提供了其他转换器，详情请看org.springframework.core.convert.support.DefaultConversionService的JavaDoc文档。</p>\n<p>需要通过ConversionServiceFactoryBean来启用ConversionService，下面的代码是在@Configurable中向IoC容器添加ConversionServiceFactoryBean：</p>\n<pre><code class="java"><span class="code-meta">@Configurable</span>\n<span class="code-keyword">public</span> <span class="hljs-class"><span class="code-keyword">class</span> <span\n            class="code-title">ConversionConfig</span> </span>{\n\n\t<span class="code-meta">@Bean</span>\n\t<span class="hljs-function"><span class="code-keyword">public</span> ConversionServiceFactoryBean <span\n            class="code-title">ConversionServiceFactoryBean</span><span class="hljs-params">()</span> </span>{\n\t\tConversionServiceFactoryBean factoryBean = <span class="code-keyword">new</span> ConversionServiceFactoryBean();\n\t\tSet&lt;Converter&gt; converters = <span class="code-keyword">new</span> HashSet&lt;&gt;();\n\t\t<span class="code-comment">// 添加自定义转换器</span>\n\t\tconverters.add(<span class="code-keyword">new</span> String2PcConverter());\n\t\tconverters.add(<span class="code-keyword">new</span> PC2StringConverter());\n\t\tfactoryBean.setConverters(converters);\n\t\t<span class="code-keyword">return</span> factoryBean;\n\t}\n}</code></pre>\n<p>也可以通过XML文件配置来引入ConversionService：</p>\n<pre><code class="xml"><span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">id</span>=<span\n        class="code-string">"conversionService"</span>\n        <span class="hljs-attr">class</span>=<span class="code-string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span>\n    <span class="code-tag">&lt;<span class="code-name">property</span> <span class="hljs-attr">name</span>=<span\n            class="code-string">"converters"</span>&gt;</span>\n        <span class="code-tag">&lt;<span class="code-name">set</span>&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                    class="code-string">"chkui.springcore.example.javabase.conversion.support.PC2StringConverter"</span>/&gt;</span>\n            <span class="code-tag">&lt;<span class="code-name">bean</span> <span class="hljs-attr">class</span>=<span\n                    class="code-string">"chkui.springcore.example.javabase.conversion.support.String2PcConverter"</span>/&gt;</span>\n        <span class="code-tag">&lt;/<span class="code-name">set</span>&gt;</span>\n    <span class="code-tag">&lt;/<span class="code-name">property</span>&gt;</span>\n<span class="code-tag">&lt;/<span class="code-name">bean</span>&gt;</span></code></pre>\n<p>ConversionService在Spring MVC中的作用很大，可以全局注册统一的类型转换器，详情请见&nbsp;<a\n        href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/web.html#mvc-config-conversion"\n        rel="nofollow">Conversion and Formatting</a>。&nbsp;</p>\n                                            '},421:function(s,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.content='<h2 id="h2-1">表命名规范</h2>\n<p>表命名的规则分为3个层级，层级之间通过<code>_</code>分割，例如<code>b_r_identity</code>、<code>d_l_identity</code>。规约为:</p>\n<pre><code class="css"><span class="hljs-selector-attr">[leavel]</span>_<span\n        class="hljs-selector-attr">[type]</span>_<span class="hljs-selector-attr">[name]</span>\n</code></pre>\n<p><strong>[leavel]</strong> 表示数据库表的层级和功能，分为：</p>\n<ol>\n    <li><strong>s</strong>：业务无关的系统数据表。</li>\n    <li><strong>d</strong>：业务字典表。</li>\n    <li><strong>b</strong>：基础业务表。</li>\n    <li><strong>v</strong>：视图。</li>\n    <li><strong>i</strong>：聚合中间表。</li>\n</ol>\n<p><strong>[type]</strong> 表示数据库表的类型，分为：</p>\n<ol>\n    <li><strong>r</strong>：行数据表。</li>\n    <li><strong>l</strong>：列数据表。</li>\n    <li><strong>g</strong>：分组数据表。</li>\n</ol>\n<p><strong>[name]</strong> 用来表示表的作用名称，由于mysql默认对大小写不敏感，采用下划线命名法。比如：\n    <code>identity_enterprise</code>。</p>\n<p>因此，综合上面的规范，如果将<strong>用户模块</strong>命名为<strong>user</strong>，相关的表命名为：</p>\n<ul>\n    <li>数据字典以列数据的方式存储，可以命名为：<code>d_l_user_dc</code>。</li>\n    <li>用户主表以行数据的方式存储，命名为：<code>b_r_user</code>。</li>\n    <li>用户账户表：<code>b_r_user_account</code>。</li>\n</ul>\n<p>采用以上命名法的目的：</p>\n<ol>\n    <li>便于代码开发阶段区分表的功能和数据组织形式；</li>\n    <li>通过前缀为以后可能会引入的开源框架生成的表扩展命名空间。</li>\n</ol>\n<blockquote>\n    <p>比如引入了流程框架activity，会向数据库添加几十个表，其中有名为account的表，如果不适用前缀，会增加引入的成本。</p>\n</blockquote>\n<h2 id="h2-2">字段命名规范</h2>\n<ol>\n    <li>逻辑主键：id。所有的表必须创建逻辑主键。采用统一的主键便于分库分表以及数据抽取。</li>\n    <li>业务主键：code, 确保唯一性或联合主键。业务主键除了反映真实数据关联，也便于程序进行类型判断。</li>\n    <li>外键：columnName_fk，字段信息名+fk后缀，比如state_fk。</li>\n    <li>父主键关联：pid</li>\n</ol>\n<h2 id="h2-3">行数据规范</h2>\n<p>所有的表必须包含modify_date、modify_type、modify_user、modify_access_id、activity字段。</p>\n<ol>\n    <li><code>modify_date</code>：标记数据修改时间，用于数据增量ETL或缺陷回溯。类型：<code>TIMESTAMP(13)</code>。</li>\n    <li>\n        <code>modify_type</code>：数据修改类型，通常数据由运营后台修改<code>OPR(0)</code>，或账号拥有这修改<code>USR(1)</code>。用于记录数据修改的行事人。类型：<code>TINYINT(1)</code>。\n    </li>\n    <li><code>modify_user</code>：结合modify_type，标记是修改人。类型：<code>BIGINT</code>。</li>\n    <li><code>modify_access_id</code>：在数据库中用于标记当前数据修改是由哪个访问id导致的。类型：<code>BIGINT</code>。</li>\n    <li><code>activity</code>：行数据标识符。用于标识行数据的作用范围，ACT(1)/DIS(2)/DEL(0)，启用、停用、逻辑删除。类型：<code>TINYINT(1)</code>。</li>\n    <li>所有的时间字段均以时间戳（Java十三位标准）的方式存储，Mysql对应<code>TIMESTAMP(13)</code>类型。</li>\n</ol>\n<h2 id="h2-4">ER范式规范与反范式规范</h2>\n<h3 id="h3-1">ER三范式</h3>\n<p>在联机事物数据库中（Mysql的InnoDB类型数据库）业务数据与业务数据（命名以<code>b</code>开头的表）之间的ER关系严格按照ER三范式进行设计：</p>\n<pre><code class="markdown">三范式原则：\n<span class="hljs-bullet">1. </span>有逻辑主键、主键非空、主键唯一、字段不可再分。\n<span class="hljs-bullet">2. </span>具备独立不依赖数据内容的逻辑主键。\n<span class="hljs-bullet">3. </span>没有属性传递（不能有数据冗余）\n</code></pre>\n<h3 id="h3-2">反范式适用范围</h3>\n<h4 id="h4-1">业务字典允许数据传递</h4>\n<p>业务数据(<code>b</code>开头)与数据字典（<code>d</code>开头）之间的依赖关系允许数据冗余（传递）。</p>\n<p>满足以上条件必须保证业务字典数据演进严格依赖<strong>开闭原则</strong>：类似设计模式的开闭原则——数据修改关闭，数据添加开放。</p>\n<p>这个时候可以在业务数据表中对业务字典进行数据冗余，例如:</p>\n<p>字典：</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>pid</th>\n        <th>code</th>\n        <th>name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>主键</td>\n        <td>父主键</td>\n        <td>业务编码</td>\n        <td>名称</td>\n        <td></td>\n    </tr>\n    </tbody>\n</table>\n<p>数据表：</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>state_fk</th>\n        <th>state_code</th>\n        <th>state_name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>主键</td>\n        <td>父外键</td>\n        <td>状态编码</td>\n        <td>状态名称</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<h4 id="h4-2">数据仓库或视图完全反范式</h4>\n<p>数据仓库（MyISam）或者事物数据库（InnoDB）中的视图和数据中间表优先使用反范式的规则去实现。</p>\n<h3 id="h3-3">参考阅读</h3>\n<p>关于范式设计的说明请参阅后文的**“ER范式与反范式设计规范设计背景及原因”**。</p>\n<h2 id="h2-5">主键规范</h2>\n<p>\n    逻辑（物理）主键使用64bit的<code>BigInt</code>类型，通过<strong>Snowflake算法获取</strong>。它可以完全充当<em>Mysql</em>主键，也能平滑兼容<em>MyCat</em>、<em>Sharding-jdbc</em>（3.0后更名为<em>Sharding-Sphere</em>）等开源分库分表数据源管理工具。\n</p>\n<p>业务组件原则上不做任何关联查询，只用于标记单表业务内容。</p>\n<p>采用该规范的原因请见后文<strong>主键规范设计背景及原因</strong>。</p>\n<h2 id="h2-6">数据缓存规范</h2>\n<p>缓存通过Redis实现。</p>\n<h3 id="h3-4">key使用规范</h3>\n<p>对应数据结构必须是扁平的（更像一个反范式的数据仓库表或视图）。由于在设计数据主键时保证主键id的全系统唯一性，理论上Nosql中key使用主键即刻确保唯一，但是为了区分业务，需要使用前缀。</p>\n<p><strong>索引数据使用模块+业务名+key：{module}:{buss}:{key}</strong>，例如</p>\n<pre><code class="bash">SET user:mgr:1234567891234567891\n</code></pre>\n<p>原则上key的长度不能超过64个字符。太长的业务key请使用hash进行一次签名。</p>\n<h3 id="h3-5">主数据与业务主键索引</h3>\n<p><strong>主数据</strong>：是指真实存储数据的结构。通常<em>对象</em>都是Redis中的HASH格式存储（HASH格式相当于Java中的map、Python中的dict、Json中的对象块——{}），功能数据数据根据需要使用string、set或list。\n</p>\n<p><strong>业务主键索引</strong>：在我们使用key-value进行数据存储时，用于查询的key并无法满足业务，有时候数据是用业务主键传参的，这个时候需要创建一个指向真实主数据的索引，建立业务主键和逻辑主键的关联关系。这个时候在Redis中可以使用业务索引映射主数据key然后再取值的方式，比如下列格式：\n</p>\n<pre><code class="sql"><span class="code-keyword">SET</span> {<span\n        class="code-keyword">module</span>}:{buss}:{code} {<span class="code-keyword">module</span>}:{buss}:{<span\n        class="code-keyword">id</span>}\n<span class="code-keyword">set</span> hkey {<span class="code-keyword">module</span>}:{buss}:{<span\n            class="code-keyword">id</span>} <span class="code-keyword">id</span> <span\n            class="hljs-number">123</span> <span class="code-keyword">name</span> <span\n            class="code-string">"Alice"</span> age <span class="hljs-number">20</span>\n</code></pre>\n<p>这样，业务主键code通过2次索引可以找到id对应的主数据。</p>\n<h3 id="h3-6">Value数据规范</h3>\n<p>Java中的实体对象使用Redis中的HASH格式存储，确保数据的扁平化，不能使用嵌套结构。例如</p>\n<pre><code class="objectivec"><span class="code-comment">//正确</span>\n<span class="code-keyword">id</span>:{\n    name:<span class="code-string">"Alice"</span>,\n    age:<span class="hljs-number">28</span>,\n    pos:<span class="code-string">"developer"</span>\n    salary:<span class="hljs-number">100000</span>\n}\n<span class="code-comment">//错误</span>\n<span class="code-keyword">id</span>:{\n    baseInfo:{\n        name:<span class="code-string">"Alice"</span>\n        age:<span class="hljs-number">28</span>\n    },\n    workInfo:{\n        pos:<span class="code-string">"developer"</span>,\n        salart:<span class="hljs-number">100000</span>\n    }\n}\n</code></pre>\n<p>其他应用场景可以根据需要使用Set、List、String，请注意他们的差异（与Java对应的数据结构类似），并且一定保证数据扁平。</p>\n<h2 id="h2-7">数据读写规范</h2>\n<ul>\n    <li>当需要批量读写数据时，使用mset、mget等原生批量处理命令，Redis自动保证数据原子性。</li>\n    <li>尽量不要使用通道——pipeline。</li>\n    <li>不要使用Redis做事务处理。</li>\n    <li>禁止线上使用keys、flushall、flushdb等，管理员redis的rename机制禁掉命令。（严重影响性能）</li>\n</ul>\n<p>参考资料：Redis更多的规范参考<a href="https://blog.csdn.net/glx490676405/article/details/79580748" title="阿里云Redis服务使用规范">阿里云Redis服务使用规范</a>。\n</p>\n<hr>\n<h2 id="h2-8">主键规范设计背景及原因。</h2>\n<p>在分布式微服务系统中采用Mysql的自增主键在分表分库、灾备合库、分布式执行、缓存Write-Behind写时会有很大制约，因此需要制定不依赖数据库的行主键规范。</p>\n<h3 id="h3-7">主键类型</h3>\n<p>在解释数据设计规范之前先理解<strong>物理主键</strong>、<strong>逻辑主键</strong>和<strong>业务主键</strong>的区别:</p>\n<p><strong>物理主键</strong>即认为是数据库的自身的物理标识主键，例如oracle的ROW_ID，mysql的自增Sequence，物理主键除了具备独立的物理特性，也是数据库连接数据的核心。mysql中要求单表唯一。\n</p>\n<p><strong>逻辑主键</strong>是与数据库无关的非业务意义的主键，用于对行数据的唯一性进行标识。在单数据库系统中，通常不需要逻辑主键，而在分布式系统中，逻辑主键的意义重大。无论是什么数据库，逻辑主键要求全库（所有的数据库）唯一。某些时候可以将物理主键和逻辑主键合二为一。\n</p>\n<p><strong>业务主键</strong>是指与含有业务特性的的主键，例如订单编号会以 时间+流水号+业务编号实行存在。业务主键通常的要求是单向业务唯一，由于从技术角度来说业务是随时可变的，因此业务主键并不能提到逻辑主键或物理主键。\n</p>\n<h3 id="h3-8">MySql（InnoDB）索引特性</h3>\n<p>由于InnoDB的行数据排列是以主键数据（Oracle是ROW_ID）作为b+树索引，<strong>而扩展的索引都以主键索引作为数据对象——这种方式称为聚集索引</strong>。所以最大效率的保证b+树主键和索引数据进入的递增性对于数据库的性能有决定性作用（b+树越扁平，效率越高）。\n</p>\n<p>使用mysql的自增Sequence可以很自然的解决这个问题，主键就向一个队列一样，只要insert数据向队列尾push数据即可，几乎不会发生索引重建和数据碎片。但是自增队在分布式系统中使用有巨大的局限性。</p>\n<p>如果直接使用UUID既充当物理主键又充当业务主键，由于 <em>UUID并无法保障数据的递增性(？)</em>,会导数据碎片已经主键索引更新效率。此外UUID的长度是32位字符串，即使用ascii的编码方案，也会占据不少的空间。\n</p>\n<h3 id="h3-9">传统中间解决方案</h3>\n<p>\n    基于Mysql目前也可以自动生成UUID，所以有一种中间解决方案是在分布式系统的数据库中物理主键使用Mysql的自增Sequence，逻辑主键使用UUID，所有的ER关联都使用UUID建立，这样可以很好的保障<strong>聚集索引</strong>添加数据的效率，且能极大减少碎片。由于InnoDB聚集索引除了主键索引都会引起二次查询，所以这种方式外关联效率较差（即使是单表查询效率也一般）。\n</p>\n<h3 id="h3-10">主键需求</h3>\n<p>整合以上内容，现在我们需要一个具备以下特征的主键：</p>\n<ol>\n    <li>递增。</li>\n    <li>全系统唯一（至少保证单业务唯一）。</li>\n    <li>高效产生。</li>\n    <li>尽量短。（减少扩展索引的存储空间）</li>\n</ol>\n<h3 id="h3-11">连续递增与趋势递增</h3>\n<p>对于B+树递增要求的并不需要连续递增（0,1,2,3,4......）,只要趋势递增即可（0,3,5,7,18,100.....）。</p>\n<h3 id="h3-12">Snowflake算法</h3>\n<p>为了满足主键需求，现在比较推崇的是<em>Snowflake算法</em>。</p>\n<p>\n    <img src="http://upload-images.jianshu.io/upload_images/2308314-36052935d31a654e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp"\n         alt="数据结构（数据库）设计规范" title="Snowflake算法" class="zoom-in-cursor"></p>\n<p>Snowflake算法会产生一个<code>64bit</code>的数据，正好在Java中是一个long类型，对应Mysql是一个BigInt类型。</p>\n<ol>\n    <li>第一位是符号位（正负号）。在使用过程中基本不用理睬。</li>\n    <li>其后的41位表示时间戳的差值。</li>\n    <li>10位工作机id称为workid，需要人工指定。10bit=2^10=1024个Id</li>\n    <li>后续的12位用于在微秒级别生成序列号。</li>\n</ol>\n<p><strong>效率：</strong></p>\n<ul>\n    <li>\n        <p>因为其本质上还是一个数字，所以在关联查询能力上不会比源生的自增Sequence的差多少（微秒/纳秒级别）。</p>\n    </li>\n    <li>\n        <p>官方文档Snowflake Id算法理论上单机每秒可以生成409.6万个ID——1000个微秒单位，12位序列编码=1000*(2^12)。</p>\n    </li>\n</ul>\n<p><strong>递增性质：</strong></p>\n<p>算法是以微秒+递增序列作为区分的，并且时间单位处于64bit中的高位，在所有的微服务节点没有达到生成极限时（每秒409.6万个）一定是趋势递增的，计时达到了极限，也仅仅在时间单位出现相同。</p>\n<p><strong>传输：</strong></p>\n<p>64bit的long类型转换为十进制只有20个数字，由于64bit的第一个位置表示符号，所以实际只有19个数字。在http报文中仅仅是19个字符。如果将其转换为16进制或[0~9a~z]满表的36进制。长度还能极大的压缩。</p>\n<p><strong>局限性：</strong></p>\n<ol>\n    <li>\n        <p>\n            由于其本质是基于微秒级的机器时间戳进行ID生成，所以当整个集群有时间一致性服务时候，可能会发生时间回拨（也有可能是人为修改，不过几乎不可能发生）。当时间发生回拨时就会有极大的概率在回拨时间区内出现主键冲突。百度有个Snowflake算法变种解决方案是使用中心化的按块生成ID尽可能的回避这个问题。此外如果并发并没有达到极高的程度时，可以让入口服务器来统一生成access_id作为后续业务新增数据时的主键，当然这也没法完全解决这个问题。</p>\n    </li>\n    <li>\n        <p>\n            64bit的算法如果要求全系统主键唯一，那么基于算法的workid特性最大支持1024台服务器同时生成主键，再多就会出现冲突。解决办法就是不要求全系统唯一，而收敛为单个业务唯一，这样可以视为单个业务可以具有1024个分布式服务。</p>\n    </li>\n    <li>\n        <p>其数据位数决定了其从使用开始最多服务61年，61年后出现类似于千年虫的问题超出现有数据位。</p>\n    </li>\n</ol>\n<h3 id="h3-13">参考</h3>\n<ol>\n    <li>Snowflake算法最早由推特twitter的工程师创立并开源，现在整合到RPC框架<a href="https://twitter.github.io/finagle/"\n                                                      title="Finagle">Finagle</a>中，当然没必要引入整个Finagle，可以到这里<a\n            href="https://github.com/twitter-archive/snowflake/releases/tag/snowflake-2010" title="基本算法下载地址">下载核心算法</a>。\n    </li>\n    <li>Snowflake有个非常方便的使用途径是引入<a href="https://mvnrepository.com/artifact/io.shardingsphere/sharding-core"\n                                  title="sharding-core">sharding-core</a>。然后使用其中的<a\n            href="https://github.com/apache/incubator-shardingsphere/blob/b281f3e52410c2fdbc3e12e69a09e5109a96fa20/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/strategy/keygen/SnowflakeShardingKeyGenerator.java"\n            title="SnowflakeShardingKeyGenerator">SnowflakeShardingKeyGenerator</a>。当然Snowflake算法本身并不复杂，使用源码就能解决问题，而且具有极佳的扩展性。\n    </li>\n    <li>算法中workid最大支持1024，通常可以通过主动命名、ip地址、服务器命名等方式决定。</li>\n    <li>网上关于Snowflake算法的极少很多，自行查询解决问题。</li>\n</ol>\n<hr>\n<h2 id="h2-9">ER范式与反范式设计规范设计背景及原因</h2>\n<h3 id="h3-14">业务字典与代码适配器</h3>\n<p>通常情况下，在一个标准的联机事物系统中数据库和业务代码的关系可以总结为：</p>\n<ul>\n    <li>数据库的的作用就是存储业务数据和状态结论。</li>\n    <li>业务代码是为了处理数据从外部进入或数据库内部的状态迁移。</li>\n</ul>\n<p>例如一个用户注册，通过代码各种处理和鉴权之后，最终会将用户的各种注册信息写入到数据库中。一个用户登录会涉及到数据库已经存在的数据的变更。</p>\n<p>\n    数据库可以看成一个静态的网状结构，只是忠实的在网状结构的某些点记录“结论”，结论通常由2部分组成：数据+状态。与之相对的，代码的作用就是接收外部信息后触发数据库中的状态迁移和数据演进。业务代码最困难的也是导致问题最多的就是状态控制与状态处理。</p>\n<p>对于代码而言，处理各种状态是最常见的过程，例如：</p>\n<pre><code class="Java"><span class="code-keyword">if</span>（state = A）{\n    <span class="code-keyword">do</span> A processor\n}<span class="code-keyword">else</span> <span class="code-keyword">if</span>(state = B){\n    <span class="code-keyword">do</span> B processor\n}\n</code></pre>\n<p>一个不规范的数据库状态的存储方式千差万别，例如一个用户信息表<code>user_info</code>有以下结构:</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>name</th>\n        <th>user_state</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alice</td>\n        <td>0</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Bob</td>\n        <td>1</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<p>现在有一个<code>user_state</code>字段表示用户状态，然后当值为0时表示注销、当值为1时候表示启用，或者还会有其他更多的状态不断添加进来。</p>\n<p>这样会导致3个问题：</p>\n<ol>\n    <li>0和1并没有实际意义，在设计初期可能会很有意识的在字段备注中说明每个数字带边状态意义，但是在系统不断的进化或迭代后，0和1的控制难度会越来越大。</li>\n    <li>状态的不同必然会导致分支处理，分支处理最粗暴的方式就是上面的代码例子会进行if-else堆叠，随着状态的增加，整个系统的if-else块会飞速递增。</li>\n    <li>\n        无论是否使用0和1还是有实际意义的单词标记状态。在理解的过程中要嵌入大量的if块去了解处理的结果，可读性很差。从而导致新加入项目的开发人员无暇去根据已有的状态阅读代码，而更趋向于增加状态而非在原来的状态上进行演进。这样会导致一个简单的业务标识状态的字段会越来越多。\n    </li>\n</ol>\n<p>基于以上原因，引入业务字典来解决这个问题。将上面的状态控制拆分为业务字典表和业务表。</p>\n<p>业务字典表</p>\n<table>\n    <thead>\n    <tr>\n        <th>code</th>\n        <th>name</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>activity</td>\n        <td>账户启用</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>locked</td>\n        <td>账户锁定</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<p>数据报表</p>\n<table>\n    <thead>\n    <tr>\n        <th>id</th>\n        <th>name</th>\n        <th>user_state</th>\n        <th>...</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alice</td>\n        <td>activity</td>\n        <td>...</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Bob</td>\n        <td>locked</td>\n        <td>...</td>\n    </tr>\n    </tbody>\n</table>\n<pre><code class="Java"><span class="code-comment">//伪编码</span>\n\n<span class="hljs-class"><span class="code-keyword">interface</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function">Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>;\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Activity</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>{\n        <span class="code-comment">//DO</span>\n    }\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">Locked</span> <span\n        class="code-keyword">implements</span> <span class="code-title">Processor</span></span>{\n    <span class="hljs-function"><span class="code-keyword">public</span> Result <span class="code-title">Do</span><span\n            class="hljs-params">(Data data)</span></span>{\n        <span class="code-comment">//DO</span>\n    }\n}\n\n<span class="hljs-class"><span class="code-keyword">class</span> <span class="code-title">AdapterFactory</span></span>{\n\n    <span class="code-comment">//写Java的请注意</span>\n    <span class="code-comment">//这里用js或Python的方式表示一个map结构（python中叫dict结构，js中叫对象结构）</span>\n    <span class="code-comment">//只因用Java表示一个map太麻烦</span>\n    Map processorDict = {\n        <span class="code-string">"activity"</span>:Activity.instance,\n        <span class="code-string">"locked"</span>:Locked.instance\n    }\n\t\n    <span class="hljs-function"><span class="code-keyword">public</span> <span class="code-keyword">static</span> <span\n            class="code-title">getProcessor</span><span class="hljs-params">(<span class="code-keyword">enum</span> state)</span></span>{\n        <span class="code-keyword">return</span> processorDict[State];\n    }\n}\n\n<span class="code-comment">//使用</span>\nProcessor processor = AdapterFactory.getProcessor(state);\nprocessor.<span class="code-keyword">do</span>(data);\n</code></pre>\n<p>使用以上方式。首先在业务流程中不必嵌套大量的if。其次可以将代码与业务字典的状态进行1-1绑定，即一个状态对应一个适配器。最后需要扩展更多的状态的就是对应扩展更多的处理器（适配器）。</p>\n<p>咋一看这样的写法似乎比if多不少代码，但是用这种状态+适配器的模式在系统迭代时能够带来极大的便利。</p>\n<h3 id="h3-15">数据仓库的反范式</h3>\n<p>严格按照ER三范式设计数据库带来的好处是能最好的反应真实业务，能及有效的约束数据强一致性避免“脏数据”的出现。带来的问题是大量的外关联导致大量的关联查询，严重影响查询性能。</p>\n<p>因此建议如果某项业务启用了数据仓库（MyISam），或者在事物数据库（InnoDB）中使用了View或中间表集合数据，务必严格按照Kimball或Inmon模型使用反范式创立单体数据仓库表。</p>'}});